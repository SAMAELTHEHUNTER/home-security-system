
finalProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e034  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac8  0800e1c4  0800e1c4  0001e1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec8c  0800ec8c  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ec8c  0800ec8c  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ec8c  0800ec8c  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec8c  0800ec8c  0001ec8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec90  0800ec90  0001ec90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0800ec94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d4  2**0
                  CONTENTS
 10 .bss          00000714  200000d4  200000d4  000200d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007e8  200007e8  000200d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001da52  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000335d  00000000  00000000  0003db56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  00040eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001700  00000000  00000000  00042690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020fb1  00000000  00000000  00043d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020882  00000000  00000000  00064d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7aae  00000000  00000000  000855c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014d071  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b5c  00000000  00000000  0014d0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e1ac 	.word	0x0800e1ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	0800e1ac 	.word	0x0800e1ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	; 0x38
 8000a70:	af0a      	add	r7, sp, #40	; 0x28
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	4608      	mov	r0, r1
 8000a76:	4611      	mov	r1, r2
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	817b      	strh	r3, [r7, #10]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	813b      	strh	r3, [r7, #8]
 8000a82:	4613      	mov	r3, r2
 8000a84:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <LiquidCrystal+0x90>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d019      	beq.n	8000ac2 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000a8e:	8939      	ldrh	r1, [r7, #8]
 8000a90:	897a      	ldrh	r2, [r7, #10]
 8000a92:	2300      	movs	r3, #0
 8000a94:	9308      	str	r3, [sp, #32]
 8000a96:	2300      	movs	r3, #0
 8000a98:	9307      	str	r3, [sp, #28]
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	9306      	str	r3, [sp, #24]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	9305      	str	r3, [sp, #20]
 8000aa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000aa4:	9304      	str	r3, [sp, #16]
 8000aa6:	8c3b      	ldrh	r3, [r7, #32]
 8000aa8:	9303      	str	r3, [sp, #12]
 8000aaa:	8bbb      	ldrh	r3, [r7, #28]
 8000aac:	9302      	str	r3, [sp, #8]
 8000aae:	8b3b      	ldrh	r3, [r7, #24]
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	68f9      	ldr	r1, [r7, #12]
 8000aba:	2001      	movs	r0, #1
 8000abc:	f000 f820 	bl	8000b00 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000ac0:	e018      	b.n	8000af4 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000ac2:	8939      	ldrh	r1, [r7, #8]
 8000ac4:	897a      	ldrh	r2, [r7, #10]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	9308      	str	r3, [sp, #32]
 8000aca:	2300      	movs	r3, #0
 8000acc:	9307      	str	r3, [sp, #28]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	9306      	str	r3, [sp, #24]
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	9305      	str	r3, [sp, #20]
 8000ad6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ad8:	9304      	str	r3, [sp, #16]
 8000ada:	8c3b      	ldrh	r3, [r7, #32]
 8000adc:	9303      	str	r3, [sp, #12]
 8000ade:	8bbb      	ldrh	r3, [r7, #28]
 8000ae0:	9302      	str	r3, [sp, #8]
 8000ae2:	8b3b      	ldrh	r3, [r7, #24]
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	460b      	mov	r3, r1
 8000aec:	68f9      	ldr	r1, [r7, #12]
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 f806 	bl	8000b00 <init>
}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000000 	.word	0x20000000

08000b00 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	4611      	mov	r1, r2
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	460b      	mov	r3, r1
 8000b12:	81bb      	strh	r3, [r7, #12]
 8000b14:	4613      	mov	r3, r2
 8000b16:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000b18:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <init+0x84>)
 8000b1a:	89bb      	ldrh	r3, [r7, #12]
 8000b1c:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000b1e:	4a1a      	ldr	r2, [pc, #104]	; (8000b88 <init+0x88>)
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000b24:	4a19      	ldr	r2, [pc, #100]	; (8000b8c <init+0x8c>)
 8000b26:	8b3b      	ldrh	r3, [r7, #24]
 8000b28:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <init+0x90>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000b30:	4a18      	ldr	r2, [pc, #96]	; (8000b94 <init+0x94>)
 8000b32:	8bbb      	ldrh	r3, [r7, #28]
 8000b34:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <init+0x94>)
 8000b38:	8c3b      	ldrh	r3, [r7, #32]
 8000b3a:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000b3c:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <init+0x94>)
 8000b3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b40:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000b42:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <init+0x94>)
 8000b44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b46:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <init+0x94>)
 8000b4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000b4c:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000b4e:	4a11      	ldr	r2, [pc, #68]	; (8000b94 <init+0x94>)
 8000b50:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000b52:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000b54:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <init+0x94>)
 8000b56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000b58:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <init+0x94>)
 8000b5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b5e:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <init+0x98>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
 8000b6c:	e002      	b.n	8000b74 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <init+0x98>)
 8000b70:	2210      	movs	r2, #16
 8000b72:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000b74:	2102      	movs	r1, #2
 8000b76:	2010      	movs	r0, #16
 8000b78:	f000 f810 	bl	8000b9c <begin>
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000f2 	.word	0x200000f2
 8000b88:	200000f4 	.word	0x200000f4
 8000b8c:	200000f6 	.word	0x200000f6
 8000b90:	20000108 	.word	0x20000108
 8000b94:	200000f8 	.word	0x200000f8
 8000b98:	2000010c 	.word	0x2000010c

08000b9c <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	460a      	mov	r2, r1
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d906      	bls.n	8000bc0 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8000bb2:	4b77      	ldr	r3, [pc, #476]	; (8000d90 <begin+0x1f4>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	f043 0308 	orr.w	r3, r3, #8
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b74      	ldr	r3, [pc, #464]	; (8000d90 <begin+0x1f4>)
 8000bbe:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000bc0:	4a74      	ldr	r2, [pc, #464]	; (8000d94 <begin+0x1f8>)
 8000bc2:	79bb      	ldrb	r3, [r7, #6]
 8000bc4:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8000bc6:	79fa      	ldrb	r2, [r7, #7]
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	3340      	adds	r3, #64	; 0x40
 8000bcc:	2140      	movs	r1, #64	; 0x40
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 f988 	bl	8000ee4 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000bd4:	4b70      	ldr	r3, [pc, #448]	; (8000d98 <begin+0x1fc>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d009      	beq.n	8000bf0 <begin+0x54>
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d106      	bne.n	8000bf0 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 8000be2:	4b6b      	ldr	r3, [pc, #428]	; (8000d90 <begin+0x1f4>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	4b68      	ldr	r3, [pc, #416]	; (8000d90 <begin+0x1f4>)
 8000bee:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000bf0:	f000 f8e4 	bl	8000dbc <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000bfc:	4b67      	ldr	r3, [pc, #412]	; (8000d9c <begin+0x200>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01b      	beq.n	8000c3c <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000c04:	4b66      	ldr	r3, [pc, #408]	; (8000da0 <begin+0x204>)
 8000c06:	881a      	ldrh	r2, [r3, #0]
 8000c08:	4b66      	ldr	r3, [pc, #408]	; (8000da4 <begin+0x208>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	4b65      	ldr	r3, [pc, #404]	; (8000da8 <begin+0x20c>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	4b64      	ldr	r3, [pc, #400]	; (8000dac <begin+0x210>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4b62      	ldr	r3, [pc, #392]	; (8000dac <begin+0x210>)
 8000c22:	885b      	ldrh	r3, [r3, #2]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	4b60      	ldr	r3, [pc, #384]	; (8000dac <begin+0x210>)
 8000c2a:	889b      	ldrh	r3, [r3, #4]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b5e      	ldr	r3, [pc, #376]	; (8000dac <begin+0x210>)
 8000c32:	88db      	ldrh	r3, [r3, #6]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	e02a      	b.n	8000c92 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000c3c:	4b58      	ldr	r3, [pc, #352]	; (8000da0 <begin+0x204>)
 8000c3e:	881a      	ldrh	r2, [r3, #0]
 8000c40:	4b58      	ldr	r3, [pc, #352]	; (8000da4 <begin+0x208>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	4b57      	ldr	r3, [pc, #348]	; (8000da8 <begin+0x20c>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000c50:	4b56      	ldr	r3, [pc, #344]	; (8000dac <begin+0x210>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000c58:	4b54      	ldr	r3, [pc, #336]	; (8000dac <begin+0x210>)
 8000c5a:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000c60:	4b52      	ldr	r3, [pc, #328]	; (8000dac <begin+0x210>)
 8000c62:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000c68:	4b50      	ldr	r3, [pc, #320]	; (8000dac <begin+0x210>)
 8000c6a:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b4e      	ldr	r3, [pc, #312]	; (8000dac <begin+0x210>)
 8000c72:	891b      	ldrh	r3, [r3, #8]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	4b4c      	ldr	r3, [pc, #304]	; (8000dac <begin+0x210>)
 8000c7a:	895b      	ldrh	r3, [r3, #10]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b4a      	ldr	r3, [pc, #296]	; (8000dac <begin+0x210>)
 8000c82:	899b      	ldrh	r3, [r3, #12]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	4b48      	ldr	r3, [pc, #288]	; (8000dac <begin+0x210>)
 8000c8a:	89db      	ldrh	r3, [r3, #14]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000c90:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 8000c92:	4b47      	ldr	r3, [pc, #284]	; (8000db0 <begin+0x214>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f107 020c 	add.w	r2, r7, #12
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f008 f835 	bl	8008d0c <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 8000ca2:	2032      	movs	r0, #50	; 0x32
 8000ca4:	f006 fb8e 	bl	80073c4 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000ca8:	4b41      	ldr	r3, [pc, #260]	; (8000db0 <begin+0x214>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a3c      	ldr	r2, [pc, #240]	; (8000da0 <begin+0x204>)
 8000cae:	8811      	ldrh	r1, [r2, #0]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f008 f9bc 	bl	8009030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000cb8:	4b3d      	ldr	r3, [pc, #244]	; (8000db0 <begin+0x214>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a3a      	ldr	r2, [pc, #232]	; (8000da8 <begin+0x20c>)
 8000cbe:	8811      	ldrh	r1, [r2, #0]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f008 f9b4 	bl	8009030 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 8000cc8:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <begin+0x208>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	2bff      	cmp	r3, #255	; 0xff
 8000cce:	d007      	beq.n	8000ce0 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000cd0:	4b37      	ldr	r3, [pc, #220]	; (8000db0 <begin+0x214>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a33      	ldr	r2, [pc, #204]	; (8000da4 <begin+0x208>)
 8000cd6:	8811      	ldrh	r1, [r2, #0]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f008 f9a8 	bl	8009030 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <begin+0x1f4>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	f003 0310 	and.w	r3, r3, #16
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d115      	bne.n	8000d18 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 fa45 	bl	800117c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000cf2:	2005      	movs	r0, #5
 8000cf4:	f006 fb66 	bl	80073c4 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 fa3f 	bl	800117c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000cfe:	2005      	movs	r0, #5
 8000d00:	f006 fb60 	bl	80073c4 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 fa39 	bl	800117c <write4bits>
    HAL_Delay(1);
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f006 fb5a 	bl	80073c4 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000d10:	2002      	movs	r0, #2
 8000d12:	f000 fa33 	bl	800117c <write4bits>
 8000d16:	e01d      	b.n	8000d54 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <begin+0x1f4>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	f043 0320 	orr.w	r3, r3, #32
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f9a4 	bl	8001070 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000d28:	2005      	movs	r0, #5
 8000d2a:	f006 fb4b 	bl	80073c4 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <begin+0x1f4>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	f043 0320 	orr.w	r3, r3, #32
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 f999 	bl	8001070 <command>
    HAL_Delay(1);
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f006 fb40 	bl	80073c4 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <begin+0x1f4>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	f043 0320 	orr.w	r3, r3, #32
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f98e 	bl	8001070 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <begin+0x1f4>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	f043 0320 	orr.w	r3, r3, #32
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f986 	bl	8001070 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <begin+0x218>)
 8000d66:	2204      	movs	r2, #4
 8000d68:	701a      	strb	r2, [r3, #0]
  display();
 8000d6a:	f000 f917 	bl	8000f9c <display>

  // clear it off
  clear();
 8000d6e:	f000 f8d9 	bl	8000f24 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <begin+0x21c>)
 8000d74:	2202      	movs	r2, #2
 8000d76:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <begin+0x21c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f974 	bl	8001070 <command>

}
 8000d88:	bf00      	nop
 8000d8a:	3720      	adds	r7, #32
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000010c 	.word	0x2000010c
 8000d94:	2000010f 	.word	0x2000010f
 8000d98:	200000f0 	.word	0x200000f0
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	200000f2 	.word	0x200000f2
 8000da4:	200000f4 	.word	0x200000f4
 8000da8:	200000f6 	.word	0x200000f6
 8000dac:	200000f8 	.word	0x200000f8
 8000db0:	20000108 	.word	0x20000108
 8000db4:	2000010d 	.word	0x2000010d
 8000db8:	2000010e 	.word	0x2000010e

08000dbc <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8000dc2:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <enableClock+0x10c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dca:	d10c      	bne.n	8000de6 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b3f      	ldr	r3, [pc, #252]	; (8000ecc <enableClock+0x110>)
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	4a3e      	ldr	r2, [pc, #248]	; (8000ecc <enableClock+0x110>)
 8000dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd6:	6153      	str	r3, [r2, #20]
 8000dd8:	4b3c      	ldr	r3, [pc, #240]	; (8000ecc <enableClock+0x110>)
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de0:	61fb      	str	r3, [r7, #28]
 8000de2:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000de4:	e06a      	b.n	8000ebc <enableClock+0x100>
  else if(_port == GPIOB)
 8000de6:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <enableClock+0x10c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a39      	ldr	r2, [pc, #228]	; (8000ed0 <enableClock+0x114>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d10c      	bne.n	8000e0a <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000df0:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <enableClock+0x110>)
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	4a35      	ldr	r2, [pc, #212]	; (8000ecc <enableClock+0x110>)
 8000df6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dfa:	6153      	str	r3, [r2, #20]
 8000dfc:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <enableClock+0x110>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e04:	61bb      	str	r3, [r7, #24]
 8000e06:	69bb      	ldr	r3, [r7, #24]
}
 8000e08:	e058      	b.n	8000ebc <enableClock+0x100>
  else if(_port == GPIOB)
 8000e0a:	4b2f      	ldr	r3, [pc, #188]	; (8000ec8 <enableClock+0x10c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a30      	ldr	r2, [pc, #192]	; (8000ed0 <enableClock+0x114>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d10c      	bne.n	8000e2e <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <enableClock+0x110>)
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	4a2c      	ldr	r2, [pc, #176]	; (8000ecc <enableClock+0x110>)
 8000e1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e1e:	6153      	str	r3, [r2, #20]
 8000e20:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <enableClock+0x110>)
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697b      	ldr	r3, [r7, #20]
}
 8000e2c:	e046      	b.n	8000ebc <enableClock+0x100>
	else if(_port == GPIOC)
 8000e2e:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <enableClock+0x10c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a28      	ldr	r2, [pc, #160]	; (8000ed4 <enableClock+0x118>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d10c      	bne.n	8000e52 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <enableClock+0x110>)
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	4a23      	ldr	r2, [pc, #140]	; (8000ecc <enableClock+0x110>)
 8000e3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e42:	6153      	str	r3, [r2, #20]
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <enableClock+0x110>)
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]
}
 8000e50:	e034      	b.n	8000ebc <enableClock+0x100>
	else if(_port == GPIOD)
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <enableClock+0x10c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a20      	ldr	r2, [pc, #128]	; (8000ed8 <enableClock+0x11c>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d10c      	bne.n	8000e76 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <enableClock+0x110>)
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <enableClock+0x110>)
 8000e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e66:	6153      	str	r3, [r2, #20]
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <enableClock+0x110>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	e022      	b.n	8000ebc <enableClock+0x100>
	else if(_port == GPIOE)
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <enableClock+0x10c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a18      	ldr	r2, [pc, #96]	; (8000edc <enableClock+0x120>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d10c      	bne.n	8000e9a <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <enableClock+0x110>)
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	4a11      	ldr	r2, [pc, #68]	; (8000ecc <enableClock+0x110>)
 8000e86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e8a:	6153      	str	r3, [r2, #20]
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <enableClock+0x110>)
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
}
 8000e98:	e010      	b.n	8000ebc <enableClock+0x100>
	else if(_port == GPIOF)
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <enableClock+0x10c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <enableClock+0x124>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d10b      	bne.n	8000ebc <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <enableClock+0x110>)
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <enableClock+0x110>)
 8000eaa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eae:	6153      	str	r3, [r2, #20]
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <enableClock+0x110>)
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
}
 8000ebc:	bf00      	nop
 8000ebe:	3724      	adds	r7, #36	; 0x24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	20000108 	.word	0x20000108
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	48000400 	.word	0x48000400
 8000ed4:	48000800 	.word	0x48000800
 8000ed8:	48000c00 	.word	0x48000c00
 8000edc:	48001000 	.word	0x48001000
 8000ee0:	48001400 	.word	0x48001400

08000ee4 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <setRowOffsets+0x3c>)
 8000ef8:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <setRowOffsets+0x3c>)
 8000f00:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <setRowOffsets+0x3c>)
 8000f08:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <setRowOffsets+0x3c>)
 8000f10:	70da      	strb	r2, [r3, #3]
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000110 	.word	0x20000110

08000f24 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f000 f8a1 	bl	8001070 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f006 fa48 	bl	80073c4 <HAL_Delay>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	460a      	mov	r2, r1
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	4613      	mov	r3, r2
 8000f46:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8000f48:	2304      	movs	r3, #4
 8000f4a:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d803      	bhi.n	8000f5c <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <setCursor+0x5c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	79ba      	ldrb	r2, [r7, #6]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d303      	bcc.n	8000f6e <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <setCursor+0x5c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <setCursor+0x60>)
 8000f72:	5cd2      	ldrb	r2, [r2, r3]
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	4413      	add	r3, r2
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f873 	bl	8001070 <command>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000010f 	.word	0x2000010f
 8000f98:	20000110 	.word	0x20000110

08000f9c <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <display+0x28>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <display+0x28>)
 8000fac:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <display+0x28>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f859 	bl	8001070 <command>
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000010d 	.word	0x2000010d

08000fc8 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <print+0x12>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e01d      	b.n	8001016 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff f8f6 	bl	80001d0 <strlen>
 8000fe4:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8000fea:	e00c      	b.n	8001006 <print+0x3e>
    if (write(*buffer++)) n++;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	617a      	str	r2, [r7, #20]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f849 	bl	800108c <write>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d008      	beq.n	8001012 <print+0x4a>
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3301      	adds	r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1e5a      	subs	r2, r3, #1
 800100a:	613a      	str	r2, [r7, #16]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1ed      	bne.n	8000fec <print+0x24>
 8001010:	e000      	b.n	8001014 <print+0x4c>
    else break;
 8001012:	bf00      	nop
  }
  return n;
 8001014:	68fb      	ldr	r3, [r7, #12]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	6039      	str	r1, [r7, #0]
 8001028:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	b25b      	sxtb	r3, r3
 8001038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800103c:	b25b      	sxtb	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f000 f815 	bl	8001070 <command>
  for (int i=0; i<8; i++) {
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	e009      	b.n	8001060 <createChar+0x42>
    write(charmap[i]);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	4413      	add	r3, r2
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f819 	bl	800108c <write>
  for (int i=0; i<8; i++) {
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3301      	adds	r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b07      	cmp	r3, #7
 8001064:	ddf2      	ble.n	800104c <createChar+0x2e>
  }
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f814 	bl	80010ac <send>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <write>:

inline size_t write(uint8_t value) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2101      	movs	r1, #1
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f806 	bl	80010ac <send>
  return 1; // assume sucess
 80010a0:	2301      	movs	r3, #1
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <send+0x6c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a16      	ldr	r2, [pc, #88]	; (800111c <send+0x70>)
 80010c2:	8811      	ldrh	r1, [r2, #0]
 80010c4:	79ba      	ldrb	r2, [r7, #6]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f007 ffb2 	bl	8009030 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <send+0x74>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	2bff      	cmp	r3, #255	; 0xff
 80010d2:	d007      	beq.n	80010e4 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <send+0x6c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a11      	ldr	r2, [pc, #68]	; (8001120 <send+0x74>)
 80010da:	8811      	ldrh	r1, [r2, #0]
 80010dc:	2200      	movs	r2, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f007 ffa6 	bl	8009030 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <send+0x78>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d004      	beq.n	80010fa <send+0x4e>
    write8bits(value); 
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f86c 	bl	80011d0 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 80010f8:	e009      	b.n	800110e <send+0x62>
    write4bits(value>>4);
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f83b 	bl	800117c <write4bits>
    write4bits(value);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	4618      	mov	r0, r3
 800110a:	f000 f837 	bl	800117c <write4bits>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000108 	.word	0x20000108
 800111c:	200000f2 	.word	0x200000f2
 8001120:	200000f4 	.word	0x200000f4
 8001124:	2000010c 	.word	0x2000010c

08001128 <pulseEnable>:

void pulseEnable(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <pulseEnable+0x4c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a11      	ldr	r2, [pc, #68]	; (8001178 <pulseEnable+0x50>)
 8001132:	8811      	ldrh	r1, [r2, #0]
 8001134:	2200      	movs	r2, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f007 ff7a 	bl	8009030 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 800113c:	2001      	movs	r0, #1
 800113e:	f006 f941 	bl	80073c4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <pulseEnable+0x4c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <pulseEnable+0x50>)
 8001148:	8811      	ldrh	r1, [r2, #0]
 800114a:	2201      	movs	r2, #1
 800114c:	4618      	mov	r0, r3
 800114e:	f007 ff6f 	bl	8009030 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8001152:	2001      	movs	r0, #1
 8001154:	f006 f936 	bl	80073c4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <pulseEnable+0x4c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <pulseEnable+0x50>)
 800115e:	8811      	ldrh	r1, [r2, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f007 ff64 	bl	8009030 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8001168:	2001      	movs	r0, #1
 800116a:	f006 f92b 	bl	80073c4 <HAL_Delay>
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000108 	.word	0x20000108
 8001178:	200000f6 	.word	0x200000f6

0800117c <write4bits>:

void write4bits(uint8_t value) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	e013      	b.n	80011b4 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <write4bits+0x4c>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <write4bits+0x50>)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001198:	79fa      	ldrb	r2, [r7, #7]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	fa42 f303 	asr.w	r3, r2, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	f007 ff41 	bl	8009030 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	3301      	adds	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	dde8      	ble.n	800118c <write4bits+0x10>
  }

  pulseEnable();
 80011ba:	f7ff ffb5 	bl	8001128 <pulseEnable>
}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000108 	.word	0x20000108
 80011cc:	200000f8 	.word	0x200000f8

080011d0 <write8bits>:

void write8bits(uint8_t value) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	e013      	b.n	8001208 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <write8bits+0x4c>)
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <write8bits+0x50>)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80011ec:	79fa      	ldrb	r2, [r7, #7]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	fa42 f303 	asr.w	r3, r2, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	f007 ff17 	bl	8009030 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3301      	adds	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b07      	cmp	r3, #7
 800120c:	dde8      	ble.n	80011e0 <write8bits+0x10>
  }
  
  pulseEnable();
 800120e:	f7ff ff8b 	bl	8001128 <pulseEnable>
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000108 	.word	0x20000108
 8001220:	200000f8 	.word	0x200000f8

08001224 <PWM_Start>:
volatile uint32_t current_tone_end;
volatile uint16_t volume = 50;          // (0 - 1000)
volatile uint32_t last_button_press;


extern void PWM_Start() {
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <PWM_Start+0x18>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <PWM_Start+0x1c>)
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f009 ff30 	bl	800b098 <HAL_TIM_PWM_Start>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000004 	.word	0x20000004
 8001240:	20000678 	.word	0x20000678

08001244 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) { // pwm_freq (1 - 20000), volume (0 - 1000)
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	460a      	mov	r2, r1
 800124e:	80fb      	strh	r3, [r7, #6]
 8001250:	4613      	mov	r3, r2
 8001252:	80bb      	strh	r3, [r7, #4]
    if (pwm_freq == 0 || pwm_freq > 20000) {
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d004      	beq.n	8001264 <PWM_Change_Tone+0x20>
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001260:	4293      	cmp	r3, r2
 8001262:	d937      	bls.n	80012d4 <PWM_Change_Tone+0x90>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8001264:	4b52      	ldr	r3, [pc, #328]	; (80013b0 <PWM_Change_Tone+0x16c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d105      	bne.n	8001278 <PWM_Change_Tone+0x34>
 800126c:	4b51      	ldr	r3, [pc, #324]	; (80013b4 <PWM_Change_Tone+0x170>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2200      	movs	r2, #0
 8001274:	635a      	str	r2, [r3, #52]	; 0x34
 8001276:	e097      	b.n	80013a8 <PWM_Change_Tone+0x164>
 8001278:	4b4d      	ldr	r3, [pc, #308]	; (80013b0 <PWM_Change_Tone+0x16c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b04      	cmp	r3, #4
 800127e:	d105      	bne.n	800128c <PWM_Change_Tone+0x48>
 8001280:	4b4c      	ldr	r3, [pc, #304]	; (80013b4 <PWM_Change_Tone+0x170>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	2300      	movs	r3, #0
 8001288:	6393      	str	r3, [r2, #56]	; 0x38
 800128a:	e08d      	b.n	80013a8 <PWM_Change_Tone+0x164>
 800128c:	4b48      	ldr	r3, [pc, #288]	; (80013b0 <PWM_Change_Tone+0x16c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b08      	cmp	r3, #8
 8001292:	d105      	bne.n	80012a0 <PWM_Change_Tone+0x5c>
 8001294:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <PWM_Change_Tone+0x170>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	2300      	movs	r3, #0
 800129c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800129e:	e083      	b.n	80013a8 <PWM_Change_Tone+0x164>
 80012a0:	4b43      	ldr	r3, [pc, #268]	; (80013b0 <PWM_Change_Tone+0x16c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b0c      	cmp	r3, #12
 80012a6:	d105      	bne.n	80012b4 <PWM_Change_Tone+0x70>
 80012a8:	4b42      	ldr	r3, [pc, #264]	; (80013b4 <PWM_Change_Tone+0x170>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	2300      	movs	r3, #0
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	e079      	b.n	80013a8 <PWM_Change_Tone+0x164>
 80012b4:	4b3e      	ldr	r3, [pc, #248]	; (80013b0 <PWM_Change_Tone+0x16c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b10      	cmp	r3, #16
 80012ba:	d105      	bne.n	80012c8 <PWM_Change_Tone+0x84>
 80012bc:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <PWM_Change_Tone+0x170>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	2300      	movs	r3, #0
 80012c4:	6593      	str	r3, [r2, #88]	; 0x58
 80012c6:	e06f      	b.n	80013a8 <PWM_Change_Tone+0x164>
 80012c8:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <PWM_Change_Tone+0x170>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	2300      	movs	r3, #0
 80012d0:	65d3      	str	r3, [r2, #92]	; 0x5c
 80012d2:	e069      	b.n	80013a8 <PWM_Change_Tone+0x164>
    }
    else {
        const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 80012d4:	f009 faa8 	bl	800a828 <HAL_RCC_GetSysClockFreq>
 80012d8:	61f8      	str	r0, [r7, #28]
        const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	4a35      	ldr	r2, [pc, #212]	; (80013b8 <PWM_Change_Tone+0x174>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	0b9b      	lsrs	r3, r3, #14
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	3301      	adds	r3, #1
 80012ee:	837b      	strh	r3, [r7, #26]
        const uint32_t timer_clock = internal_clock_freq / prescaler;
 80012f0:	8b7b      	ldrh	r3, [r7, #26]
 80012f2:	69fa      	ldr	r2, [r7, #28]
 80012f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f8:	617b      	str	r3, [r7, #20]
        const uint32_t period_cycles = timer_clock / pwm_freq;
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	613b      	str	r3, [r7, #16]
        const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	fb02 f303 	mul.w	r3, r2, r3
 800130c:	4a2b      	ldr	r2, [pc, #172]	; (80013bc <PWM_Change_Tone+0x178>)
 800130e:	fba2 2303 	umull	r2, r3, r2, r3
 8001312:	09db      	lsrs	r3, r3, #7
 8001314:	60fb      	str	r3, [r7, #12]

        pwm_timer->Instance->PSC = prescaler - 1;
 8001316:	8b7b      	ldrh	r3, [r7, #26]
 8001318:	1e5a      	subs	r2, r3, #1
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <PWM_Change_Tone+0x170>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	629a      	str	r2, [r3, #40]	; 0x28
        pwm_timer->Instance->ARR = period_cycles - 1;
 8001322:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <PWM_Change_Tone+0x170>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	3a01      	subs	r2, #1
 800132c:	62da      	str	r2, [r3, #44]	; 0x2c
        pwm_timer->Instance->EGR = TIM_EGR_UG;
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <PWM_Change_Tone+0x170>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2201      	movs	r2, #1
 8001336:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <PWM_Change_Tone+0x16c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d105      	bne.n	800134c <PWM_Change_Tone+0x108>
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <PWM_Change_Tone+0x170>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 800134a:	e02d      	b.n	80013a8 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <PWM_Change_Tone+0x16c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b04      	cmp	r3, #4
 8001352:	d105      	bne.n	8001360 <PWM_Change_Tone+0x11c>
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <PWM_Change_Tone+0x170>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800135e:	e023      	b.n	80013a8 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <PWM_Change_Tone+0x16c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b08      	cmp	r3, #8
 8001366:	d105      	bne.n	8001374 <PWM_Change_Tone+0x130>
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <PWM_Change_Tone+0x170>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001372:	e019      	b.n	80013a8 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001374:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <PWM_Change_Tone+0x16c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b0c      	cmp	r3, #12
 800137a:	d105      	bne.n	8001388 <PWM_Change_Tone+0x144>
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <PWM_Change_Tone+0x170>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001386:	e00f      	b.n	80013a8 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <PWM_Change_Tone+0x16c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b10      	cmp	r3, #16
 800138e:	d105      	bne.n	800139c <PWM_Change_Tone+0x158>
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <PWM_Change_Tone+0x170>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6593      	str	r3, [r2, #88]	; 0x58
}
 800139a:	e005      	b.n	80013a8 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <PWM_Change_Tone+0x170>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80013a6:	e7ff      	b.n	80013a8 <PWM_Change_Tone+0x164>
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000678 	.word	0x20000678
 80013b4:	20000004 	.word	0x20000004
 80013b8:	45e7b273 	.word	0x45e7b273
 80013bc:	10624dd3 	.word	0x10624dd3

080013c0 <Change_Melody>:

void Change_Melody(const Tone *melody, uint16_t tone_count) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
    melody_ptr = melody;
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <Change_Melody+0x2c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
    melody_tone_count = tone_count;
 80013d2:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <Change_Melody+0x30>)
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	8013      	strh	r3, [r2, #0]
    current_tone_number = 0;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <Change_Melody+0x34>)
 80013da:	2200      	movs	r2, #0
 80013dc:	801a      	strh	r2, [r3, #0]
    PWM_Start();
 80013de:	f7ff ff21 	bl	8001224 <PWM_Start>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000067c 	.word	0x2000067c
 80013f0:	20000680 	.word	0x20000680
 80013f4:	20000682 	.word	0x20000682

080013f8 <Update_Melody>:

void Update_Melody() {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
    if ((HAL_GetTick() > current_tone_end) && (current_tone_number < melody_tone_count)) {
 80013fe:	f005 ffd5 	bl	80073ac <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <Update_Melody+0x6c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d927      	bls.n	800145c <Update_Melody+0x64>
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <Update_Melody+0x70>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	b29a      	uxth	r2, r3
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <Update_Melody+0x74>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	429a      	cmp	r2, r3
 800141a:	d21f      	bcs.n	800145c <Update_Melody+0x64>
        const Tone active_tone = *(melody_ptr + current_tone_number);
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <Update_Melody+0x78>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <Update_Melody+0x70>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	441a      	add	r2, r3
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	6810      	ldr	r0, [r2, #0]
 800142e:	6018      	str	r0, [r3, #0]
        PWM_Change_Tone(active_tone.frequency, volume);
 8001430:	88bb      	ldrh	r3, [r7, #4]
 8001432:	4a10      	ldr	r2, [pc, #64]	; (8001474 <Update_Melody+0x7c>)
 8001434:	8812      	ldrh	r2, [r2, #0]
 8001436:	b292      	uxth	r2, r2
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff02 	bl	8001244 <PWM_Change_Tone>
        current_tone_end = HAL_GetTick() + active_tone.duration;
 8001440:	f005 ffb4 	bl	80073ac <HAL_GetTick>
 8001444:	4603      	mov	r3, r0
 8001446:	88fa      	ldrh	r2, [r7, #6]
 8001448:	4413      	add	r3, r2
 800144a:	4a06      	ldr	r2, [pc, #24]	; (8001464 <Update_Melody+0x6c>)
 800144c:	6013      	str	r3, [r2, #0]
        current_tone_number++;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <Update_Melody+0x70>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	3301      	adds	r3, #1
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <Update_Melody+0x70>)
 800145a:	801a      	strh	r2, [r3, #0]
    }
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000684 	.word	0x20000684
 8001468:	20000682 	.word	0x20000682
 800146c:	20000680 	.word	0x20000680
 8001470:	2000067c 	.word	0x2000067c
 8001474:	20000008 	.word	0x20000008

08001478 <HAL_UART_RxCpltCallback>:

struct newScenario s1;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a87      	ldr	r2, [pc, #540]	; (80016a4 <HAL_UART_RxCpltCallback+0x22c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	f040 8191 	bne.w	80017ae <HAL_UART_RxCpltCallback+0x336>

		if (isUser == 0) {
 800148c:	4b86      	ldr	r3, [pc, #536]	; (80016a8 <HAL_UART_RxCpltCallback+0x230>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d162      	bne.n	800155a <HAL_UART_RxCpltCallback+0xe2>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001494:	2201      	movs	r2, #1
 8001496:	f44f 7100 	mov.w	r1, #512	; 0x200
 800149a:	4884      	ldr	r0, [pc, #528]	; (80016ac <HAL_UART_RxCpltCallback+0x234>)
 800149c:	f007 fdc8 	bl	8009030 <HAL_GPIO_WritePin>
			if ((uartInput[0] == 'j' && uartInput[1] == 'a' && uartInput[2] == 'l' && uartInput[3] == 'i' && uartInput[4] == 'l') || (uartInput[1] == 'j' && uartInput[2] == 'a' && uartInput[3] == 'l' && uartInput[4] == 'i' && uartInput[5] == 'l')) {
 80014a0:	4b83      	ldr	r3, [pc, #524]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b6a      	cmp	r3, #106	; 0x6a
 80014a6:	d10f      	bne.n	80014c8 <HAL_UART_RxCpltCallback+0x50>
 80014a8:	4b81      	ldr	r3, [pc, #516]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 80014aa:	785b      	ldrb	r3, [r3, #1]
 80014ac:	2b61      	cmp	r3, #97	; 0x61
 80014ae:	d10b      	bne.n	80014c8 <HAL_UART_RxCpltCallback+0x50>
 80014b0:	4b7f      	ldr	r3, [pc, #508]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 80014b2:	789b      	ldrb	r3, [r3, #2]
 80014b4:	2b6c      	cmp	r3, #108	; 0x6c
 80014b6:	d107      	bne.n	80014c8 <HAL_UART_RxCpltCallback+0x50>
 80014b8:	4b7d      	ldr	r3, [pc, #500]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 80014ba:	78db      	ldrb	r3, [r3, #3]
 80014bc:	2b69      	cmp	r3, #105	; 0x69
 80014be:	d103      	bne.n	80014c8 <HAL_UART_RxCpltCallback+0x50>
 80014c0:	4b7b      	ldr	r3, [pc, #492]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 80014c2:	791b      	ldrb	r3, [r3, #4]
 80014c4:	2b6c      	cmp	r3, #108	; 0x6c
 80014c6:	d013      	beq.n	80014f0 <HAL_UART_RxCpltCallback+0x78>
 80014c8:	4b79      	ldr	r3, [pc, #484]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 80014ca:	785b      	ldrb	r3, [r3, #1]
 80014cc:	2b6a      	cmp	r3, #106	; 0x6a
 80014ce:	d132      	bne.n	8001536 <HAL_UART_RxCpltCallback+0xbe>
 80014d0:	4b77      	ldr	r3, [pc, #476]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 80014d2:	789b      	ldrb	r3, [r3, #2]
 80014d4:	2b61      	cmp	r3, #97	; 0x61
 80014d6:	d12e      	bne.n	8001536 <HAL_UART_RxCpltCallback+0xbe>
 80014d8:	4b75      	ldr	r3, [pc, #468]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	2b6c      	cmp	r3, #108	; 0x6c
 80014de:	d12a      	bne.n	8001536 <HAL_UART_RxCpltCallback+0xbe>
 80014e0:	4b73      	ldr	r3, [pc, #460]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 80014e2:	791b      	ldrb	r3, [r3, #4]
 80014e4:	2b69      	cmp	r3, #105	; 0x69
 80014e6:	d126      	bne.n	8001536 <HAL_UART_RxCpltCallback+0xbe>
 80014e8:	4b71      	ldr	r3, [pc, #452]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 80014ea:	795b      	ldrb	r3, [r3, #5]
 80014ec:	2b6c      	cmp	r3, #108	; 0x6c
 80014ee:	d122      	bne.n	8001536 <HAL_UART_RxCpltCallback+0xbe>
				isUser = 1;
 80014f0:	4b6d      	ldr	r3, [pc, #436]	; (80016a8 <HAL_UART_RxCpltCallback+0x230>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, "enter your password:\n", 21, 100);
 80014f6:	2364      	movs	r3, #100	; 0x64
 80014f8:	2215      	movs	r2, #21
 80014fa:	496e      	ldr	r1, [pc, #440]	; (80016b4 <HAL_UART_RxCpltCallback+0x23c>)
 80014fc:	486e      	ldr	r0, [pc, #440]	; (80016b8 <HAL_UART_RxCpltCallback+0x240>)
 80014fe:	f00a ff03 	bl	800c308 <HAL_UART_Transmit>
				for(int i=0; i<5; i++) {
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e007      	b.n	8001518 <HAL_UART_RxCpltCallback+0xa0>
					uartInput[i] = '\0';
 8001508:	4a69      	ldr	r2, [pc, #420]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4413      	add	r3, r2
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<5; i++) {
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3301      	adds	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b04      	cmp	r3, #4
 800151c:	ddf4      	ble.n	8001508 <HAL_UART_RxCpltCallback+0x90>
				}
				HAL_UART_Receive_IT(&huart2, uartInput, 6);
 800151e:	2206      	movs	r2, #6
 8001520:	4963      	ldr	r1, [pc, #396]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 8001522:	4865      	ldr	r0, [pc, #404]	; (80016b8 <HAL_UART_RxCpltCallback+0x240>)
 8001524:	f00a ff7a 	bl	800c41c <HAL_UART_Receive_IT>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152e:	485f      	ldr	r0, [pc, #380]	; (80016ac <HAL_UART_RxCpltCallback+0x234>)
 8001530:	f007 fd7e 	bl	8009030 <HAL_GPIO_WritePin>
 8001534:	e13b      	b.n	80017ae <HAL_UART_RxCpltCallback+0x336>
			} else {
				HAL_UART_Transmit(&huart2, "your username was not correct\n", 30, 100);
 8001536:	2364      	movs	r3, #100	; 0x64
 8001538:	221e      	movs	r2, #30
 800153a:	4960      	ldr	r1, [pc, #384]	; (80016bc <HAL_UART_RxCpltCallback+0x244>)
 800153c:	485e      	ldr	r0, [pc, #376]	; (80016b8 <HAL_UART_RxCpltCallback+0x240>)
 800153e:	f00a fee3 	bl	800c308 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, "enter your username:\n", 21, 100);
 8001542:	2364      	movs	r3, #100	; 0x64
 8001544:	2215      	movs	r2, #21
 8001546:	495e      	ldr	r1, [pc, #376]	; (80016c0 <HAL_UART_RxCpltCallback+0x248>)
 8001548:	485b      	ldr	r0, [pc, #364]	; (80016b8 <HAL_UART_RxCpltCallback+0x240>)
 800154a:	f00a fedd 	bl	800c308 <HAL_UART_Transmit>
				HAL_UART_Receive_IT(&huart2, uartInput, 6);
 800154e:	2206      	movs	r2, #6
 8001550:	4957      	ldr	r1, [pc, #348]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 8001552:	4859      	ldr	r0, [pc, #356]	; (80016b8 <HAL_UART_RxCpltCallback+0x240>)
 8001554:	f00a ff62 	bl	800c41c <HAL_UART_Receive_IT>
				}

			}
		}
	}
}
 8001558:	e129      	b.n	80017ae <HAL_UART_RxCpltCallback+0x336>
			if (isPass == 0) {
 800155a:	4b5a      	ldr	r3, [pc, #360]	; (80016c4 <HAL_UART_RxCpltCallback+0x24c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d140      	bne.n	80015e4 <HAL_UART_RxCpltCallback+0x16c>
				if (uartInput[1] == '1' && uartInput[2] == '2' && uartInput[3] == '3' && uartInput[4] == '4' && uartInput[5] == '5') {
 8001562:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 8001564:	785b      	ldrb	r3, [r3, #1]
 8001566:	2b31      	cmp	r3, #49	; 0x31
 8001568:	d12a      	bne.n	80015c0 <HAL_UART_RxCpltCallback+0x148>
 800156a:	4b51      	ldr	r3, [pc, #324]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 800156c:	789b      	ldrb	r3, [r3, #2]
 800156e:	2b32      	cmp	r3, #50	; 0x32
 8001570:	d126      	bne.n	80015c0 <HAL_UART_RxCpltCallback+0x148>
 8001572:	4b4f      	ldr	r3, [pc, #316]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 8001574:	78db      	ldrb	r3, [r3, #3]
 8001576:	2b33      	cmp	r3, #51	; 0x33
 8001578:	d122      	bne.n	80015c0 <HAL_UART_RxCpltCallback+0x148>
 800157a:	4b4d      	ldr	r3, [pc, #308]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 800157c:	791b      	ldrb	r3, [r3, #4]
 800157e:	2b34      	cmp	r3, #52	; 0x34
 8001580:	d11e      	bne.n	80015c0 <HAL_UART_RxCpltCallback+0x148>
 8001582:	4b4b      	ldr	r3, [pc, #300]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 8001584:	795b      	ldrb	r3, [r3, #5]
 8001586:	2b35      	cmp	r3, #53	; 0x35
 8001588:	d11a      	bne.n	80015c0 <HAL_UART_RxCpltCallback+0x148>
					isPass = 1;
 800158a:	4b4e      	ldr	r3, [pc, #312]	; (80016c4 <HAL_UART_RxCpltCallback+0x24c>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, "your password was correct\n", 26, 100);
 8001590:	2364      	movs	r3, #100	; 0x64
 8001592:	221a      	movs	r2, #26
 8001594:	494c      	ldr	r1, [pc, #304]	; (80016c8 <HAL_UART_RxCpltCallback+0x250>)
 8001596:	4848      	ldr	r0, [pc, #288]	; (80016b8 <HAL_UART_RxCpltCallback+0x240>)
 8001598:	f00a feb6 	bl	800c308 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, "1-temp  2-sec  3-LED  4-scenario  5-sleep  6-exit\n", 50, 100);
 800159c:	2364      	movs	r3, #100	; 0x64
 800159e:	2232      	movs	r2, #50	; 0x32
 80015a0:	494a      	ldr	r1, [pc, #296]	; (80016cc <HAL_UART_RxCpltCallback+0x254>)
 80015a2:	4845      	ldr	r0, [pc, #276]	; (80016b8 <HAL_UART_RxCpltCallback+0x240>)
 80015a4:	f00a feb0 	bl	800c308 <HAL_UART_Transmit>
					HAL_UART_Receive_IT(&huart2, in, 2);
 80015a8:	2202      	movs	r2, #2
 80015aa:	4949      	ldr	r1, [pc, #292]	; (80016d0 <HAL_UART_RxCpltCallback+0x258>)
 80015ac:	4842      	ldr	r0, [pc, #264]	; (80016b8 <HAL_UART_RxCpltCallback+0x240>)
 80015ae:	f00a ff35 	bl	800c41c <HAL_UART_Receive_IT>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80015b2:	2201      	movs	r2, #1
 80015b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b8:	483c      	ldr	r0, [pc, #240]	; (80016ac <HAL_UART_RxCpltCallback+0x234>)
 80015ba:	f007 fd39 	bl	8009030 <HAL_GPIO_WritePin>
 80015be:	e0f6      	b.n	80017ae <HAL_UART_RxCpltCallback+0x336>
					HAL_UART_Transmit(&huart2, "your password was not correct\n", 30, 100);
 80015c0:	2364      	movs	r3, #100	; 0x64
 80015c2:	221e      	movs	r2, #30
 80015c4:	4943      	ldr	r1, [pc, #268]	; (80016d4 <HAL_UART_RxCpltCallback+0x25c>)
 80015c6:	483c      	ldr	r0, [pc, #240]	; (80016b8 <HAL_UART_RxCpltCallback+0x240>)
 80015c8:	f00a fe9e 	bl	800c308 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, "enter your password:\n", 21, 100);
 80015cc:	2364      	movs	r3, #100	; 0x64
 80015ce:	2215      	movs	r2, #21
 80015d0:	4938      	ldr	r1, [pc, #224]	; (80016b4 <HAL_UART_RxCpltCallback+0x23c>)
 80015d2:	4839      	ldr	r0, [pc, #228]	; (80016b8 <HAL_UART_RxCpltCallback+0x240>)
 80015d4:	f00a fe98 	bl	800c308 <HAL_UART_Transmit>
					HAL_UART_Receive_IT(&huart2, uartInput, 6);
 80015d8:	2206      	movs	r2, #6
 80015da:	4935      	ldr	r1, [pc, #212]	; (80016b0 <HAL_UART_RxCpltCallback+0x238>)
 80015dc:	4836      	ldr	r0, [pc, #216]	; (80016b8 <HAL_UART_RxCpltCallback+0x240>)
 80015de:	f00a ff1d 	bl	800c41c <HAL_UART_Receive_IT>
}
 80015e2:	e0e4      	b.n	80017ae <HAL_UART_RxCpltCallback+0x336>
				if (in[1] == '1' && menuState == 0) {
 80015e4:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <HAL_UART_RxCpltCallback+0x258>)
 80015e6:	785b      	ldrb	r3, [r3, #1]
 80015e8:	2b31      	cmp	r3, #49	; 0x31
 80015ea:	d107      	bne.n	80015fc <HAL_UART_RxCpltCallback+0x184>
 80015ec:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <HAL_UART_RxCpltCallback+0x260>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d103      	bne.n	80015fc <HAL_UART_RxCpltCallback+0x184>
					menuState = 1;
 80015f4:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <HAL_UART_RxCpltCallback+0x260>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e080      	b.n	80016fe <HAL_UART_RxCpltCallback+0x286>
				} else if (in[1] == '1' && menuState == 1) {
 80015fc:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_UART_RxCpltCallback+0x258>)
 80015fe:	785b      	ldrb	r3, [r3, #1]
 8001600:	2b31      	cmp	r3, #49	; 0x31
 8001602:	d10f      	bne.n	8001624 <HAL_UART_RxCpltCallback+0x1ac>
 8001604:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <HAL_UART_RxCpltCallback+0x260>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d10b      	bne.n	8001624 <HAL_UART_RxCpltCallback+0x1ac>
					if (buzzerForTemp == 1) {
 800160c:	4b33      	ldr	r3, [pc, #204]	; (80016dc <HAL_UART_RxCpltCallback+0x264>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d103      	bne.n	800161c <HAL_UART_RxCpltCallback+0x1a4>
						buzzerForTemp = 0;
 8001614:	4b31      	ldr	r3, [pc, #196]	; (80016dc <HAL_UART_RxCpltCallback+0x264>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
					if (buzzerForTemp == 1) {
 800161a:	e070      	b.n	80016fe <HAL_UART_RxCpltCallback+0x286>
						buzzerForTemp = 1;
 800161c:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <HAL_UART_RxCpltCallback+0x264>)
 800161e:	2201      	movs	r2, #1
 8001620:	601a      	str	r2, [r3, #0]
					if (buzzerForTemp == 1) {
 8001622:	e06c      	b.n	80016fe <HAL_UART_RxCpltCallback+0x286>
				} else if (in[1] == '0' && menuState == 1) {
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <HAL_UART_RxCpltCallback+0x258>)
 8001626:	785b      	ldrb	r3, [r3, #1]
 8001628:	2b30      	cmp	r3, #48	; 0x30
 800162a:	d107      	bne.n	800163c <HAL_UART_RxCpltCallback+0x1c4>
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_UART_RxCpltCallback+0x260>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d103      	bne.n	800163c <HAL_UART_RxCpltCallback+0x1c4>
					menuState = 0;
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <HAL_UART_RxCpltCallback+0x260>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	e060      	b.n	80016fe <HAL_UART_RxCpltCallback+0x286>
				} else if (in[1] == '2' && menuState ==0) {
 800163c:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <HAL_UART_RxCpltCallback+0x258>)
 800163e:	785b      	ldrb	r3, [r3, #1]
 8001640:	2b32      	cmp	r3, #50	; 0x32
 8001642:	d107      	bne.n	8001654 <HAL_UART_RxCpltCallback+0x1dc>
 8001644:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_UART_RxCpltCallback+0x260>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d103      	bne.n	8001654 <HAL_UART_RxCpltCallback+0x1dc>
					menuState = 3;
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <HAL_UART_RxCpltCallback+0x260>)
 800164e:	2203      	movs	r2, #3
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	e054      	b.n	80016fe <HAL_UART_RxCpltCallback+0x286>
				} else if (in[1] == '1' && menuState == 3) {
 8001654:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <HAL_UART_RxCpltCallback+0x258>)
 8001656:	785b      	ldrb	r3, [r3, #1]
 8001658:	2b31      	cmp	r3, #49	; 0x31
 800165a:	d10f      	bne.n	800167c <HAL_UART_RxCpltCallback+0x204>
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_UART_RxCpltCallback+0x260>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d10b      	bne.n	800167c <HAL_UART_RxCpltCallback+0x204>
					if (buzzerForPir == 1) {
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <HAL_UART_RxCpltCallback+0x268>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d103      	bne.n	8001674 <HAL_UART_RxCpltCallback+0x1fc>
						buzzerForPir = 0;
 800166c:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <HAL_UART_RxCpltCallback+0x268>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
					if (buzzerForPir == 1) {
 8001672:	e044      	b.n	80016fe <HAL_UART_RxCpltCallback+0x286>
						buzzerForPir = 1;
 8001674:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <HAL_UART_RxCpltCallback+0x268>)
 8001676:	2201      	movs	r2, #1
 8001678:	601a      	str	r2, [r3, #0]
					if (buzzerForPir == 1) {
 800167a:	e040      	b.n	80016fe <HAL_UART_RxCpltCallback+0x286>
				} else if (in[1] == '2' && menuState == 3) {
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_UART_RxCpltCallback+0x258>)
 800167e:	785b      	ldrb	r3, [r3, #1]
 8001680:	2b32      	cmp	r3, #50	; 0x32
 8001682:	d131      	bne.n	80016e8 <HAL_UART_RxCpltCallback+0x270>
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <HAL_UART_RxCpltCallback+0x260>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d12d      	bne.n	80016e8 <HAL_UART_RxCpltCallback+0x270>
					if (pirIsOn == 1) {
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_UART_RxCpltCallback+0x26c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d103      	bne.n	800169c <HAL_UART_RxCpltCallback+0x224>
						pirIsOn = 0;
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <HAL_UART_RxCpltCallback+0x26c>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
					if (pirIsOn == 1) {
 800169a:	e030      	b.n	80016fe <HAL_UART_RxCpltCallback+0x286>
						pirIsOn = 1;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_UART_RxCpltCallback+0x26c>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]
					if (pirIsOn == 1) {
 80016a2:	e02c      	b.n	80016fe <HAL_UART_RxCpltCallback+0x286>
 80016a4:	40004400 	.word	0x40004400
 80016a8:	2000078c 	.word	0x2000078c
 80016ac:	48001000 	.word	0x48001000
 80016b0:	2000079c 	.word	0x2000079c
 80016b4:	0800e1c4 	.word	0x0800e1c4
 80016b8:	20000304 	.word	0x20000304
 80016bc:	0800e1dc 	.word	0x0800e1dc
 80016c0:	0800e1fc 	.word	0x0800e1fc
 80016c4:	20000790 	.word	0x20000790
 80016c8:	0800e214 	.word	0x0800e214
 80016cc:	0800e230 	.word	0x0800e230
 80016d0:	20000798 	.word	0x20000798
 80016d4:	0800e264 	.word	0x0800e264
 80016d8:	2000000c 	.word	0x2000000c
 80016dc:	200006a0 	.word	0x200006a0
 80016e0:	200006b8 	.word	0x200006b8
 80016e4:	200006b4 	.word	0x200006b4
				} else if (in[1] == '0' && menuState == 3) {
 80016e8:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <HAL_UART_RxCpltCallback+0x340>)
 80016ea:	785b      	ldrb	r3, [r3, #1]
 80016ec:	2b30      	cmp	r3, #48	; 0x30
 80016ee:	d106      	bne.n	80016fe <HAL_UART_RxCpltCallback+0x286>
 80016f0:	4b32      	ldr	r3, [pc, #200]	; (80017bc <HAL_UART_RxCpltCallback+0x344>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d102      	bne.n	80016fe <HAL_UART_RxCpltCallback+0x286>
					menuState = 0;
 80016f8:	4b30      	ldr	r3, [pc, #192]	; (80017bc <HAL_UART_RxCpltCallback+0x344>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
				if (menuState == 1) {
 80016fe:	4b2f      	ldr	r3, [pc, #188]	; (80017bc <HAL_UART_RxCpltCallback+0x344>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d11c      	bne.n	8001740 <HAL_UART_RxCpltCallback+0x2c8>
					if (buzzerForTemp == 0) {
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <HAL_UART_RxCpltCallback+0x348>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_UART_RxCpltCallback+0x2a4>
						HAL_UART_Transmit(&huart2, "1-set buzzer off\n", 17, 100);
 800170e:	2364      	movs	r3, #100	; 0x64
 8001710:	2211      	movs	r2, #17
 8001712:	492c      	ldr	r1, [pc, #176]	; (80017c4 <HAL_UART_RxCpltCallback+0x34c>)
 8001714:	482c      	ldr	r0, [pc, #176]	; (80017c8 <HAL_UART_RxCpltCallback+0x350>)
 8001716:	f00a fdf7 	bl	800c308 <HAL_UART_Transmit>
 800171a:	e005      	b.n	8001728 <HAL_UART_RxCpltCallback+0x2b0>
						HAL_UART_Transmit(&huart2, "1-set buzzer on \n", 17, 100);
 800171c:	2364      	movs	r3, #100	; 0x64
 800171e:	2211      	movs	r2, #17
 8001720:	492a      	ldr	r1, [pc, #168]	; (80017cc <HAL_UART_RxCpltCallback+0x354>)
 8001722:	4829      	ldr	r0, [pc, #164]	; (80017c8 <HAL_UART_RxCpltCallback+0x350>)
 8001724:	f00a fdf0 	bl	800c308 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, "2-change threshold\n", 19, 100);
 8001728:	2364      	movs	r3, #100	; 0x64
 800172a:	2213      	movs	r2, #19
 800172c:	4928      	ldr	r1, [pc, #160]	; (80017d0 <HAL_UART_RxCpltCallback+0x358>)
 800172e:	4826      	ldr	r0, [pc, #152]	; (80017c8 <HAL_UART_RxCpltCallback+0x350>)
 8001730:	f00a fdea 	bl	800c308 <HAL_UART_Transmit>
					HAL_UART_Receive_IT(&huart2, in, 2);
 8001734:	2202      	movs	r2, #2
 8001736:	4920      	ldr	r1, [pc, #128]	; (80017b8 <HAL_UART_RxCpltCallback+0x340>)
 8001738:	4823      	ldr	r0, [pc, #140]	; (80017c8 <HAL_UART_RxCpltCallback+0x350>)
 800173a:	f00a fe6f 	bl	800c41c <HAL_UART_Receive_IT>
}
 800173e:	e036      	b.n	80017ae <HAL_UART_RxCpltCallback+0x336>
				} else if (menuState == 0) {
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <HAL_UART_RxCpltCallback+0x344>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d106      	bne.n	8001756 <HAL_UART_RxCpltCallback+0x2de>
					HAL_UART_Transmit(&huart2, "1-temp  2-sec  3-LED  4-scenario  5-sleep  6-exit\n", 50, 100);
 8001748:	2364      	movs	r3, #100	; 0x64
 800174a:	2232      	movs	r2, #50	; 0x32
 800174c:	4921      	ldr	r1, [pc, #132]	; (80017d4 <HAL_UART_RxCpltCallback+0x35c>)
 800174e:	481e      	ldr	r0, [pc, #120]	; (80017c8 <HAL_UART_RxCpltCallback+0x350>)
 8001750:	f00a fdda 	bl	800c308 <HAL_UART_Transmit>
}
 8001754:	e02b      	b.n	80017ae <HAL_UART_RxCpltCallback+0x336>
				} else if (menuState == 3) {
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_UART_RxCpltCallback+0x344>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d127      	bne.n	80017ae <HAL_UART_RxCpltCallback+0x336>
					if (buzzerForPir == 0) {
 800175e:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <HAL_UART_RxCpltCallback+0x360>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d106      	bne.n	8001774 <HAL_UART_RxCpltCallback+0x2fc>
						HAL_UART_Transmit(&huart2, "1-set buzzer off\n", 17, 100);
 8001766:	2364      	movs	r3, #100	; 0x64
 8001768:	2211      	movs	r2, #17
 800176a:	4916      	ldr	r1, [pc, #88]	; (80017c4 <HAL_UART_RxCpltCallback+0x34c>)
 800176c:	4816      	ldr	r0, [pc, #88]	; (80017c8 <HAL_UART_RxCpltCallback+0x350>)
 800176e:	f00a fdcb 	bl	800c308 <HAL_UART_Transmit>
 8001772:	e005      	b.n	8001780 <HAL_UART_RxCpltCallback+0x308>
						HAL_UART_Transmit(&huart2, "1-set buzzer on \n", 17, 100);
 8001774:	2364      	movs	r3, #100	; 0x64
 8001776:	2211      	movs	r2, #17
 8001778:	4914      	ldr	r1, [pc, #80]	; (80017cc <HAL_UART_RxCpltCallback+0x354>)
 800177a:	4813      	ldr	r0, [pc, #76]	; (80017c8 <HAL_UART_RxCpltCallback+0x350>)
 800177c:	f00a fdc4 	bl	800c308 <HAL_UART_Transmit>
					if (pirIsOn == 0) {
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <HAL_UART_RxCpltCallback+0x364>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d106      	bne.n	8001796 <HAL_UART_RxCpltCallback+0x31e>
						HAL_UART_Transmit(&huart2, "2-set PIR off\n", 14, 100);
 8001788:	2364      	movs	r3, #100	; 0x64
 800178a:	220e      	movs	r2, #14
 800178c:	4914      	ldr	r1, [pc, #80]	; (80017e0 <HAL_UART_RxCpltCallback+0x368>)
 800178e:	480e      	ldr	r0, [pc, #56]	; (80017c8 <HAL_UART_RxCpltCallback+0x350>)
 8001790:	f00a fdba 	bl	800c308 <HAL_UART_Transmit>
 8001794:	e005      	b.n	80017a2 <HAL_UART_RxCpltCallback+0x32a>
						HAL_UART_Transmit(&huart2, "2-set PIR on \n", 14, 100);
 8001796:	2364      	movs	r3, #100	; 0x64
 8001798:	220e      	movs	r2, #14
 800179a:	4912      	ldr	r1, [pc, #72]	; (80017e4 <HAL_UART_RxCpltCallback+0x36c>)
 800179c:	480a      	ldr	r0, [pc, #40]	; (80017c8 <HAL_UART_RxCpltCallback+0x350>)
 800179e:	f00a fdb3 	bl	800c308 <HAL_UART_Transmit>
					HAL_UART_Receive_IT(&huart2, in, 2);
 80017a2:	2202      	movs	r2, #2
 80017a4:	4904      	ldr	r1, [pc, #16]	; (80017b8 <HAL_UART_RxCpltCallback+0x340>)
 80017a6:	4808      	ldr	r0, [pc, #32]	; (80017c8 <HAL_UART_RxCpltCallback+0x350>)
 80017a8:	f00a fe38 	bl	800c41c <HAL_UART_Receive_IT>
}
 80017ac:	e7ff      	b.n	80017ae <HAL_UART_RxCpltCallback+0x336>
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000798 	.word	0x20000798
 80017bc:	2000000c 	.word	0x2000000c
 80017c0:	200006a0 	.word	0x200006a0
 80017c4:	0800e284 	.word	0x0800e284
 80017c8:	20000304 	.word	0x20000304
 80017cc:	0800e298 	.word	0x0800e298
 80017d0:	0800e2ac 	.word	0x0800e2ac
 80017d4:	0800e230 	.word	0x0800e230
 80017d8:	200006b8 	.word	0x200006b8
 80017dc:	200006b4 	.word	0x200006b4
 80017e0:	0800e2c0 	.word	0x0800e2c0
 80017e4:	0800e2d0 	.word	0x0800e2d0

080017e8 <concatenate>:


void concatenate(char *str1, char *str2) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
    int i = strlen(str1), j = 0;
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7fe fcec 	bl	80001d0 <strlen>
 80017f8:	4603      	mov	r3, r0
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]

    for (j=0; j<strlen(str2); j++) {
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	e00d      	b.n	8001822 <concatenate+0x3a>
        str1[i] = str2[j];
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	441a      	add	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	440b      	add	r3, r1
 8001812:	7812      	ldrb	r2, [r2, #0]
 8001814:	701a      	strb	r2, [r3, #0]
        i++;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	3301      	adds	r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
    for (j=0; j<strlen(str2); j++) {
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	3301      	adds	r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	6838      	ldr	r0, [r7, #0]
 8001824:	f7fe fcd4 	bl	80001d0 <strlen>
 8001828:	4602      	mov	r2, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	429a      	cmp	r2, r3
 800182e:	d8ea      	bhi.n	8001806 <concatenate+0x1e>
    }

	if (i == 0) {
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <concatenate+0x54>
	i++;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3301      	adds	r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
	}
    str1[i] = '\0';  // declaring the end of the string
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b0cf      	sub	sp, #316	; 0x13c
 8001854:	af00      	add	r7, sp, #0
 8001856:	4602      	mov	r2, r0
 8001858:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800185c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8001860:	801a      	strh	r2, [r3, #0]
  if (last_gpio_exti + 200 > HAL_GetTick()) // Simple button debouncing
 8001862:	4bbb      	ldr	r3, [pc, #748]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x300>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 800186a:	f005 fd9f 	bl	80073ac <HAL_GetTick>
 800186e:	4603      	mov	r3, r0
 8001870:	429c      	cmp	r4, r3
 8001872:	f203 831e 	bhi.w	8004eb2 <HAL_GPIO_EXTI_Callback+0x3662>
  {
    return;
  }
  last_gpio_exti = HAL_GetTick();
 8001876:	f005 fd99 	bl	80073ac <HAL_GetTick>
 800187a:	4603      	mov	r3, r0
 800187c:	4ab4      	ldr	r2, [pc, #720]	; (8001b50 <HAL_GPIO_EXTI_Callback+0x300>)
 800187e:	6013      	str	r3, [r2, #0]

  int8_t row_number = -1;
 8001880:	23ff      	movs	r3, #255	; 0xff
 8001882:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  int8_t column_number = -1;
 8001886:	23ff      	movs	r3, #255	; 0xff
 8001888:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136

  if (GPIO_Pin == GPIO_PIN_0) {
 800188c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001890:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d11c      	bne.n	80018d4 <HAL_GPIO_EXTI_Callback+0x84>
	  if (menuState != -2 && menuState != -3) {
 800189a:	4bae      	ldr	r3, [pc, #696]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x304>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f113 0f02 	cmn.w	r3, #2
 80018a2:	d007      	beq.n	80018b4 <HAL_GPIO_EXTI_Callback+0x64>
 80018a4:	4bab      	ldr	r3, [pc, #684]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x304>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f113 0f03 	cmn.w	r3, #3
 80018ac:	d002      	beq.n	80018b4 <HAL_GPIO_EXTI_Callback+0x64>
		  count=0;
 80018ae:	4baa      	ldr	r3, [pc, #680]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x308>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
	  }
	  if (menuState == -1 && isPass == 1) {
 80018b4:	4ba7      	ldr	r3, [pc, #668]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x304>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	f043 82fb 	bne.w	8004eb6 <HAL_GPIO_EXTI_Callback+0x3666>
 80018c0:	4ba6      	ldr	r3, [pc, #664]	; (8001b5c <HAL_GPIO_EXTI_Callback+0x30c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	f043 82f6 	bne.w	8004eb6 <HAL_GPIO_EXTI_Callback+0x3666>
		  menuState = 7;
 80018ca:	4ba2      	ldr	r3, [pc, #648]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x304>)
 80018cc:	2207      	movs	r2, #7
 80018ce:	601a      	str	r2, [r3, #0]
	  }
    return;
 80018d0:	f003 baf1 	b.w	8004eb6 <HAL_GPIO_EXTI_Callback+0x3666>
  }

  if (GPIO_Pin == GPIO_PIN_13) {
 80018d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80018d8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018e2:	d132      	bne.n	800194a <HAL_GPIO_EXTI_Callback+0xfa>
//	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
	  if (menuState != -1 && menuState != -2 && menuState != 7 && menuState != 6 && menuState != -3 && count>2){
 80018e4:	4b9b      	ldr	r3, [pc, #620]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x304>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ec:	f003 82e5 	beq.w	8004eba <HAL_GPIO_EXTI_Callback+0x366a>
 80018f0:	4b98      	ldr	r3, [pc, #608]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x304>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f113 0f02 	cmn.w	r3, #2
 80018f8:	f003 82df 	beq.w	8004eba <HAL_GPIO_EXTI_Callback+0x366a>
 80018fc:	4b95      	ldr	r3, [pc, #596]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x304>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b07      	cmp	r3, #7
 8001902:	f003 82da 	beq.w	8004eba <HAL_GPIO_EXTI_Callback+0x366a>
 8001906:	4b93      	ldr	r3, [pc, #588]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x304>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b06      	cmp	r3, #6
 800190c:	f003 82d5 	beq.w	8004eba <HAL_GPIO_EXTI_Callback+0x366a>
 8001910:	4b90      	ldr	r3, [pc, #576]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x304>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f113 0f03 	cmn.w	r3, #3
 8001918:	f003 82cf 	beq.w	8004eba <HAL_GPIO_EXTI_Callback+0x366a>
 800191c:	4b8e      	ldr	r3, [pc, #568]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x308>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b02      	cmp	r3, #2
 8001922:	f343 82ca 	ble.w	8004eba <HAL_GPIO_EXTI_Callback+0x366a>
		  if (pirIsOn == 0) {
 8001926:	4b8e      	ldr	r3, [pc, #568]	; (8001b60 <HAL_GPIO_EXTI_Callback+0x310>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	f043 82c5 	bne.w	8004eba <HAL_GPIO_EXTI_Callback+0x366a>
			  count = 0;
 8001930:	4b89      	ldr	r3, [pc, #548]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x308>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
			  currentState = menuState;
 8001936:	4b87      	ldr	r3, [pc, #540]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x304>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a8a      	ldr	r2, [pc, #552]	; (8001b64 <HAL_GPIO_EXTI_Callback+0x314>)
 800193c:	6013      	str	r3, [r2, #0]
			  menuState = -3;
 800193e:	4b85      	ldr	r3, [pc, #532]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x304>)
 8001940:	f06f 0202 	mvn.w	r2, #2
 8001944:	601a      	str	r2, [r3, #0]
		  }
	  }
      return;
 8001946:	f003 bab8 	b.w	8004eba <HAL_GPIO_EXTI_Callback+0x366a>
    }

  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 800194a:	2300      	movs	r3, #0
 800194c:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
 8001950:	e014      	b.n	800197c <HAL_GPIO_EXTI_Callback+0x12c>
  {
    if (GPIO_Pin == Row_pins[row])
 8001952:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 8001956:	4a84      	ldr	r2, [pc, #528]	; (8001b68 <HAL_GPIO_EXTI_Callback+0x318>)
 8001958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800195c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001960:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8001964:	8812      	ldrh	r2, [r2, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d103      	bne.n	8001972 <HAL_GPIO_EXTI_Callback+0x122>
    {
      row_number = row;
 800196a:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 800196e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  for (uint8_t row = 0; row < 4; row++) // Loop through Rows
 8001972:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 8001976:	3301      	adds	r3, #1
 8001978:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
 800197c:	f897 3135 	ldrb.w	r3, [r7, #309]	; 0x135
 8001980:	2b03      	cmp	r3, #3
 8001982:	d9e6      	bls.n	8001952 <HAL_GPIO_EXTI_Callback+0x102>
    }
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 0);
 8001984:	4b79      	ldr	r3, [pc, #484]	; (8001b6c <HAL_GPIO_EXTI_Callback+0x31c>)
 8001986:	2101      	movs	r1, #1
 8001988:	2200      	movs	r2, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f007 fb50 	bl	8009030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 0);
 8001990:	4b76      	ldr	r3, [pc, #472]	; (8001b6c <HAL_GPIO_EXTI_Callback+0x31c>)
 8001992:	2120      	movs	r1, #32
 8001994:	2200      	movs	r2, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f007 fb4a 	bl	8009030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 0);
 800199c:	4b73      	ldr	r3, [pc, #460]	; (8001b6c <HAL_GPIO_EXTI_Callback+0x31c>)
 800199e:	2140      	movs	r1, #64	; 0x40
 80019a0:	2200      	movs	r2, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f007 fb44 	bl	8009030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 0);
 80019a8:	4b70      	ldr	r3, [pc, #448]	; (8001b6c <HAL_GPIO_EXTI_Callback+0x31c>)
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	2200      	movs	r2, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f007 fb3e 	bl	8009030 <HAL_GPIO_WritePin>

  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
 80019ba:	e035      	b.n	8001a28 <HAL_GPIO_EXTI_Callback+0x1d8>
  {
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 1);
 80019bc:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 80019c0:	4a6b      	ldr	r2, [pc, #428]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x320>)
 80019c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019c6:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 80019ca:	4a6a      	ldr	r2, [pc, #424]	; (8001b74 <HAL_GPIO_EXTI_Callback+0x324>)
 80019cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019d0:	2201      	movs	r2, #1
 80019d2:	4619      	mov	r1, r3
 80019d4:	f007 fb2c 	bl	8009030 <HAL_GPIO_WritePin>
    if (HAL_GPIO_ReadPin(Row_ports[row_number], Row_pins[row_number]))
 80019d8:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80019dc:	4a66      	ldr	r2, [pc, #408]	; (8001b78 <HAL_GPIO_EXTI_Callback+0x328>)
 80019de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019e2:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80019e6:	4960      	ldr	r1, [pc, #384]	; (8001b68 <HAL_GPIO_EXTI_Callback+0x318>)
 80019e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80019ec:	4619      	mov	r1, r3
 80019ee:	4610      	mov	r0, r2
 80019f0:	f007 fb06 	bl	8009000 <HAL_GPIO_ReadPin>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_EXTI_Callback+0x1b2>
    {
      column_number = col;
 80019fa:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 80019fe:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
    }
    HAL_GPIO_WritePin(Column_ports[col], Column_pins[col], 0);
 8001a02:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 8001a06:	4a5a      	ldr	r2, [pc, #360]	; (8001b70 <HAL_GPIO_EXTI_Callback+0x320>)
 8001a08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a0c:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 8001a10:	4a58      	ldr	r2, [pc, #352]	; (8001b74 <HAL_GPIO_EXTI_Callback+0x324>)
 8001a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a16:	2200      	movs	r2, #0
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f007 fb09 	bl	8009030 <HAL_GPIO_WritePin>
  for (uint8_t col = 0; col < 4; col++) // Loop through Columns
 8001a1e:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 8001a22:	3301      	adds	r3, #1
 8001a24:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
 8001a28:	f897 3134 	ldrb.w	r3, [r7, #308]	; 0x134
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d9c5      	bls.n	80019bc <HAL_GPIO_EXTI_Callback+0x16c>
  }

  HAL_GPIO_WritePin(Column_ports[0], Column_pins[0], 1);
 8001a30:	4b4e      	ldr	r3, [pc, #312]	; (8001b6c <HAL_GPIO_EXTI_Callback+0x31c>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	2201      	movs	r2, #1
 8001a36:	4618      	mov	r0, r3
 8001a38:	f007 fafa 	bl	8009030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[1], Column_pins[1], 1);
 8001a3c:	4b4b      	ldr	r3, [pc, #300]	; (8001b6c <HAL_GPIO_EXTI_Callback+0x31c>)
 8001a3e:	2120      	movs	r1, #32
 8001a40:	2201      	movs	r2, #1
 8001a42:	4618      	mov	r0, r3
 8001a44:	f007 faf4 	bl	8009030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[2], Column_pins[2], 1);
 8001a48:	4b48      	ldr	r3, [pc, #288]	; (8001b6c <HAL_GPIO_EXTI_Callback+0x31c>)
 8001a4a:	2140      	movs	r1, #64	; 0x40
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f007 faee 	bl	8009030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Column_ports[3], Column_pins[3], 1);
 8001a54:	4b45      	ldr	r3, [pc, #276]	; (8001b6c <HAL_GPIO_EXTI_Callback+0x31c>)
 8001a56:	2180      	movs	r1, #128	; 0x80
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f007 fae8 	bl	8009030 <HAL_GPIO_WritePin>

  if (row_number == -1 || column_number == -1)
 8001a60:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a68:	f003 8229 	beq.w	8004ebe <HAL_GPIO_EXTI_Callback+0x366e>
 8001a6c:	f997 3136 	ldrsb.w	r3, [r7, #310]	; 0x136
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	f003 8223 	beq.w	8004ebe <HAL_GPIO_EXTI_Callback+0x366e>
  // +----+----+----+----+
  // | 9  | 10 | 11 | 12 |  R2
  // +----+----+----+----+
  // | 13 | 14 | 15 | 16 |  R3
  // +----+----+----+----+
  const uint8_t button_number = row_number * 4 + column_number + 1;
 8001a78:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8001a84:	4413      	add	r3, r2
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a8c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8001a90:	3201      	adds	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
  switch (button_number)
 8001a94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001a98:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	2b0f      	cmp	r3, #15
 8001aa2:	f203 824c 	bhi.w	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
 8001aa6:	a201      	add	r2, pc, #4	; (adr r2, 8001aac <HAL_GPIO_EXTI_Callback+0x25c>)
 8001aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aac:	08001aed 	.word	0x08001aed
 8001ab0:	080021ad 	.word	0x080021ad
 8001ab4:	08002625 	.word	0x08002625
 8001ab8:	0800289f 	.word	0x0800289f
 8001abc:	080028c7 	.word	0x080028c7
 8001ac0:	08002f5b 	.word	0x08002f5b
 8001ac4:	0800350f 	.word	0x0800350f
 8001ac8:	080035a1 	.word	0x080035a1
 8001acc:	080035c9 	.word	0x080035c9
 8001ad0:	08003acb 	.word	0x08003acb
 8001ad4:	08003eed 	.word	0x08003eed
 8001ad8:	08003f0f 	.word	0x08003f0f
 8001adc:	08003f71 	.word	0x08003f71
 8001ae0:	080044a7 	.word	0x080044a7
 8001ae4:	08004b73 	.word	0x08004b73
 8001ae8:	08004c5d 	.word	0x08004c5d
  {
  case 1:
    /* code */
	  //1
	  if (menuState != -2 && menuState != -3) {
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x304>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f113 0f02 	cmn.w	r3, #2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_EXTI_Callback+0x2b6>
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x304>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f113 0f03 	cmn.w	r3, #3
 8001afe:	d002      	beq.n	8001b06 <HAL_GPIO_EXTI_Callback+0x2b6>
		  count=0;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_GPIO_EXTI_Callback+0x308>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
	  }
	  if (menuState == 0) {
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x304>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d103      	bne.n	8001b16 <HAL_GPIO_EXTI_Callback+0x2c6>
		  menuState = 1;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x304>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e343      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
	  } else if (menuState == 1) {
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_GPIO_EXTI_Callback+0x304>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d136      	bne.n	8001b8c <HAL_GPIO_EXTI_Callback+0x33c>
		  if (buzzerForTemp == 0) {
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <HAL_GPIO_EXTI_Callback+0x32c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_GPIO_EXTI_Callback+0x2ea>
			  buzzerForTemp = 1;
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_GPIO_EXTI_Callback+0x32c>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2, "buzzer for temp is off\n", 23, 100);
 8001b2c:	2364      	movs	r3, #100	; 0x64
 8001b2e:	2217      	movs	r2, #23
 8001b30:	4913      	ldr	r1, [pc, #76]	; (8001b80 <HAL_GPIO_EXTI_Callback+0x330>)
 8001b32:	4814      	ldr	r0, [pc, #80]	; (8001b84 <HAL_GPIO_EXTI_Callback+0x334>)
 8001b34:	f00a fbe8 	bl	800c308 <HAL_UART_Transmit>
 8001b38:	e331      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  } else {
			  HAL_UART_Transmit(&huart2, "buzzer for temp is on\n", 22, 100);
 8001b3a:	2364      	movs	r3, #100	; 0x64
 8001b3c:	2216      	movs	r2, #22
 8001b3e:	4912      	ldr	r1, [pc, #72]	; (8001b88 <HAL_GPIO_EXTI_Callback+0x338>)
 8001b40:	4810      	ldr	r0, [pc, #64]	; (8001b84 <HAL_GPIO_EXTI_Callback+0x334>)
 8001b42:	f00a fbe1 	bl	800c308 <HAL_UART_Transmit>
			  buzzerForTemp = 0;
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HAL_GPIO_EXTI_Callback+0x32c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	e327      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
 8001b4e:	bf00      	nop
 8001b50:	20000690 	.word	0x20000690
 8001b54:	2000000c 	.word	0x2000000c
 8001b58:	20000728 	.word	0x20000728
 8001b5c:	20000790 	.word	0x20000790
 8001b60:	200006b4 	.word	0x200006b4
 8001b64:	2000073c 	.word	0x2000073c
 8001b68:	0800ec00 	.word	0x0800ec00
 8001b6c:	48000c00 	.word	0x48000c00
 8001b70:	0800ec08 	.word	0x0800ec08
 8001b74:	0800ec18 	.word	0x0800ec18
 8001b78:	0800ebf0 	.word	0x0800ebf0
 8001b7c:	200006a0 	.word	0x200006a0
 8001b80:	0800e2e0 	.word	0x0800e2e0
 8001b84:	20000304 	.word	0x20000304
 8001b88:	0800e2f8 	.word	0x0800e2f8
		  }
	  } else if (menuState == 2 && input == 0) {
 8001b8c:	4b9d      	ldr	r3, [pc, #628]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d10a      	bne.n	8001baa <HAL_GPIO_EXTI_Callback+0x35a>
 8001b94:	4b9c      	ldr	r3, [pc, #624]	; (8001e08 <HAL_GPIO_EXTI_Callback+0x5b8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d106      	bne.n	8001baa <HAL_GPIO_EXTI_Callback+0x35a>
		  tens = 1;
 8001b9c:	4b9b      	ldr	r3, [pc, #620]	; (8001e0c <HAL_GPIO_EXTI_Callback+0x5bc>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
		  input = 1;
 8001ba2:	4b99      	ldr	r3, [pc, #612]	; (8001e08 <HAL_GPIO_EXTI_Callback+0x5b8>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e2f9      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
	  } else if (menuState == 2 && input == 1) {
 8001baa:	4b96      	ldr	r3, [pc, #600]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d10a      	bne.n	8001bc8 <HAL_GPIO_EXTI_Callback+0x378>
 8001bb2:	4b95      	ldr	r3, [pc, #596]	; (8001e08 <HAL_GPIO_EXTI_Callback+0x5b8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d106      	bne.n	8001bc8 <HAL_GPIO_EXTI_Callback+0x378>
		  ones = 1;
 8001bba:	4b95      	ldr	r3, [pc, #596]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x5c0>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
		  input = 0;
 8001bc0:	4b91      	ldr	r3, [pc, #580]	; (8001e08 <HAL_GPIO_EXTI_Callback+0x5b8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	e2ea      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
	  } else if (menuState == 3) {
 8001bc8:	4b8e      	ldr	r3, [pc, #568]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d120      	bne.n	8001c12 <HAL_GPIO_EXTI_Callback+0x3c2>
		  if (pirIsOn == 0) {
 8001bd0:	4b90      	ldr	r3, [pc, #576]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x5c4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d112      	bne.n	8001bfe <HAL_GPIO_EXTI_Callback+0x3ae>
			  HAL_UART_Transmit(&huart2, "PIR is off\n", 11, 100);
 8001bd8:	2364      	movs	r3, #100	; 0x64
 8001bda:	220b      	movs	r2, #11
 8001bdc:	498e      	ldr	r1, [pc, #568]	; (8001e18 <HAL_GPIO_EXTI_Callback+0x5c8>)
 8001bde:	488f      	ldr	r0, [pc, #572]	; (8001e1c <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001be0:	f00a fb92 	bl	800c308 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, "buzzer for temp is off\n", 23, 100);
 8001be4:	2364      	movs	r3, #100	; 0x64
 8001be6:	2217      	movs	r2, #23
 8001be8:	498d      	ldr	r1, [pc, #564]	; (8001e20 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001bea:	488c      	ldr	r0, [pc, #560]	; (8001e1c <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001bec:	f00a fb8c 	bl	800c308 <HAL_UART_Transmit>
			  pirIsOn = 1;
 8001bf0:	4b88      	ldr	r3, [pc, #544]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x5c4>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
			  buzzerForPir = 1;
 8001bf6:	4b8b      	ldr	r3, [pc, #556]	; (8001e24 <HAL_GPIO_EXTI_Callback+0x5d4>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	e2cf      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  } else {
			  HAL_UART_Transmit(&huart2, "PIR is on\n", 10, 100);
 8001bfe:	2364      	movs	r3, #100	; 0x64
 8001c00:	220a      	movs	r2, #10
 8001c02:	4989      	ldr	r1, [pc, #548]	; (8001e28 <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001c04:	4885      	ldr	r0, [pc, #532]	; (8001e1c <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001c06:	f00a fb7f 	bl	800c308 <HAL_UART_Transmit>
			  pirIsOn = 0;
 8001c0a:	4b82      	ldr	r3, [pc, #520]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x5c4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	e2c5      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  }
	  } else if (menuState == 4) {
 8001c12:	4b7c      	ldr	r3, [pc, #496]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d117      	bne.n	8001c4a <HAL_GPIO_EXTI_Callback+0x3fa>
		  if (LED1 == 0) {
 8001c1a:	4b84      	ldr	r3, [pc, #528]	; (8001e2c <HAL_GPIO_EXTI_Callback+0x5dc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_GPIO_EXTI_Callback+0x3e6>
			  HAL_UART_Transmit(&huart2, "LED1 is on\n", 11, 100);
 8001c22:	2364      	movs	r3, #100	; 0x64
 8001c24:	220b      	movs	r2, #11
 8001c26:	4982      	ldr	r1, [pc, #520]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x5e0>)
 8001c28:	487c      	ldr	r0, [pc, #496]	; (8001e1c <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001c2a:	f00a fb6d 	bl	800c308 <HAL_UART_Transmit>
			  LED1 = 1;
 8001c2e:	4b7f      	ldr	r3, [pc, #508]	; (8001e2c <HAL_GPIO_EXTI_Callback+0x5dc>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	e2b3      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  } else {
			  HAL_UART_Transmit(&huart2, "LED1 is off\n", 12, 100);
 8001c36:	2364      	movs	r3, #100	; 0x64
 8001c38:	220c      	movs	r2, #12
 8001c3a:	497e      	ldr	r1, [pc, #504]	; (8001e34 <HAL_GPIO_EXTI_Callback+0x5e4>)
 8001c3c:	4877      	ldr	r0, [pc, #476]	; (8001e1c <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001c3e:	f00a fb63 	bl	800c308 <HAL_UART_Transmit>
			  LED1 = 0;
 8001c42:	4b7a      	ldr	r3, [pc, #488]	; (8001e2c <HAL_GPIO_EXTI_Callback+0x5dc>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e2a9      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  }
	  } else if (menuState == 5) {
 8001c4a:	4b6e      	ldr	r3, [pc, #440]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	d106      	bne.n	8001c60 <HAL_GPIO_EXTI_Callback+0x410>
		  menuState = 14;
 8001c52:	4b6c      	ldr	r3, [pc, #432]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8001c54:	220e      	movs	r2, #14
 8001c56:	601a      	str	r2, [r3, #0]
		  isNewScenario = 1;
 8001c58:	4b77      	ldr	r3, [pc, #476]	; (8001e38 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e29e      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
	  } else if (menuState == 8) {
 8001c60:	4b68      	ldr	r3, [pc, #416]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d117      	bne.n	8001c98 <HAL_GPIO_EXTI_Callback+0x448>
		  if (sleepIsOn == 0) {
 8001c68:	4b74      	ldr	r3, [pc, #464]	; (8001e3c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d109      	bne.n	8001c84 <HAL_GPIO_EXTI_Callback+0x434>
			  HAL_UART_Transmit(&huart2, "sleep is off\n", 13, 100);
 8001c70:	2364      	movs	r3, #100	; 0x64
 8001c72:	220d      	movs	r2, #13
 8001c74:	4972      	ldr	r1, [pc, #456]	; (8001e40 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8001c76:	4869      	ldr	r0, [pc, #420]	; (8001e1c <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001c78:	f00a fb46 	bl	800c308 <HAL_UART_Transmit>
			  sleepIsOn = 1;
 8001c7c:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	e28c      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  } else {
			  HAL_UART_Transmit(&huart2, "sleep is on\n", 12, 100);
 8001c84:	2364      	movs	r3, #100	; 0x64
 8001c86:	220c      	movs	r2, #12
 8001c88:	496e      	ldr	r1, [pc, #440]	; (8001e44 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8001c8a:	4864      	ldr	r0, [pc, #400]	; (8001e1c <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001c8c:	f00a fb3c 	bl	800c308 <HAL_UART_Transmit>
			  sleepIsOn = 0;
 8001c90:	4b6a      	ldr	r3, [pc, #424]	; (8001e3c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e282      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  }
	  } else if (menuState == 11) {
 8001c98:	4b5a      	ldr	r3, [pc, #360]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b0b      	cmp	r3, #11
 8001c9e:	d116      	bne.n	8001cce <HAL_GPIO_EXTI_Callback+0x47e>
//		  inputHi = 0;
		  for (int i=0; i<20; i++) {
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001ca6:	e00a      	b.n	8001cbe <HAL_GPIO_EXTI_Callback+0x46e>
			  hiTemp[i] = '\0';
 8001ca8:	4a67      	ldr	r2, [pc, #412]	; (8001e48 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001caa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cae:	4413      	add	r3, r2
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
		  for (int i=0; i<20; i++) {
 8001cb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001cbe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cc2:	2b13      	cmp	r3, #19
 8001cc4:	ddf0      	ble.n	8001ca8 <HAL_GPIO_EXTI_Callback+0x458>
		  	}
		  menuState = 12;
 8001cc6:	4b4f      	ldr	r3, [pc, #316]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8001cc8:	220c      	movs	r2, #12
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e267      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
	  } else if (menuState == 12) {
 8001cce:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x5b4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	f040 810d 	bne.w	8001ef2 <HAL_GPIO_EXTI_Callback+0x6a2>
		  if (keyState == 0) {
 8001cd8:	4b5c      	ldr	r3, [pc, #368]	; (8001e4c <HAL_GPIO_EXTI_Callback+0x5fc>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10a      	bne.n	8001cf6 <HAL_GPIO_EXTI_Callback+0x4a6>
			  inputHi++;
 8001ce0:	4b5b      	ldr	r3, [pc, #364]	; (8001e50 <HAL_GPIO_EXTI_Callback+0x600>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	4a5a      	ldr	r2, [pc, #360]	; (8001e50 <HAL_GPIO_EXTI_Callback+0x600>)
 8001ce8:	6013      	str	r3, [r2, #0]
			  hiPressed = 0;
 8001cea:	4b5a      	ldr	r3, [pc, #360]	; (8001e54 <HAL_GPIO_EXTI_Callback+0x604>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
			  keyState = 1;
 8001cf0:	4b56      	ldr	r3, [pc, #344]	; (8001e4c <HAL_GPIO_EXTI_Callback+0x5fc>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]
		  }

		  if (keyState == 1) {
 8001cf6:	4b55      	ldr	r3, [pc, #340]	; (8001e4c <HAL_GPIO_EXTI_Callback+0x5fc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	f040 824f 	bne.w	800219e <HAL_GPIO_EXTI_Callback+0x94e>
			  for (int i=0; i<strlen(substring); i++) {
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001d06:	e00a      	b.n	8001d1e <HAL_GPIO_EXTI_Callback+0x4ce>
			  	  substring[i] = '\0';
 8001d08:	4a53      	ldr	r2, [pc, #332]	; (8001e58 <HAL_GPIO_EXTI_Callback+0x608>)
 8001d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d0e:	4413      	add	r3, r2
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
			  for (int i=0; i<strlen(substring); i++) {
 8001d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001d1e:	484e      	ldr	r0, [pc, #312]	; (8001e58 <HAL_GPIO_EXTI_Callback+0x608>)
 8001d20:	f7fe fa56 	bl	80001d0 <strlen>
 8001d24:	4602      	mov	r2, r0
 8001d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d8ec      	bhi.n	8001d08 <HAL_GPIO_EXTI_Callback+0x4b8>
		  	  }

		  	  if (hiPressed == 0) {
 8001d2e:	4b49      	ldr	r3, [pc, #292]	; (8001e54 <HAL_GPIO_EXTI_Callback+0x604>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d135      	bne.n	8001da2 <HAL_GPIO_EXTI_Callback+0x552>
		  		  strncpy(substring,hiTemp,inputHi-1);
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <HAL_GPIO_EXTI_Callback+0x600>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4942      	ldr	r1, [pc, #264]	; (8001e48 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001d40:	4845      	ldr	r0, [pc, #276]	; (8001e58 <HAL_GPIO_EXTI_Callback+0x608>)
 8001d42:	f00b fdd3 	bl	800d8ec <strncpy>
			  	  for (int i=0; i<strlen(hiTemp); i++) {
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d4c:	e00a      	b.n	8001d64 <HAL_GPIO_EXTI_Callback+0x514>
			  	  	  hiTemp[i] = '\0';
 8001d4e:	4a3e      	ldr	r2, [pc, #248]	; (8001e48 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001d50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d54:	4413      	add	r3, r2
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
			  	  for (int i=0; i<strlen(hiTemp); i++) {
 8001d5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d64:	4838      	ldr	r0, [pc, #224]	; (8001e48 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001d66:	f7fe fa33 	bl	80001d0 <strlen>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d8ec      	bhi.n	8001d4e <HAL_GPIO_EXTI_Callback+0x4fe>
			  	  }

			  	  concatenate(hiTemp, substring);
 8001d74:	4938      	ldr	r1, [pc, #224]	; (8001e58 <HAL_GPIO_EXTI_Callback+0x608>)
 8001d76:	4834      	ldr	r0, [pc, #208]	; (8001e48 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001d78:	f7ff fd36 	bl	80017e8 <concatenate>
			  	  if (isBigger == 0) {
 8001d7c:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <HAL_GPIO_EXTI_Callback+0x60c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d104      	bne.n	8001d8e <HAL_GPIO_EXTI_Callback+0x53e>
			  		  concatenate(hiTemp, "a");
 8001d84:	4936      	ldr	r1, [pc, #216]	; (8001e60 <HAL_GPIO_EXTI_Callback+0x610>)
 8001d86:	4830      	ldr	r0, [pc, #192]	; (8001e48 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001d88:	f7ff fd2e 	bl	80017e8 <concatenate>
 8001d8c:	e003      	b.n	8001d96 <HAL_GPIO_EXTI_Callback+0x546>
			  	  } else {
			  		concatenate(hiTemp, "A");
 8001d8e:	4935      	ldr	r1, [pc, #212]	; (8001e64 <HAL_GPIO_EXTI_Callback+0x614>)
 8001d90:	482d      	ldr	r0, [pc, #180]	; (8001e48 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001d92:	f7ff fd29 	bl	80017e8 <concatenate>
			  	  }
			  	  hiPressed++;
 8001d96:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <HAL_GPIO_EXTI_Callback+0x604>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	4a2d      	ldr	r2, [pc, #180]	; (8001e54 <HAL_GPIO_EXTI_Callback+0x604>)
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	e1fd      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  	  } else if (hiPressed == 1) {
 8001da2:	4b2c      	ldr	r3, [pc, #176]	; (8001e54 <HAL_GPIO_EXTI_Callback+0x604>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d16a      	bne.n	8001e80 <HAL_GPIO_EXTI_Callback+0x630>
			  	  strncpy(substring,hiTemp,inputHi-1);
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <HAL_GPIO_EXTI_Callback+0x600>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	461a      	mov	r2, r3
 8001db2:	4925      	ldr	r1, [pc, #148]	; (8001e48 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001db4:	4828      	ldr	r0, [pc, #160]	; (8001e58 <HAL_GPIO_EXTI_Callback+0x608>)
 8001db6:	f00b fd99 	bl	800d8ec <strncpy>
//			  	hiInput = "";
			  	  for (int i=0; i<strlen(hiTemp); i++) {
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001dc0:	e00a      	b.n	8001dd8 <HAL_GPIO_EXTI_Callback+0x588>
				  	  hiTemp[i] = '\0';
 8001dc2:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001dc4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001dc8:	4413      	add	r3, r2
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
			  	  for (int i=0; i<strlen(hiTemp); i++) {
 8001dce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001dd8:	481b      	ldr	r0, [pc, #108]	; (8001e48 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001dda:	f7fe f9f9 	bl	80001d0 <strlen>
 8001dde:	4602      	mov	r2, r0
 8001de0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d8ec      	bhi.n	8001dc2 <HAL_GPIO_EXTI_Callback+0x572>
			  	  }
			  	  concatenate(hiTemp, substring);
 8001de8:	491b      	ldr	r1, [pc, #108]	; (8001e58 <HAL_GPIO_EXTI_Callback+0x608>)
 8001dea:	4817      	ldr	r0, [pc, #92]	; (8001e48 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001dec:	f7ff fcfc 	bl	80017e8 <concatenate>
			  	if (isBigger == 0) {
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_GPIO_EXTI_Callback+0x60c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d139      	bne.n	8001e6c <HAL_GPIO_EXTI_Callback+0x61c>
			  				  		  concatenate(hiTemp, "b");
 8001df8:	491b      	ldr	r1, [pc, #108]	; (8001e68 <HAL_GPIO_EXTI_Callback+0x618>)
 8001dfa:	4813      	ldr	r0, [pc, #76]	; (8001e48 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001dfc:	f7ff fcf4 	bl	80017e8 <concatenate>
 8001e00:	e038      	b.n	8001e74 <HAL_GPIO_EXTI_Callback+0x624>
 8001e02:	bf00      	nop
 8001e04:	2000000c 	.word	0x2000000c
 8001e08:	200006a8 	.word	0x200006a8
 8001e0c:	2000069c 	.word	0x2000069c
 8001e10:	20000698 	.word	0x20000698
 8001e14:	200006b4 	.word	0x200006b4
 8001e18:	0800e310 	.word	0x0800e310
 8001e1c:	20000304 	.word	0x20000304
 8001e20:	0800e2e0 	.word	0x0800e2e0
 8001e24:	200006b8 	.word	0x200006b8
 8001e28:	0800e31c 	.word	0x0800e31c
 8001e2c:	20000714 	.word	0x20000714
 8001e30:	0800e328 	.word	0x0800e328
 8001e34:	0800e334 	.word	0x0800e334
 8001e38:	20000770 	.word	0x20000770
 8001e3c:	2000074c 	.word	0x2000074c
 8001e40:	0800e344 	.word	0x0800e344
 8001e44:	0800e354 	.word	0x0800e354
 8001e48:	20000014 	.word	0x20000014
 8001e4c:	20000768 	.word	0x20000768
 8001e50:	20000760 	.word	0x20000760
 8001e54:	20000764 	.word	0x20000764
 8001e58:	200006ec 	.word	0x200006ec
 8001e5c:	2000076c 	.word	0x2000076c
 8001e60:	0800e364 	.word	0x0800e364
 8001e64:	0800e368 	.word	0x0800e368
 8001e68:	0800e36c 	.word	0x0800e36c
			  				  	  } else {
			  				  		concatenate(hiTemp, "B");
 8001e6c:	49a5      	ldr	r1, [pc, #660]	; (8002104 <HAL_GPIO_EXTI_Callback+0x8b4>)
 8001e6e:	48a6      	ldr	r0, [pc, #664]	; (8002108 <HAL_GPIO_EXTI_Callback+0x8b8>)
 8001e70:	f7ff fcba 	bl	80017e8 <concatenate>
			  				  	  }
			  	  hiPressed++;
 8001e74:	4ba5      	ldr	r3, [pc, #660]	; (800210c <HAL_GPIO_EXTI_Callback+0x8bc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	4aa4      	ldr	r2, [pc, #656]	; (800210c <HAL_GPIO_EXTI_Callback+0x8bc>)
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e18e      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  	  } else if(hiPressed == 2) {
 8001e80:	4ba2      	ldr	r3, [pc, #648]	; (800210c <HAL_GPIO_EXTI_Callback+0x8bc>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	f040 818a 	bne.w	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  		  strncpy(substring, hiTemp, inputHi-1);
 8001e8a:	4ba1      	ldr	r3, [pc, #644]	; (8002110 <HAL_GPIO_EXTI_Callback+0x8c0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	461a      	mov	r2, r3
 8001e92:	499d      	ldr	r1, [pc, #628]	; (8002108 <HAL_GPIO_EXTI_Callback+0x8b8>)
 8001e94:	489f      	ldr	r0, [pc, #636]	; (8002114 <HAL_GPIO_EXTI_Callback+0x8c4>)
 8001e96:	f00b fd29 	bl	800d8ec <strncpy>
		  		  for (int i=0; i<strlen(hiTemp); i++) {
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ea0:	e00a      	b.n	8001eb8 <HAL_GPIO_EXTI_Callback+0x668>
		  			  hiTemp[i] = '\0';
 8001ea2:	4a99      	ldr	r2, [pc, #612]	; (8002108 <HAL_GPIO_EXTI_Callback+0x8b8>)
 8001ea4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ea8:	4413      	add	r3, r2
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
		  		  for (int i=0; i<strlen(hiTemp); i++) {
 8001eae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001eb8:	4893      	ldr	r0, [pc, #588]	; (8002108 <HAL_GPIO_EXTI_Callback+0x8b8>)
 8001eba:	f7fe f989 	bl	80001d0 <strlen>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d8ec      	bhi.n	8001ea2 <HAL_GPIO_EXTI_Callback+0x652>
		  		  }
		  		  concatenate(hiTemp, substring);
 8001ec8:	4992      	ldr	r1, [pc, #584]	; (8002114 <HAL_GPIO_EXTI_Callback+0x8c4>)
 8001eca:	488f      	ldr	r0, [pc, #572]	; (8002108 <HAL_GPIO_EXTI_Callback+0x8b8>)
 8001ecc:	f7ff fc8c 	bl	80017e8 <concatenate>
		  		if (isBigger == 0) {
 8001ed0:	4b91      	ldr	r3, [pc, #580]	; (8002118 <HAL_GPIO_EXTI_Callback+0x8c8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d104      	bne.n	8001ee2 <HAL_GPIO_EXTI_Callback+0x692>
		  					  		  concatenate(hiTemp, "c");
 8001ed8:	4990      	ldr	r1, [pc, #576]	; (800211c <HAL_GPIO_EXTI_Callback+0x8cc>)
 8001eda:	488b      	ldr	r0, [pc, #556]	; (8002108 <HAL_GPIO_EXTI_Callback+0x8b8>)
 8001edc:	f7ff fc84 	bl	80017e8 <concatenate>
 8001ee0:	e003      	b.n	8001eea <HAL_GPIO_EXTI_Callback+0x69a>
		  					  	  } else {
		  					  		concatenate(hiTemp, "C");
 8001ee2:	498f      	ldr	r1, [pc, #572]	; (8002120 <HAL_GPIO_EXTI_Callback+0x8d0>)
 8001ee4:	4888      	ldr	r0, [pc, #544]	; (8002108 <HAL_GPIO_EXTI_Callback+0x8b8>)
 8001ee6:	f7ff fc7f 	bl	80017e8 <concatenate>
		  					  	  }
		  		  hiPressed=0;
 8001eea:	4b88      	ldr	r3, [pc, #544]	; (800210c <HAL_GPIO_EXTI_Callback+0x8bc>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	e155      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  	  }
		  }
	  } else if (menuState == 13) {
 8001ef2:	4b8c      	ldr	r3, [pc, #560]	; (8002124 <HAL_GPIO_EXTI_Callback+0x8d4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b0d      	cmp	r3, #13
 8001ef8:	f040 80d8 	bne.w	80020ac <HAL_GPIO_EXTI_Callback+0x85c>
		  if (keyState == 0) {
 8001efc:	4b8a      	ldr	r3, [pc, #552]	; (8002128 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10a      	bne.n	8001f1a <HAL_GPIO_EXTI_Callback+0x6ca>
			  inputHi++;
 8001f04:	4b82      	ldr	r3, [pc, #520]	; (8002110 <HAL_GPIO_EXTI_Callback+0x8c0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	4a81      	ldr	r2, [pc, #516]	; (8002110 <HAL_GPIO_EXTI_Callback+0x8c0>)
 8001f0c:	6013      	str	r3, [r2, #0]
			  hiPressed = 0;
 8001f0e:	4b7f      	ldr	r3, [pc, #508]	; (800210c <HAL_GPIO_EXTI_Callback+0x8bc>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
			  keyState = 1;
 8001f14:	4b84      	ldr	r3, [pc, #528]	; (8002128 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
		  }

		  if (keyState == 1) {
 8001f1a:	4b83      	ldr	r3, [pc, #524]	; (8002128 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	f040 813d 	bne.w	800219e <HAL_GPIO_EXTI_Callback+0x94e>
			  for (int i=0; i<strlen(byeSub); i++) {
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f2a:	e00a      	b.n	8001f42 <HAL_GPIO_EXTI_Callback+0x6f2>
			  	  byeSub[i] = '\0';
 8001f2c:	4a7f      	ldr	r2, [pc, #508]	; (800212c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001f2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001f32:	4413      	add	r3, r2
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
			  for (int i=0; i<strlen(byeSub); i++) {
 8001f38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f42:	487a      	ldr	r0, [pc, #488]	; (800212c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001f44:	f7fe f944 	bl	80001d0 <strlen>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d8ec      	bhi.n	8001f2c <HAL_GPIO_EXTI_Callback+0x6dc>
		  	  }

		  	  if (hiPressed == 0) {
 8001f52:	4b6e      	ldr	r3, [pc, #440]	; (800210c <HAL_GPIO_EXTI_Callback+0x8bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d135      	bne.n	8001fc6 <HAL_GPIO_EXTI_Callback+0x776>
		  		  strncpy(byeSub,byeTemp,inputHi-1);
 8001f5a:	4b6d      	ldr	r3, [pc, #436]	; (8002110 <HAL_GPIO_EXTI_Callback+0x8c0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	461a      	mov	r2, r3
 8001f62:	4973      	ldr	r1, [pc, #460]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001f64:	4871      	ldr	r0, [pc, #452]	; (800212c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001f66:	f00b fcc1 	bl	800d8ec <strncpy>
			  	  for (int i=0; i<strlen(byeTemp); i++) {
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001f70:	e00a      	b.n	8001f88 <HAL_GPIO_EXTI_Callback+0x738>
			  	  	  byeTemp[i] = '\0';
 8001f72:	4a6f      	ldr	r2, [pc, #444]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001f74:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f78:	4413      	add	r3, r2
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
			  	  for (int i=0; i<strlen(byeTemp); i++) {
 8001f7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f82:	3301      	adds	r3, #1
 8001f84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001f88:	4869      	ldr	r0, [pc, #420]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001f8a:	f7fe f921 	bl	80001d0 <strlen>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d8ec      	bhi.n	8001f72 <HAL_GPIO_EXTI_Callback+0x722>
			  	  }

			  	  concatenate(byeTemp, byeSub);
 8001f98:	4964      	ldr	r1, [pc, #400]	; (800212c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001f9a:	4865      	ldr	r0, [pc, #404]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001f9c:	f7ff fc24 	bl	80017e8 <concatenate>
			  	  if (isBigger == 0) {
 8001fa0:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <HAL_GPIO_EXTI_Callback+0x8c8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d104      	bne.n	8001fb2 <HAL_GPIO_EXTI_Callback+0x762>
			  		  concatenate(byeTemp, "a");
 8001fa8:	4962      	ldr	r1, [pc, #392]	; (8002134 <HAL_GPIO_EXTI_Callback+0x8e4>)
 8001faa:	4861      	ldr	r0, [pc, #388]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001fac:	f7ff fc1c 	bl	80017e8 <concatenate>
 8001fb0:	e003      	b.n	8001fba <HAL_GPIO_EXTI_Callback+0x76a>
			  	  } else {
			  		concatenate(byeTemp, "A");
 8001fb2:	4961      	ldr	r1, [pc, #388]	; (8002138 <HAL_GPIO_EXTI_Callback+0x8e8>)
 8001fb4:	485e      	ldr	r0, [pc, #376]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001fb6:	f7ff fc17 	bl	80017e8 <concatenate>
			  	  }
			  	  hiPressed++;
 8001fba:	4b54      	ldr	r3, [pc, #336]	; (800210c <HAL_GPIO_EXTI_Callback+0x8bc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	4a52      	ldr	r2, [pc, #328]	; (800210c <HAL_GPIO_EXTI_Callback+0x8bc>)
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e0eb      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  	  } else if (hiPressed == 1) {
 8001fc6:	4b51      	ldr	r3, [pc, #324]	; (800210c <HAL_GPIO_EXTI_Callback+0x8bc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d135      	bne.n	800203a <HAL_GPIO_EXTI_Callback+0x7ea>
			  	  strncpy(byeSub,byeTemp,inputHi-1);
 8001fce:	4b50      	ldr	r3, [pc, #320]	; (8002110 <HAL_GPIO_EXTI_Callback+0x8c0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4956      	ldr	r1, [pc, #344]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001fd8:	4854      	ldr	r0, [pc, #336]	; (800212c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001fda:	f00b fc87 	bl	800d8ec <strncpy>
//			  	hiInput = "";
			  	  for (int i=0; i<strlen(byeTemp); i++) {
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001fe4:	e00a      	b.n	8001ffc <HAL_GPIO_EXTI_Callback+0x7ac>
				  	  byeTemp[i] = '\0';
 8001fe6:	4a52      	ldr	r2, [pc, #328]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001fec:	4413      	add	r3, r2
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
			  	  for (int i=0; i<strlen(byeTemp); i++) {
 8001ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001ffc:	484c      	ldr	r0, [pc, #304]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001ffe:	f7fe f8e7 	bl	80001d0 <strlen>
 8002002:	4602      	mov	r2, r0
 8002004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002008:	429a      	cmp	r2, r3
 800200a:	d8ec      	bhi.n	8001fe6 <HAL_GPIO_EXTI_Callback+0x796>
			  	  }
			  	  concatenate(byeTemp, byeSub);
 800200c:	4947      	ldr	r1, [pc, #284]	; (800212c <HAL_GPIO_EXTI_Callback+0x8dc>)
 800200e:	4848      	ldr	r0, [pc, #288]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8002010:	f7ff fbea 	bl	80017e8 <concatenate>
			  	if (isBigger == 0) {
 8002014:	4b40      	ldr	r3, [pc, #256]	; (8002118 <HAL_GPIO_EXTI_Callback+0x8c8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d104      	bne.n	8002026 <HAL_GPIO_EXTI_Callback+0x7d6>
			  				  		  concatenate(byeTemp, "b");
 800201c:	4947      	ldr	r1, [pc, #284]	; (800213c <HAL_GPIO_EXTI_Callback+0x8ec>)
 800201e:	4844      	ldr	r0, [pc, #272]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8002020:	f7ff fbe2 	bl	80017e8 <concatenate>
 8002024:	e003      	b.n	800202e <HAL_GPIO_EXTI_Callback+0x7de>
			  				  	  } else {
			  				  		concatenate(byeTemp, "B");
 8002026:	4937      	ldr	r1, [pc, #220]	; (8002104 <HAL_GPIO_EXTI_Callback+0x8b4>)
 8002028:	4841      	ldr	r0, [pc, #260]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 800202a:	f7ff fbdd 	bl	80017e8 <concatenate>
			  				  	  }
			  	  hiPressed++;
 800202e:	4b37      	ldr	r3, [pc, #220]	; (800210c <HAL_GPIO_EXTI_Callback+0x8bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	3301      	adds	r3, #1
 8002034:	4a35      	ldr	r2, [pc, #212]	; (800210c <HAL_GPIO_EXTI_Callback+0x8bc>)
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	e0b1      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  	  } else if(hiPressed == 2) {
 800203a:	4b34      	ldr	r3, [pc, #208]	; (800210c <HAL_GPIO_EXTI_Callback+0x8bc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b02      	cmp	r3, #2
 8002040:	f040 80ad 	bne.w	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  		  strncpy(byeSub, byeTemp, inputHi-1);
 8002044:	4b32      	ldr	r3, [pc, #200]	; (8002110 <HAL_GPIO_EXTI_Callback+0x8c0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	3b01      	subs	r3, #1
 800204a:	461a      	mov	r2, r3
 800204c:	4938      	ldr	r1, [pc, #224]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 800204e:	4837      	ldr	r0, [pc, #220]	; (800212c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8002050:	f00b fc4c 	bl	800d8ec <strncpy>
		  		  for (int i=0; i<strlen(byeTemp); i++) {
 8002054:	2300      	movs	r3, #0
 8002056:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800205a:	e00a      	b.n	8002072 <HAL_GPIO_EXTI_Callback+0x822>
		  			byeTemp[i] = '\0';
 800205c:	4a34      	ldr	r2, [pc, #208]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 800205e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002062:	4413      	add	r3, r2
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
		  		  for (int i=0; i<strlen(byeTemp); i++) {
 8002068:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800206c:	3301      	adds	r3, #1
 800206e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002072:	482f      	ldr	r0, [pc, #188]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8002074:	f7fe f8ac 	bl	80001d0 <strlen>
 8002078:	4602      	mov	r2, r0
 800207a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800207e:	429a      	cmp	r2, r3
 8002080:	d8ec      	bhi.n	800205c <HAL_GPIO_EXTI_Callback+0x80c>
		  		  }
		  		  concatenate(byeTemp, byeSub);
 8002082:	492a      	ldr	r1, [pc, #168]	; (800212c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8002084:	482a      	ldr	r0, [pc, #168]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8002086:	f7ff fbaf 	bl	80017e8 <concatenate>
		  		if (isBigger == 0) {
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_GPIO_EXTI_Callback+0x8c8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d104      	bne.n	800209c <HAL_GPIO_EXTI_Callback+0x84c>
		  					  		  concatenate(byeTemp, "c");
 8002092:	4922      	ldr	r1, [pc, #136]	; (800211c <HAL_GPIO_EXTI_Callback+0x8cc>)
 8002094:	4826      	ldr	r0, [pc, #152]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8002096:	f7ff fba7 	bl	80017e8 <concatenate>
 800209a:	e003      	b.n	80020a4 <HAL_GPIO_EXTI_Callback+0x854>
		  					  	  } else {
		  					  		concatenate(byeTemp, "C");
 800209c:	4920      	ldr	r1, [pc, #128]	; (8002120 <HAL_GPIO_EXTI_Callback+0x8d0>)
 800209e:	4824      	ldr	r0, [pc, #144]	; (8002130 <HAL_GPIO_EXTI_Callback+0x8e0>)
 80020a0:	f7ff fba2 	bl	80017e8 <concatenate>
		  					  	  }
		  		  hiPressed=0;
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_GPIO_EXTI_Callback+0x8bc>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	e078      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  	  }
		  }
	  } else if (menuState == 14) {
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_GPIO_EXTI_Callback+0x8d4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b0e      	cmp	r3, #14
 80020b2:	d106      	bne.n	80020c2 <HAL_GPIO_EXTI_Callback+0x872>
		  s1.isSleep = 0;
 80020b4:	4b22      	ldr	r3, [pc, #136]	; (8002140 <HAL_GPIO_EXTI_Callback+0x8f0>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
		  menuState = 15;
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_GPIO_EXTI_Callback+0x8d4>)
 80020bc:	220f      	movs	r2, #15
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e06d      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
	  } else if (menuState == 15) {
 80020c2:	4b18      	ldr	r3, [pc, #96]	; (8002124 <HAL_GPIO_EXTI_Callback+0x8d4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b0f      	cmp	r3, #15
 80020c8:	d106      	bne.n	80020d8 <HAL_GPIO_EXTI_Callback+0x888>
		  s1.buzzerForPir = 0;
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <HAL_GPIO_EXTI_Callback+0x8f0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	605a      	str	r2, [r3, #4]
		  menuState = 16;
 80020d0:	4b14      	ldr	r3, [pc, #80]	; (8002124 <HAL_GPIO_EXTI_Callback+0x8d4>)
 80020d2:	2210      	movs	r2, #16
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e062      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
	  } else if (menuState == 16) {
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_GPIO_EXTI_Callback+0x8d4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b10      	cmp	r3, #16
 80020de:	d106      	bne.n	80020ee <HAL_GPIO_EXTI_Callback+0x89e>
		  s1.buzzerFortemp = 0;
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_GPIO_EXTI_Callback+0x8f0>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
		  menuState = 17;
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_GPIO_EXTI_Callback+0x8d4>)
 80020e8:	2211      	movs	r2, #17
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	e057      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
	  } else if (menuState == 17) {
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_GPIO_EXTI_Callback+0x8d4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b11      	cmp	r3, #17
 80020f4:	d126      	bne.n	8002144 <HAL_GPIO_EXTI_Callback+0x8f4>
		  s1.Pir = 0;
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_GPIO_EXTI_Callback+0x8f0>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	60da      	str	r2, [r3, #12]
		  menuState = 18;
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_GPIO_EXTI_Callback+0x8d4>)
 80020fe:	2212      	movs	r2, #18
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	e04c      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
 8002104:	0800e370 	.word	0x0800e370
 8002108:	20000014 	.word	0x20000014
 800210c:	20000764 	.word	0x20000764
 8002110:	20000760 	.word	0x20000760
 8002114:	200006ec 	.word	0x200006ec
 8002118:	2000076c 	.word	0x2000076c
 800211c:	0800e374 	.word	0x0800e374
 8002120:	0800e378 	.word	0x0800e378
 8002124:	2000000c 	.word	0x2000000c
 8002128:	20000768 	.word	0x20000768
 800212c:	20000700 	.word	0x20000700
 8002130:	20000028 	.word	0x20000028
 8002134:	0800e364 	.word	0x0800e364
 8002138:	0800e368 	.word	0x0800e368
 800213c:	0800e36c 	.word	0x0800e36c
 8002140:	200007a4 	.word	0x200007a4
	  } else if (menuState == 18) {
 8002144:	4b98      	ldr	r3, [pc, #608]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xb58>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b12      	cmp	r3, #18
 800214a:	d10b      	bne.n	8002164 <HAL_GPIO_EXTI_Callback+0x914>
		  if (s1.LED1 == 0) {
 800214c:	4b97      	ldr	r3, [pc, #604]	; (80023ac <HAL_GPIO_EXTI_Callback+0xb5c>)
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d103      	bne.n	800215c <HAL_GPIO_EXTI_Callback+0x90c>
			  s1.LED1 = 1;
 8002154:	4b95      	ldr	r3, [pc, #596]	; (80023ac <HAL_GPIO_EXTI_Callback+0xb5c>)
 8002156:	2201      	movs	r2, #1
 8002158:	611a      	str	r2, [r3, #16]
 800215a:	e020      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  } else {
			  s1.LED1 = 0;
 800215c:	4b93      	ldr	r3, [pc, #588]	; (80023ac <HAL_GPIO_EXTI_Callback+0xb5c>)
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
 8002162:	e01c      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  }
	  } else if (menuState == 20 && input == 0) {
 8002164:	4b90      	ldr	r3, [pc, #576]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xb58>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b14      	cmp	r3, #20
 800216a:	d10a      	bne.n	8002182 <HAL_GPIO_EXTI_Callback+0x932>
 800216c:	4b90      	ldr	r3, [pc, #576]	; (80023b0 <HAL_GPIO_EXTI_Callback+0xb60>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d106      	bne.n	8002182 <HAL_GPIO_EXTI_Callback+0x932>
		  tens = 1;
 8002174:	4b8f      	ldr	r3, [pc, #572]	; (80023b4 <HAL_GPIO_EXTI_Callback+0xb64>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]
		  input = 1;
 800217a:	4b8d      	ldr	r3, [pc, #564]	; (80023b0 <HAL_GPIO_EXTI_Callback+0xb60>)
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	e00d      	b.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
	  } else if (menuState == 20 && input == 1) {
 8002182:	4b89      	ldr	r3, [pc, #548]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xb58>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b14      	cmp	r3, #20
 8002188:	d109      	bne.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
 800218a:	4b89      	ldr	r3, [pc, #548]	; (80023b0 <HAL_GPIO_EXTI_Callback+0xb60>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d105      	bne.n	800219e <HAL_GPIO_EXTI_Callback+0x94e>
		  ones = 1;
 8002192:	4b89      	ldr	r3, [pc, #548]	; (80023b8 <HAL_GPIO_EXTI_Callback+0xb68>)
 8002194:	2201      	movs	r2, #1
 8002196:	601a      	str	r2, [r3, #0]
		  input = 0;
 8002198:	4b85      	ldr	r3, [pc, #532]	; (80023b0 <HAL_GPIO_EXTI_Callback+0xb60>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
	  }
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 800219e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021a2:	4886      	ldr	r0, [pc, #536]	; (80023bc <HAL_GPIO_EXTI_Callback+0xb6c>)
 80021a4:	f006 ff5c 	bl	8009060 <HAL_GPIO_TogglePin>
    break;
 80021a8:	f002 bec9 	b.w	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
  case 2:
    /* code */
	  //5
	  if (menuState != -2 && menuState != -3) {
 80021ac:	4b7e      	ldr	r3, [pc, #504]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xb58>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f113 0f02 	cmn.w	r3, #2
 80021b4:	d007      	beq.n	80021c6 <HAL_GPIO_EXTI_Callback+0x976>
 80021b6:	4b7c      	ldr	r3, [pc, #496]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xb58>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f113 0f03 	cmn.w	r3, #3
 80021be:	d002      	beq.n	80021c6 <HAL_GPIO_EXTI_Callback+0x976>
	  		  count=0;
 80021c0:	4b7f      	ldr	r3, [pc, #508]	; (80023c0 <HAL_GPIO_EXTI_Callback+0xb70>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
	  	  }
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 80021c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ca:	487c      	ldr	r0, [pc, #496]	; (80023bc <HAL_GPIO_EXTI_Callback+0xb6c>)
 80021cc:	f006 ff48 	bl	8009060 <HAL_GPIO_TogglePin>
	  if (menuState == 2 && input == 0) {
 80021d0:	4b75      	ldr	r3, [pc, #468]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xb58>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d10a      	bne.n	80021ee <HAL_GPIO_EXTI_Callback+0x99e>
 80021d8:	4b75      	ldr	r3, [pc, #468]	; (80023b0 <HAL_GPIO_EXTI_Callback+0xb60>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d106      	bne.n	80021ee <HAL_GPIO_EXTI_Callback+0x99e>
	  	tens = 5;
 80021e0:	4b74      	ldr	r3, [pc, #464]	; (80023b4 <HAL_GPIO_EXTI_Callback+0xb64>)
 80021e2:	2205      	movs	r2, #5
 80021e4:	601a      	str	r2, [r3, #0]
	  	input = 1;
 80021e6:	4b72      	ldr	r3, [pc, #456]	; (80023b0 <HAL_GPIO_EXTI_Callback+0xb60>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e218      	b.n	8002620 <HAL_GPIO_EXTI_Callback+0xdd0>
	  } else if (menuState == 2 && input == 1) {
 80021ee:	4b6e      	ldr	r3, [pc, #440]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xb58>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d10a      	bne.n	800220c <HAL_GPIO_EXTI_Callback+0x9bc>
 80021f6:	4b6e      	ldr	r3, [pc, #440]	; (80023b0 <HAL_GPIO_EXTI_Callback+0xb60>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d106      	bne.n	800220c <HAL_GPIO_EXTI_Callback+0x9bc>
		ones = 5;
 80021fe:	4b6e      	ldr	r3, [pc, #440]	; (80023b8 <HAL_GPIO_EXTI_Callback+0xb68>)
 8002200:	2205      	movs	r2, #5
 8002202:	601a      	str	r2, [r3, #0]
		input = 0;
 8002204:	4b6a      	ldr	r3, [pc, #424]	; (80023b0 <HAL_GPIO_EXTI_Callback+0xb60>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	e209      	b.n	8002620 <HAL_GPIO_EXTI_Callback+0xdd0>
	  } else if (menuState == 20 && input == 0) {
 800220c:	4b66      	ldr	r3, [pc, #408]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xb58>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b14      	cmp	r3, #20
 8002212:	d10a      	bne.n	800222a <HAL_GPIO_EXTI_Callback+0x9da>
 8002214:	4b66      	ldr	r3, [pc, #408]	; (80023b0 <HAL_GPIO_EXTI_Callback+0xb60>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d106      	bne.n	800222a <HAL_GPIO_EXTI_Callback+0x9da>
		  	tens = 5;
 800221c:	4b65      	ldr	r3, [pc, #404]	; (80023b4 <HAL_GPIO_EXTI_Callback+0xb64>)
 800221e:	2205      	movs	r2, #5
 8002220:	601a      	str	r2, [r3, #0]
		  	input = 1;
 8002222:	4b63      	ldr	r3, [pc, #396]	; (80023b0 <HAL_GPIO_EXTI_Callback+0xb60>)
 8002224:	2201      	movs	r2, #1
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	e1fa      	b.n	8002620 <HAL_GPIO_EXTI_Callback+0xdd0>
		  } else if (menuState == 20 && input == 1) {
 800222a:	4b5f      	ldr	r3, [pc, #380]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xb58>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b14      	cmp	r3, #20
 8002230:	d10a      	bne.n	8002248 <HAL_GPIO_EXTI_Callback+0x9f8>
 8002232:	4b5f      	ldr	r3, [pc, #380]	; (80023b0 <HAL_GPIO_EXTI_Callback+0xb60>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d106      	bne.n	8002248 <HAL_GPIO_EXTI_Callback+0x9f8>
			ones = 5;
 800223a:	4b5f      	ldr	r3, [pc, #380]	; (80023b8 <HAL_GPIO_EXTI_Callback+0xb68>)
 800223c:	2205      	movs	r2, #5
 800223e:	601a      	str	r2, [r3, #0]
			input = 0;
 8002240:	4b5b      	ldr	r3, [pc, #364]	; (80023b0 <HAL_GPIO_EXTI_Callback+0xb60>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e1eb      	b.n	8002620 <HAL_GPIO_EXTI_Callback+0xdd0>
	  }else if (menuState == 0) {
 8002248:	4b57      	ldr	r3, [pc, #348]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xb58>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d104      	bne.n	800225a <HAL_GPIO_EXTI_Callback+0xa0a>
		  menuState = 8;
 8002250:	4b55      	ldr	r3, [pc, #340]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xb58>)
 8002252:	2208      	movs	r2, #8
 8002254:	601a      	str	r2, [r3, #0]
		  		  					  	  }
		  		  		  hiPressed=0;
		  		  	  }
		  		  }
	  }
    break;
 8002256:	f002 be34 	b.w	8004ec2 <HAL_GPIO_EXTI_Callback+0x3672>
	  } else if (menuState == 12) {
 800225a:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_GPIO_EXTI_Callback+0xb58>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b0c      	cmp	r3, #12
 8002260:	f040 80fe 	bne.w	8002460 <HAL_GPIO_EXTI_Callback+0xc10>
		  if (keyState == 0) {
 8002264:	4b57      	ldr	r3, [pc, #348]	; (80023c4 <HAL_GPIO_EXTI_Callback+0xb74>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_GPIO_EXTI_Callback+0xa32>
		  			  inputHi++;
 800226c:	4b56      	ldr	r3, [pc, #344]	; (80023c8 <HAL_GPIO_EXTI_Callback+0xb78>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3301      	adds	r3, #1
 8002272:	4a55      	ldr	r2, [pc, #340]	; (80023c8 <HAL_GPIO_EXTI_Callback+0xb78>)
 8002274:	6013      	str	r3, [r2, #0]
		  			  hiPressed = 0;
 8002276:	4b55      	ldr	r3, [pc, #340]	; (80023cc <HAL_GPIO_EXTI_Callback+0xb7c>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
		  			  keyState = 5;
 800227c:	4b51      	ldr	r3, [pc, #324]	; (80023c4 <HAL_GPIO_EXTI_Callback+0xb74>)
 800227e:	2205      	movs	r2, #5
 8002280:	601a      	str	r2, [r3, #0]
		  		  if (keyState == 5) {
 8002282:	4b50      	ldr	r3, [pc, #320]	; (80023c4 <HAL_GPIO_EXTI_Callback+0xb74>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b05      	cmp	r3, #5
 8002288:	f042 861b 	bne.w	8004ec2 <HAL_GPIO_EXTI_Callback+0x3672>
		  			  for (int i=0; i<strlen(substring); i++) {
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002292:	e00a      	b.n	80022aa <HAL_GPIO_EXTI_Callback+0xa5a>
		  			  	  substring[i] = '\0';
 8002294:	4a4e      	ldr	r2, [pc, #312]	; (80023d0 <HAL_GPIO_EXTI_Callback+0xb80>)
 8002296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800229a:	4413      	add	r3, r2
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
		  			  for (int i=0; i<strlen(substring); i++) {
 80022a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022a4:	3301      	adds	r3, #1
 80022a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80022aa:	4849      	ldr	r0, [pc, #292]	; (80023d0 <HAL_GPIO_EXTI_Callback+0xb80>)
 80022ac:	f7fd ff90 	bl	80001d0 <strlen>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d8ec      	bhi.n	8002294 <HAL_GPIO_EXTI_Callback+0xa44>
		  		  	  if (hiPressed == 0) {
 80022ba:	4b44      	ldr	r3, [pc, #272]	; (80023cc <HAL_GPIO_EXTI_Callback+0xb7c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d136      	bne.n	8002330 <HAL_GPIO_EXTI_Callback+0xae0>
		  		  		  strncpy(substring,hiTemp,inputHi-1);
 80022c2:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <HAL_GPIO_EXTI_Callback+0xb78>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	461a      	mov	r2, r3
 80022ca:	4942      	ldr	r1, [pc, #264]	; (80023d4 <HAL_GPIO_EXTI_Callback+0xb84>)
 80022cc:	4840      	ldr	r0, [pc, #256]	; (80023d0 <HAL_GPIO_EXTI_Callback+0xb80>)
 80022ce:	f00b fb0d 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 80022d2:	2300      	movs	r3, #0
 80022d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80022d8:	e00a      	b.n	80022f0 <HAL_GPIO_EXTI_Callback+0xaa0>
		  			  	  	  hiTemp[i] = '\0';
 80022da:	4a3e      	ldr	r2, [pc, #248]	; (80023d4 <HAL_GPIO_EXTI_Callback+0xb84>)
 80022dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80022e0:	4413      	add	r3, r2
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 80022e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80022ea:	3301      	adds	r3, #1
 80022ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80022f0:	4838      	ldr	r0, [pc, #224]	; (80023d4 <HAL_GPIO_EXTI_Callback+0xb84>)
 80022f2:	f7fd ff6d 	bl	80001d0 <strlen>
 80022f6:	4602      	mov	r2, r0
 80022f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d8ec      	bhi.n	80022da <HAL_GPIO_EXTI_Callback+0xa8a>
		  			  	  concatenate(hiTemp, substring);
 8002300:	4933      	ldr	r1, [pc, #204]	; (80023d0 <HAL_GPIO_EXTI_Callback+0xb80>)
 8002302:	4834      	ldr	r0, [pc, #208]	; (80023d4 <HAL_GPIO_EXTI_Callback+0xb84>)
 8002304:	f7ff fa70 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 8002308:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <HAL_GPIO_EXTI_Callback+0xb88>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d104      	bne.n	800231a <HAL_GPIO_EXTI_Callback+0xaca>
		  			  				  		  concatenate(hiTemp, "m");
 8002310:	4932      	ldr	r1, [pc, #200]	; (80023dc <HAL_GPIO_EXTI_Callback+0xb8c>)
 8002312:	4830      	ldr	r0, [pc, #192]	; (80023d4 <HAL_GPIO_EXTI_Callback+0xb84>)
 8002314:	f7ff fa68 	bl	80017e8 <concatenate>
 8002318:	e003      	b.n	8002322 <HAL_GPIO_EXTI_Callback+0xad2>
		  			  				  		concatenate(hiTemp, "M");
 800231a:	4931      	ldr	r1, [pc, #196]	; (80023e0 <HAL_GPIO_EXTI_Callback+0xb90>)
 800231c:	482d      	ldr	r0, [pc, #180]	; (80023d4 <HAL_GPIO_EXTI_Callback+0xb84>)
 800231e:	f7ff fa63 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 8002322:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_GPIO_EXTI_Callback+0xb7c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3301      	adds	r3, #1
 8002328:	4a28      	ldr	r2, [pc, #160]	; (80023cc <HAL_GPIO_EXTI_Callback+0xb7c>)
 800232a:	6013      	str	r3, [r2, #0]
    break;
 800232c:	f002 bdc9 	b.w	8004ec2 <HAL_GPIO_EXTI_Callback+0x3672>
		  		  	  } else if (hiPressed == 1) {
 8002330:	4b26      	ldr	r3, [pc, #152]	; (80023cc <HAL_GPIO_EXTI_Callback+0xb7c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d159      	bne.n	80023ec <HAL_GPIO_EXTI_Callback+0xb9c>
		  			  	  strncpy(substring,hiTemp,inputHi-1);
 8002338:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <HAL_GPIO_EXTI_Callback+0xb78>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3b01      	subs	r3, #1
 800233e:	461a      	mov	r2, r3
 8002340:	4924      	ldr	r1, [pc, #144]	; (80023d4 <HAL_GPIO_EXTI_Callback+0xb84>)
 8002342:	4823      	ldr	r0, [pc, #140]	; (80023d0 <HAL_GPIO_EXTI_Callback+0xb80>)
 8002344:	f00b fad2 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800234e:	e00a      	b.n	8002366 <HAL_GPIO_EXTI_Callback+0xb16>
		  				  	  hiTemp[i] = '\0';
 8002350:	4a20      	ldr	r2, [pc, #128]	; (80023d4 <HAL_GPIO_EXTI_Callback+0xb84>)
 8002352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002356:	4413      	add	r3, r2
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 800235c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002360:	3301      	adds	r3, #1
 8002362:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002366:	481b      	ldr	r0, [pc, #108]	; (80023d4 <HAL_GPIO_EXTI_Callback+0xb84>)
 8002368:	f7fd ff32 	bl	80001d0 <strlen>
 800236c:	4602      	mov	r2, r0
 800236e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002372:	429a      	cmp	r2, r3
 8002374:	d8ec      	bhi.n	8002350 <HAL_GPIO_EXTI_Callback+0xb00>
		  			  	  concatenate(hiTemp, substring);
 8002376:	4916      	ldr	r1, [pc, #88]	; (80023d0 <HAL_GPIO_EXTI_Callback+0xb80>)
 8002378:	4816      	ldr	r0, [pc, #88]	; (80023d4 <HAL_GPIO_EXTI_Callback+0xb84>)
 800237a:	f7ff fa35 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 800237e:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <HAL_GPIO_EXTI_Callback+0xb88>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d104      	bne.n	8002390 <HAL_GPIO_EXTI_Callback+0xb40>
		  			  				  		  concatenate(hiTemp, "n");
 8002386:	4917      	ldr	r1, [pc, #92]	; (80023e4 <HAL_GPIO_EXTI_Callback+0xb94>)
 8002388:	4812      	ldr	r0, [pc, #72]	; (80023d4 <HAL_GPIO_EXTI_Callback+0xb84>)
 800238a:	f7ff fa2d 	bl	80017e8 <concatenate>
 800238e:	e003      	b.n	8002398 <HAL_GPIO_EXTI_Callback+0xb48>
		  			  				  		concatenate(hiTemp, "N");
 8002390:	4915      	ldr	r1, [pc, #84]	; (80023e8 <HAL_GPIO_EXTI_Callback+0xb98>)
 8002392:	4810      	ldr	r0, [pc, #64]	; (80023d4 <HAL_GPIO_EXTI_Callback+0xb84>)
 8002394:	f7ff fa28 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <HAL_GPIO_EXTI_Callback+0xb7c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3301      	adds	r3, #1
 800239e:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <HAL_GPIO_EXTI_Callback+0xb7c>)
 80023a0:	6013      	str	r3, [r2, #0]
    break;
 80023a2:	f002 bd8e 	b.w	8004ec2 <HAL_GPIO_EXTI_Callback+0x3672>
 80023a6:	bf00      	nop
 80023a8:	2000000c 	.word	0x2000000c
 80023ac:	200007a4 	.word	0x200007a4
 80023b0:	200006a8 	.word	0x200006a8
 80023b4:	2000069c 	.word	0x2000069c
 80023b8:	20000698 	.word	0x20000698
 80023bc:	48001000 	.word	0x48001000
 80023c0:	20000728 	.word	0x20000728
 80023c4:	20000768 	.word	0x20000768
 80023c8:	20000760 	.word	0x20000760
 80023cc:	20000764 	.word	0x20000764
 80023d0:	200006ec 	.word	0x200006ec
 80023d4:	20000014 	.word	0x20000014
 80023d8:	2000076c 	.word	0x2000076c
 80023dc:	0800e37c 	.word	0x0800e37c
 80023e0:	0800e380 	.word	0x0800e380
 80023e4:	0800e384 	.word	0x0800e384
 80023e8:	0800e388 	.word	0x0800e388
		  		  	  } else if(hiPressed == 2) {
 80023ec:	4ba5      	ldr	r3, [pc, #660]	; (8002684 <HAL_GPIO_EXTI_Callback+0xe34>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	f042 8566 	bne.w	8004ec2 <HAL_GPIO_EXTI_Callback+0x3672>
		  		  		  strncpy(substring, hiTemp, inputHi-1);
 80023f6:	4ba4      	ldr	r3, [pc, #656]	; (8002688 <HAL_GPIO_EXTI_Callback+0xe38>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	461a      	mov	r2, r3
 80023fe:	49a3      	ldr	r1, [pc, #652]	; (800268c <HAL_GPIO_EXTI_Callback+0xe3c>)
 8002400:	48a3      	ldr	r0, [pc, #652]	; (8002690 <HAL_GPIO_EXTI_Callback+0xe40>)
 8002402:	f00b fa73 	bl	800d8ec <strncpy>
		  		  		  for (int i=0; i<strlen(hiTemp); i++) {
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800240c:	e00a      	b.n	8002424 <HAL_GPIO_EXTI_Callback+0xbd4>
		  		  			  hiTemp[i] = '\0';
 800240e:	4a9f      	ldr	r2, [pc, #636]	; (800268c <HAL_GPIO_EXTI_Callback+0xe3c>)
 8002410:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002414:	4413      	add	r3, r2
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
		  		  		  for (int i=0; i<strlen(hiTemp); i++) {
 800241a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800241e:	3301      	adds	r3, #1
 8002420:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002424:	4899      	ldr	r0, [pc, #612]	; (800268c <HAL_GPIO_EXTI_Callback+0xe3c>)
 8002426:	f7fd fed3 	bl	80001d0 <strlen>
 800242a:	4602      	mov	r2, r0
 800242c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002430:	429a      	cmp	r2, r3
 8002432:	d8ec      	bhi.n	800240e <HAL_GPIO_EXTI_Callback+0xbbe>
		  		  		  concatenate(hiTemp, substring);
 8002434:	4996      	ldr	r1, [pc, #600]	; (8002690 <HAL_GPIO_EXTI_Callback+0xe40>)
 8002436:	4895      	ldr	r0, [pc, #596]	; (800268c <HAL_GPIO_EXTI_Callback+0xe3c>)
 8002438:	f7ff f9d6 	bl	80017e8 <concatenate>
		  		  		if (isBigger == 0) {
 800243c:	4b95      	ldr	r3, [pc, #596]	; (8002694 <HAL_GPIO_EXTI_Callback+0xe44>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d104      	bne.n	800244e <HAL_GPIO_EXTI_Callback+0xbfe>
		  		  					  		  concatenate(hiTemp, "o");
 8002444:	4994      	ldr	r1, [pc, #592]	; (8002698 <HAL_GPIO_EXTI_Callback+0xe48>)
 8002446:	4891      	ldr	r0, [pc, #580]	; (800268c <HAL_GPIO_EXTI_Callback+0xe3c>)
 8002448:	f7ff f9ce 	bl	80017e8 <concatenate>
 800244c:	e003      	b.n	8002456 <HAL_GPIO_EXTI_Callback+0xc06>
		  		  					  		concatenate(hiTemp, "O");
 800244e:	4993      	ldr	r1, [pc, #588]	; (800269c <HAL_GPIO_EXTI_Callback+0xe4c>)
 8002450:	488e      	ldr	r0, [pc, #568]	; (800268c <HAL_GPIO_EXTI_Callback+0xe3c>)
 8002452:	f7ff f9c9 	bl	80017e8 <concatenate>
		  		  		  hiPressed=0;
 8002456:	4b8b      	ldr	r3, [pc, #556]	; (8002684 <HAL_GPIO_EXTI_Callback+0xe34>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
    break;
 800245c:	f002 bd31 	b.w	8004ec2 <HAL_GPIO_EXTI_Callback+0x3672>
	  } else if (menuState == 13) {
 8002460:	4b8f      	ldr	r3, [pc, #572]	; (80026a0 <HAL_GPIO_EXTI_Callback+0xe50>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b0d      	cmp	r3, #13
 8002466:	f042 852c 	bne.w	8004ec2 <HAL_GPIO_EXTI_Callback+0x3672>
		  if (keyState == 0) {
 800246a:	4b8e      	ldr	r3, [pc, #568]	; (80026a4 <HAL_GPIO_EXTI_Callback+0xe54>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10a      	bne.n	8002488 <HAL_GPIO_EXTI_Callback+0xc38>
		  			  inputHi++;
 8002472:	4b85      	ldr	r3, [pc, #532]	; (8002688 <HAL_GPIO_EXTI_Callback+0xe38>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	3301      	adds	r3, #1
 8002478:	4a83      	ldr	r2, [pc, #524]	; (8002688 <HAL_GPIO_EXTI_Callback+0xe38>)
 800247a:	6013      	str	r3, [r2, #0]
		  			  hiPressed = 0;
 800247c:	4b81      	ldr	r3, [pc, #516]	; (8002684 <HAL_GPIO_EXTI_Callback+0xe34>)
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
		  			  keyState = 5;
 8002482:	4b88      	ldr	r3, [pc, #544]	; (80026a4 <HAL_GPIO_EXTI_Callback+0xe54>)
 8002484:	2205      	movs	r2, #5
 8002486:	601a      	str	r2, [r3, #0]
		  		  if (keyState == 5) {
 8002488:	4b86      	ldr	r3, [pc, #536]	; (80026a4 <HAL_GPIO_EXTI_Callback+0xe54>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b05      	cmp	r3, #5
 800248e:	f042 8518 	bne.w	8004ec2 <HAL_GPIO_EXTI_Callback+0x3672>
		  			  for (int i=0; i<strlen(byeSub); i++) {
 8002492:	2300      	movs	r3, #0
 8002494:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002498:	e00a      	b.n	80024b0 <HAL_GPIO_EXTI_Callback+0xc60>
		  				byeSub[i] = '\0';
 800249a:	4a83      	ldr	r2, [pc, #524]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xe58>)
 800249c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024a0:	4413      	add	r3, r2
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
		  			  for (int i=0; i<strlen(byeSub); i++) {
 80024a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024aa:	3301      	adds	r3, #1
 80024ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80024b0:	487d      	ldr	r0, [pc, #500]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xe58>)
 80024b2:	f7fd fe8d 	bl	80001d0 <strlen>
 80024b6:	4602      	mov	r2, r0
 80024b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024bc:	429a      	cmp	r2, r3
 80024be:	d8ec      	bhi.n	800249a <HAL_GPIO_EXTI_Callback+0xc4a>
		  		  	  if (hiPressed == 0) {
 80024c0:	4b70      	ldr	r3, [pc, #448]	; (8002684 <HAL_GPIO_EXTI_Callback+0xe34>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d136      	bne.n	8002536 <HAL_GPIO_EXTI_Callback+0xce6>
		  		  		  strncpy(byeSub,byeTemp,inputHi-1);
 80024c8:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <HAL_GPIO_EXTI_Callback+0xe38>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	461a      	mov	r2, r3
 80024d0:	4976      	ldr	r1, [pc, #472]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 80024d2:	4875      	ldr	r0, [pc, #468]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xe58>)
 80024d4:	f00b fa0a 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80024de:	e00a      	b.n	80024f6 <HAL_GPIO_EXTI_Callback+0xca6>
		  			  		byeTemp[i] = '\0';
 80024e0:	4a72      	ldr	r2, [pc, #456]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 80024e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80024e6:	4413      	add	r3, r2
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 80024ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80024f0:	3301      	adds	r3, #1
 80024f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80024f6:	486d      	ldr	r0, [pc, #436]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 80024f8:	f7fd fe6a 	bl	80001d0 <strlen>
 80024fc:	4602      	mov	r2, r0
 80024fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002502:	429a      	cmp	r2, r3
 8002504:	d8ec      	bhi.n	80024e0 <HAL_GPIO_EXTI_Callback+0xc90>
		  			  	  concatenate(byeTemp, byeSub);
 8002506:	4968      	ldr	r1, [pc, #416]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xe58>)
 8002508:	4868      	ldr	r0, [pc, #416]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 800250a:	f7ff f96d 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 800250e:	4b61      	ldr	r3, [pc, #388]	; (8002694 <HAL_GPIO_EXTI_Callback+0xe44>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d104      	bne.n	8002520 <HAL_GPIO_EXTI_Callback+0xcd0>
		  			  				  		  concatenate(byeTemp, "m");
 8002516:	4966      	ldr	r1, [pc, #408]	; (80026b0 <HAL_GPIO_EXTI_Callback+0xe60>)
 8002518:	4864      	ldr	r0, [pc, #400]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 800251a:	f7ff f965 	bl	80017e8 <concatenate>
 800251e:	e003      	b.n	8002528 <HAL_GPIO_EXTI_Callback+0xcd8>
		  			  				  		concatenate(byeTemp, "M");
 8002520:	4964      	ldr	r1, [pc, #400]	; (80026b4 <HAL_GPIO_EXTI_Callback+0xe64>)
 8002522:	4862      	ldr	r0, [pc, #392]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 8002524:	f7ff f960 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 8002528:	4b56      	ldr	r3, [pc, #344]	; (8002684 <HAL_GPIO_EXTI_Callback+0xe34>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3301      	adds	r3, #1
 800252e:	4a55      	ldr	r2, [pc, #340]	; (8002684 <HAL_GPIO_EXTI_Callback+0xe34>)
 8002530:	6013      	str	r3, [r2, #0]
    break;
 8002532:	f002 bcc6 	b.w	8004ec2 <HAL_GPIO_EXTI_Callback+0x3672>
		  		  	  } else if (hiPressed == 1) {
 8002536:	4b53      	ldr	r3, [pc, #332]	; (8002684 <HAL_GPIO_EXTI_Callback+0xe34>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d136      	bne.n	80025ac <HAL_GPIO_EXTI_Callback+0xd5c>
		  			  	  strncpy(byeSub,byeTemp,inputHi-1);
 800253e:	4b52      	ldr	r3, [pc, #328]	; (8002688 <HAL_GPIO_EXTI_Callback+0xe38>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3b01      	subs	r3, #1
 8002544:	461a      	mov	r2, r3
 8002546:	4959      	ldr	r1, [pc, #356]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 8002548:	4857      	ldr	r0, [pc, #348]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xe58>)
 800254a:	f00b f9cf 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002554:	e00a      	b.n	800256c <HAL_GPIO_EXTI_Callback+0xd1c>
		  				  	  hiTemp[i] = '\0';
 8002556:	4a4d      	ldr	r2, [pc, #308]	; (800268c <HAL_GPIO_EXTI_Callback+0xe3c>)
 8002558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800255c:	4413      	add	r3, r2
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 8002562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002566:	3301      	adds	r3, #1
 8002568:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800256c:	484f      	ldr	r0, [pc, #316]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 800256e:	f7fd fe2f 	bl	80001d0 <strlen>
 8002572:	4602      	mov	r2, r0
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002578:	429a      	cmp	r2, r3
 800257a:	d8ec      	bhi.n	8002556 <HAL_GPIO_EXTI_Callback+0xd06>
		  			  	  concatenate(byeTemp, byeSub);
 800257c:	494a      	ldr	r1, [pc, #296]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xe58>)
 800257e:	484b      	ldr	r0, [pc, #300]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 8002580:	f7ff f932 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 8002584:	4b43      	ldr	r3, [pc, #268]	; (8002694 <HAL_GPIO_EXTI_Callback+0xe44>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d104      	bne.n	8002596 <HAL_GPIO_EXTI_Callback+0xd46>
		  			  				  		  concatenate(byeTemp, "n");
 800258c:	494a      	ldr	r1, [pc, #296]	; (80026b8 <HAL_GPIO_EXTI_Callback+0xe68>)
 800258e:	4847      	ldr	r0, [pc, #284]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 8002590:	f7ff f92a 	bl	80017e8 <concatenate>
 8002594:	e003      	b.n	800259e <HAL_GPIO_EXTI_Callback+0xd4e>
		  			  				  		concatenate(byeTemp, "N");
 8002596:	4949      	ldr	r1, [pc, #292]	; (80026bc <HAL_GPIO_EXTI_Callback+0xe6c>)
 8002598:	4844      	ldr	r0, [pc, #272]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 800259a:	f7ff f925 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 800259e:	4b39      	ldr	r3, [pc, #228]	; (8002684 <HAL_GPIO_EXTI_Callback+0xe34>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	4a37      	ldr	r2, [pc, #220]	; (8002684 <HAL_GPIO_EXTI_Callback+0xe34>)
 80025a6:	6013      	str	r3, [r2, #0]
    break;
 80025a8:	f002 bc8b 	b.w	8004ec2 <HAL_GPIO_EXTI_Callback+0x3672>
		  		  	  } else if(hiPressed == 2) {
 80025ac:	4b35      	ldr	r3, [pc, #212]	; (8002684 <HAL_GPIO_EXTI_Callback+0xe34>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	f042 8486 	bne.w	8004ec2 <HAL_GPIO_EXTI_Callback+0x3672>
		  		  		  strncpy(byeSub, byeTemp, inputHi-1);
 80025b6:	4b34      	ldr	r3, [pc, #208]	; (8002688 <HAL_GPIO_EXTI_Callback+0xe38>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	461a      	mov	r2, r3
 80025be:	493b      	ldr	r1, [pc, #236]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 80025c0:	4839      	ldr	r0, [pc, #228]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xe58>)
 80025c2:	f00b f993 	bl	800d8ec <strncpy>
		  		  		  for (int i=0; i<strlen(byeTemp); i++) {
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80025cc:	e00a      	b.n	80025e4 <HAL_GPIO_EXTI_Callback+0xd94>
		  		  			byeTemp[i] = '\0';
 80025ce:	4a37      	ldr	r2, [pc, #220]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 80025d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80025d4:	4413      	add	r3, r2
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
		  		  		  for (int i=0; i<strlen(byeTemp); i++) {
 80025da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80025de:	3301      	adds	r3, #1
 80025e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80025e4:	4831      	ldr	r0, [pc, #196]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 80025e6:	f7fd fdf3 	bl	80001d0 <strlen>
 80025ea:	4602      	mov	r2, r0
 80025ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d8ec      	bhi.n	80025ce <HAL_GPIO_EXTI_Callback+0xd7e>
		  		  		  concatenate(byeTemp, byeSub);
 80025f4:	492c      	ldr	r1, [pc, #176]	; (80026a8 <HAL_GPIO_EXTI_Callback+0xe58>)
 80025f6:	482d      	ldr	r0, [pc, #180]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 80025f8:	f7ff f8f6 	bl	80017e8 <concatenate>
		  		  		if (isBigger == 0) {
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <HAL_GPIO_EXTI_Callback+0xe44>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d104      	bne.n	800260e <HAL_GPIO_EXTI_Callback+0xdbe>
		  		  					  		  concatenate(byeTemp, "o");
 8002604:	4924      	ldr	r1, [pc, #144]	; (8002698 <HAL_GPIO_EXTI_Callback+0xe48>)
 8002606:	4829      	ldr	r0, [pc, #164]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 8002608:	f7ff f8ee 	bl	80017e8 <concatenate>
 800260c:	e003      	b.n	8002616 <HAL_GPIO_EXTI_Callback+0xdc6>
		  		  					  		concatenate(byeTemp, "O");
 800260e:	4923      	ldr	r1, [pc, #140]	; (800269c <HAL_GPIO_EXTI_Callback+0xe4c>)
 8002610:	4826      	ldr	r0, [pc, #152]	; (80026ac <HAL_GPIO_EXTI_Callback+0xe5c>)
 8002612:	f7ff f8e9 	bl	80017e8 <concatenate>
		  		  		  hiPressed=0;
 8002616:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_GPIO_EXTI_Callback+0xe34>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
    break;
 800261c:	f002 bc51 	b.w	8004ec2 <HAL_GPIO_EXTI_Callback+0x3672>
 8002620:	f002 bc4f 	b.w	8004ec2 <HAL_GPIO_EXTI_Callback+0x3672>
  case 3:
    /* code */
	  //9
	  if (menuState != -2 && menuState != -3) {
 8002624:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <HAL_GPIO_EXTI_Callback+0xe50>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f113 0f02 	cmn.w	r3, #2
 800262c:	d007      	beq.n	800263e <HAL_GPIO_EXTI_Callback+0xdee>
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <HAL_GPIO_EXTI_Callback+0xe50>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f113 0f03 	cmn.w	r3, #3
 8002636:	d002      	beq.n	800263e <HAL_GPIO_EXTI_Callback+0xdee>
	  		  count=0;
 8002638:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <HAL_GPIO_EXTI_Callback+0xe70>)
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
	  	  }
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 800263e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002642:	4820      	ldr	r0, [pc, #128]	; (80026c4 <HAL_GPIO_EXTI_Callback+0xe74>)
 8002644:	f006 fd0c 	bl	8009060 <HAL_GPIO_TogglePin>
	  if (menuState == 2 && input == 0) {
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_GPIO_EXTI_Callback+0xe50>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d10a      	bne.n	8002666 <HAL_GPIO_EXTI_Callback+0xe16>
 8002650:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <HAL_GPIO_EXTI_Callback+0xe78>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d106      	bne.n	8002666 <HAL_GPIO_EXTI_Callback+0xe16>
	  	tens = 9;
 8002658:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <HAL_GPIO_EXTI_Callback+0xe7c>)
 800265a:	2209      	movs	r2, #9
 800265c:	601a      	str	r2, [r3, #0]
	  	input = 1;
 800265e:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_GPIO_EXTI_Callback+0xe78>)
 8002660:	2201      	movs	r2, #1
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e119      	b.n	800289a <HAL_GPIO_EXTI_Callback+0x104a>
	  } else if (menuState == 2 && input == 1) {
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_GPIO_EXTI_Callback+0xe50>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d132      	bne.n	80026d4 <HAL_GPIO_EXTI_Callback+0xe84>
 800266e:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <HAL_GPIO_EXTI_Callback+0xe78>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d12e      	bne.n	80026d4 <HAL_GPIO_EXTI_Callback+0xe84>
		ones = 9;
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <HAL_GPIO_EXTI_Callback+0xe80>)
 8002678:	2209      	movs	r2, #9
 800267a:	601a      	str	r2, [r3, #0]
		input = 0;
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_GPIO_EXTI_Callback+0xe78>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e10a      	b.n	800289a <HAL_GPIO_EXTI_Callback+0x104a>
 8002684:	20000764 	.word	0x20000764
 8002688:	20000760 	.word	0x20000760
 800268c:	20000014 	.word	0x20000014
 8002690:	200006ec 	.word	0x200006ec
 8002694:	2000076c 	.word	0x2000076c
 8002698:	0800e38c 	.word	0x0800e38c
 800269c:	0800e390 	.word	0x0800e390
 80026a0:	2000000c 	.word	0x2000000c
 80026a4:	20000768 	.word	0x20000768
 80026a8:	20000700 	.word	0x20000700
 80026ac:	20000028 	.word	0x20000028
 80026b0:	0800e37c 	.word	0x0800e37c
 80026b4:	0800e380 	.word	0x0800e380
 80026b8:	0800e384 	.word	0x0800e384
 80026bc:	0800e388 	.word	0x0800e388
 80026c0:	20000728 	.word	0x20000728
 80026c4:	48001000 	.word	0x48001000
 80026c8:	200006a8 	.word	0x200006a8
 80026cc:	2000069c 	.word	0x2000069c
 80026d0:	20000698 	.word	0x20000698
	  }	  else if (menuState == 20 && input == 0) {
 80026d4:	4b9c      	ldr	r3, [pc, #624]	; (8002948 <HAL_GPIO_EXTI_Callback+0x10f8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b14      	cmp	r3, #20
 80026da:	d10a      	bne.n	80026f2 <HAL_GPIO_EXTI_Callback+0xea2>
 80026dc:	4b9b      	ldr	r3, [pc, #620]	; (800294c <HAL_GPIO_EXTI_Callback+0x10fc>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d106      	bne.n	80026f2 <HAL_GPIO_EXTI_Callback+0xea2>
		  	tens = 9;
 80026e4:	4b9a      	ldr	r3, [pc, #616]	; (8002950 <HAL_GPIO_EXTI_Callback+0x1100>)
 80026e6:	2209      	movs	r2, #9
 80026e8:	601a      	str	r2, [r3, #0]
		  	input = 1;
 80026ea:	4b98      	ldr	r3, [pc, #608]	; (800294c <HAL_GPIO_EXTI_Callback+0x10fc>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e0d3      	b.n	800289a <HAL_GPIO_EXTI_Callback+0x104a>
		  } else if (menuState == 20 && input == 1) {
 80026f2:	4b95      	ldr	r3, [pc, #596]	; (8002948 <HAL_GPIO_EXTI_Callback+0x10f8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b14      	cmp	r3, #20
 80026f8:	d10a      	bne.n	8002710 <HAL_GPIO_EXTI_Callback+0xec0>
 80026fa:	4b94      	ldr	r3, [pc, #592]	; (800294c <HAL_GPIO_EXTI_Callback+0x10fc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d106      	bne.n	8002710 <HAL_GPIO_EXTI_Callback+0xec0>
			ones = 9;
 8002702:	4b94      	ldr	r3, [pc, #592]	; (8002954 <HAL_GPIO_EXTI_Callback+0x1104>)
 8002704:	2209      	movs	r2, #9
 8002706:	601a      	str	r2, [r3, #0]
			input = 0;
 8002708:	4b90      	ldr	r3, [pc, #576]	; (800294c <HAL_GPIO_EXTI_Callback+0x10fc>)
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e0c4      	b.n	800289a <HAL_GPIO_EXTI_Callback+0x104a>
		  } else if (menuState == 12) {
 8002710:	4b8d      	ldr	r3, [pc, #564]	; (8002948 <HAL_GPIO_EXTI_Callback+0x10f8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b0c      	cmp	r3, #12
 8002716:	d15d      	bne.n	80027d4 <HAL_GPIO_EXTI_Callback+0xf84>
		 		  if (keyState == 0) {
 8002718:	4b8f      	ldr	r3, [pc, #572]	; (8002958 <HAL_GPIO_EXTI_Callback+0x1108>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <HAL_GPIO_EXTI_Callback+0xee6>
		 		  			  inputHi++;
 8002720:	4b8e      	ldr	r3, [pc, #568]	; (800295c <HAL_GPIO_EXTI_Callback+0x110c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	4a8d      	ldr	r2, [pc, #564]	; (800295c <HAL_GPIO_EXTI_Callback+0x110c>)
 8002728:	6013      	str	r3, [r2, #0]
		 		  			  hiPressed = 0;
 800272a:	4b8d      	ldr	r3, [pc, #564]	; (8002960 <HAL_GPIO_EXTI_Callback+0x1110>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
		 		  			  keyState = 9;
 8002730:	4b89      	ldr	r3, [pc, #548]	; (8002958 <HAL_GPIO_EXTI_Callback+0x1108>)
 8002732:	2209      	movs	r2, #9
 8002734:	601a      	str	r2, [r3, #0]
		 		  		  }

		 		  		  if (keyState == 9) {
 8002736:	4b88      	ldr	r3, [pc, #544]	; (8002958 <HAL_GPIO_EXTI_Callback+0x1108>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b09      	cmp	r3, #9
 800273c:	f042 83c3 	bne.w	8004ec6 <HAL_GPIO_EXTI_Callback+0x3676>
		 		  			  for (int i=0; i<strlen(substring); i++) {
 8002740:	2300      	movs	r3, #0
 8002742:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002746:	e00a      	b.n	800275e <HAL_GPIO_EXTI_Callback+0xf0e>
		 		  			  	  substring[i] = '\0';
 8002748:	4a86      	ldr	r2, [pc, #536]	; (8002964 <HAL_GPIO_EXTI_Callback+0x1114>)
 800274a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800274e:	4413      	add	r3, r2
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
		 		  			  for (int i=0; i<strlen(substring); i++) {
 8002754:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002758:	3301      	adds	r3, #1
 800275a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800275e:	4881      	ldr	r0, [pc, #516]	; (8002964 <HAL_GPIO_EXTI_Callback+0x1114>)
 8002760:	f7fd fd36 	bl	80001d0 <strlen>
 8002764:	4602      	mov	r2, r0
 8002766:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800276a:	429a      	cmp	r2, r3
 800276c:	d8ec      	bhi.n	8002748 <HAL_GPIO_EXTI_Callback+0xef8>
		 		  		  	  }

		 		  		  	  if (hiPressed == 0) {
 800276e:	4b7c      	ldr	r3, [pc, #496]	; (8002960 <HAL_GPIO_EXTI_Callback+0x1110>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f042 83a7 	bne.w	8004ec6 <HAL_GPIO_EXTI_Callback+0x3676>
		 		  		  		  strncpy(substring,hiTemp,inputHi-1);
 8002778:	4b78      	ldr	r3, [pc, #480]	; (800295c <HAL_GPIO_EXTI_Callback+0x110c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3b01      	subs	r3, #1
 800277e:	461a      	mov	r2, r3
 8002780:	4979      	ldr	r1, [pc, #484]	; (8002968 <HAL_GPIO_EXTI_Callback+0x1118>)
 8002782:	4878      	ldr	r0, [pc, #480]	; (8002964 <HAL_GPIO_EXTI_Callback+0x1114>)
 8002784:	f00b f8b2 	bl	800d8ec <strncpy>
		 		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 8002788:	2300      	movs	r3, #0
 800278a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800278e:	e00a      	b.n	80027a6 <HAL_GPIO_EXTI_Callback+0xf56>
		 		  			  	  	  hiTemp[i] = '\0';
 8002790:	4a75      	ldr	r2, [pc, #468]	; (8002968 <HAL_GPIO_EXTI_Callback+0x1118>)
 8002792:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002796:	4413      	add	r3, r2
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
		 		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 800279c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027a0:	3301      	adds	r3, #1
 80027a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027a6:	4870      	ldr	r0, [pc, #448]	; (8002968 <HAL_GPIO_EXTI_Callback+0x1118>)
 80027a8:	f7fd fd12 	bl	80001d0 <strlen>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d8ec      	bhi.n	8002790 <HAL_GPIO_EXTI_Callback+0xf40>
		 		  			  	  }
		 		  			  	  concatenate(hiTemp, substring);
 80027b6:	496b      	ldr	r1, [pc, #428]	; (8002964 <HAL_GPIO_EXTI_Callback+0x1114>)
 80027b8:	486b      	ldr	r0, [pc, #428]	; (8002968 <HAL_GPIO_EXTI_Callback+0x1118>)
 80027ba:	f7ff f815 	bl	80017e8 <concatenate>
		 		  			  	  concatenate(hiTemp, " ");
 80027be:	496b      	ldr	r1, [pc, #428]	; (800296c <HAL_GPIO_EXTI_Callback+0x111c>)
 80027c0:	4869      	ldr	r0, [pc, #420]	; (8002968 <HAL_GPIO_EXTI_Callback+0x1118>)
 80027c2:	f7ff f811 	bl	80017e8 <concatenate>
		 		  			  	  hiPressed++;
 80027c6:	4b66      	ldr	r3, [pc, #408]	; (8002960 <HAL_GPIO_EXTI_Callback+0x1110>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3301      	adds	r3, #1
 80027cc:	4a64      	ldr	r2, [pc, #400]	; (8002960 <HAL_GPIO_EXTI_Callback+0x1110>)
 80027ce:	6013      	str	r3, [r2, #0]
		 		  			  	  concatenate(byeTemp, " ");
		 		  			  	  hiPressed++;
		 		  		  	  }
		 		  		  }
		 	  }
    break;
 80027d0:	f002 bb79 	b.w	8004ec6 <HAL_GPIO_EXTI_Callback+0x3676>
		 	  }  else if (menuState == 13) {
 80027d4:	4b5c      	ldr	r3, [pc, #368]	; (8002948 <HAL_GPIO_EXTI_Callback+0x10f8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b0d      	cmp	r3, #13
 80027da:	f042 8374 	bne.w	8004ec6 <HAL_GPIO_EXTI_Callback+0x3676>
		 		  if (keyState == 0) {
 80027de:	4b5e      	ldr	r3, [pc, #376]	; (8002958 <HAL_GPIO_EXTI_Callback+0x1108>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <HAL_GPIO_EXTI_Callback+0xfac>
		 		  			  inputHi++;
 80027e6:	4b5d      	ldr	r3, [pc, #372]	; (800295c <HAL_GPIO_EXTI_Callback+0x110c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3301      	adds	r3, #1
 80027ec:	4a5b      	ldr	r2, [pc, #364]	; (800295c <HAL_GPIO_EXTI_Callback+0x110c>)
 80027ee:	6013      	str	r3, [r2, #0]
		 		  			  hiPressed = 0;
 80027f0:	4b5b      	ldr	r3, [pc, #364]	; (8002960 <HAL_GPIO_EXTI_Callback+0x1110>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
		 		  			  keyState = 9;
 80027f6:	4b58      	ldr	r3, [pc, #352]	; (8002958 <HAL_GPIO_EXTI_Callback+0x1108>)
 80027f8:	2209      	movs	r2, #9
 80027fa:	601a      	str	r2, [r3, #0]
		 		  		  if (keyState == 9) {
 80027fc:	4b56      	ldr	r3, [pc, #344]	; (8002958 <HAL_GPIO_EXTI_Callback+0x1108>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b09      	cmp	r3, #9
 8002802:	f042 8360 	bne.w	8004ec6 <HAL_GPIO_EXTI_Callback+0x3676>
		 		  			  for (int i=0; i<strlen(byeSub); i++) {
 8002806:	2300      	movs	r3, #0
 8002808:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800280c:	e00a      	b.n	8002824 <HAL_GPIO_EXTI_Callback+0xfd4>
		 		  				byeSub[i] = '\0';
 800280e:	4a58      	ldr	r2, [pc, #352]	; (8002970 <HAL_GPIO_EXTI_Callback+0x1120>)
 8002810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002814:	4413      	add	r3, r2
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
		 		  			  for (int i=0; i<strlen(byeSub); i++) {
 800281a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800281e:	3301      	adds	r3, #1
 8002820:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002824:	4852      	ldr	r0, [pc, #328]	; (8002970 <HAL_GPIO_EXTI_Callback+0x1120>)
 8002826:	f7fd fcd3 	bl	80001d0 <strlen>
 800282a:	4602      	mov	r2, r0
 800282c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002830:	429a      	cmp	r2, r3
 8002832:	d8ec      	bhi.n	800280e <HAL_GPIO_EXTI_Callback+0xfbe>
		 		  		  	  if (hiPressed == 0) {
 8002834:	4b4a      	ldr	r3, [pc, #296]	; (8002960 <HAL_GPIO_EXTI_Callback+0x1110>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	f042 8344 	bne.w	8004ec6 <HAL_GPIO_EXTI_Callback+0x3676>
		 		  		  		  strncpy(byeSub,byeTemp,inputHi-1);
 800283e:	4b47      	ldr	r3, [pc, #284]	; (800295c <HAL_GPIO_EXTI_Callback+0x110c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3b01      	subs	r3, #1
 8002844:	461a      	mov	r2, r3
 8002846:	494b      	ldr	r1, [pc, #300]	; (8002974 <HAL_GPIO_EXTI_Callback+0x1124>)
 8002848:	4849      	ldr	r0, [pc, #292]	; (8002970 <HAL_GPIO_EXTI_Callback+0x1120>)
 800284a:	f00b f84f 	bl	800d8ec <strncpy>
		 		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 800284e:	2300      	movs	r3, #0
 8002850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002854:	e00a      	b.n	800286c <HAL_GPIO_EXTI_Callback+0x101c>
		 		  			  	  	  hiTemp[i] = '\0';
 8002856:	4a44      	ldr	r2, [pc, #272]	; (8002968 <HAL_GPIO_EXTI_Callback+0x1118>)
 8002858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800285c:	4413      	add	r3, r2
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
		 		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 8002862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002866:	3301      	adds	r3, #1
 8002868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800286c:	4841      	ldr	r0, [pc, #260]	; (8002974 <HAL_GPIO_EXTI_Callback+0x1124>)
 800286e:	f7fd fcaf 	bl	80001d0 <strlen>
 8002872:	4602      	mov	r2, r0
 8002874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002878:	429a      	cmp	r2, r3
 800287a:	d8ec      	bhi.n	8002856 <HAL_GPIO_EXTI_Callback+0x1006>
		 		  			  	  concatenate(byeTemp, byeSub);
 800287c:	493c      	ldr	r1, [pc, #240]	; (8002970 <HAL_GPIO_EXTI_Callback+0x1120>)
 800287e:	483d      	ldr	r0, [pc, #244]	; (8002974 <HAL_GPIO_EXTI_Callback+0x1124>)
 8002880:	f7fe ffb2 	bl	80017e8 <concatenate>
		 		  			  	  concatenate(byeTemp, " ");
 8002884:	4939      	ldr	r1, [pc, #228]	; (800296c <HAL_GPIO_EXTI_Callback+0x111c>)
 8002886:	483b      	ldr	r0, [pc, #236]	; (8002974 <HAL_GPIO_EXTI_Callback+0x1124>)
 8002888:	f7fe ffae 	bl	80017e8 <concatenate>
		 		  			  	  hiPressed++;
 800288c:	4b34      	ldr	r3, [pc, #208]	; (8002960 <HAL_GPIO_EXTI_Callback+0x1110>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3301      	adds	r3, #1
 8002892:	4a33      	ldr	r2, [pc, #204]	; (8002960 <HAL_GPIO_EXTI_Callback+0x1110>)
 8002894:	6013      	str	r3, [r2, #0]
    break;
 8002896:	f002 bb16 	b.w	8004ec6 <HAL_GPIO_EXTI_Callback+0x3676>
 800289a:	f002 bb14 	b.w	8004ec6 <HAL_GPIO_EXTI_Callback+0x3676>
  case 4:
    /* code */
	  //13
	  if (menuState != -2 && menuState != -3) {
 800289e:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <HAL_GPIO_EXTI_Callback+0x10f8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f113 0f02 	cmn.w	r3, #2
 80028a6:	d007      	beq.n	80028b8 <HAL_GPIO_EXTI_Callback+0x1068>
 80028a8:	4b27      	ldr	r3, [pc, #156]	; (8002948 <HAL_GPIO_EXTI_Callback+0x10f8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f113 0f03 	cmn.w	r3, #3
 80028b0:	d002      	beq.n	80028b8 <HAL_GPIO_EXTI_Callback+0x1068>
	  		  count=0;
 80028b2:	4b31      	ldr	r3, [pc, #196]	; (8002978 <HAL_GPIO_EXTI_Callback+0x1128>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
	  	  }
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 80028b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028bc:	482f      	ldr	r0, [pc, #188]	; (800297c <HAL_GPIO_EXTI_Callback+0x112c>)
 80028be:	f006 fbcf 	bl	8009060 <HAL_GPIO_TogglePin>
    break;
 80028c2:	f002 bb3c 	b.w	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
  case 5:
    /* code */
	  //2
	  if (menuState != -2 && menuState != -3) {
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HAL_GPIO_EXTI_Callback+0x10f8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f113 0f02 	cmn.w	r3, #2
 80028ce:	d007      	beq.n	80028e0 <HAL_GPIO_EXTI_Callback+0x1090>
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_GPIO_EXTI_Callback+0x10f8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f113 0f03 	cmn.w	r3, #3
 80028d8:	d002      	beq.n	80028e0 <HAL_GPIO_EXTI_Callback+0x1090>
	  		  count=0;
 80028da:	4b27      	ldr	r3, [pc, #156]	; (8002978 <HAL_GPIO_EXTI_Callback+0x1128>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
	  	  }
	  if (menuState == 0) {
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_GPIO_EXTI_Callback+0x10f8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d103      	bne.n	80028f0 <HAL_GPIO_EXTI_Callback+0x10a0>
		  menuState = 3;
 80028e8:	4b17      	ldr	r3, [pc, #92]	; (8002948 <HAL_GPIO_EXTI_Callback+0x10f8>)
 80028ea:	2203      	movs	r2, #3
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e32d      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
	  } else if (menuState == 1) {
 80028f0:	4b15      	ldr	r3, [pc, #84]	; (8002948 <HAL_GPIO_EXTI_Callback+0x10f8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d109      	bne.n	800290c <HAL_GPIO_EXTI_Callback+0x10bc>
		  ones=0;
 80028f8:	4b16      	ldr	r3, [pc, #88]	; (8002954 <HAL_GPIO_EXTI_Callback+0x1104>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
		  tens=0;
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <HAL_GPIO_EXTI_Callback+0x1100>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
		  menuState = 2;
 8002904:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_GPIO_EXTI_Callback+0x10f8>)
 8002906:	2202      	movs	r2, #2
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	e31f      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
	  } else if (menuState == 2 && input == 0) {
 800290c:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <HAL_GPIO_EXTI_Callback+0x10f8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d10a      	bne.n	800292a <HAL_GPIO_EXTI_Callback+0x10da>
 8002914:	4b0d      	ldr	r3, [pc, #52]	; (800294c <HAL_GPIO_EXTI_Callback+0x10fc>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d106      	bne.n	800292a <HAL_GPIO_EXTI_Callback+0x10da>
  		  tens = 2;
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <HAL_GPIO_EXTI_Callback+0x1100>)
 800291e:	2202      	movs	r2, #2
 8002920:	601a      	str	r2, [r3, #0]
  		  input = 1;
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_GPIO_EXTI_Callback+0x10fc>)
 8002924:	2201      	movs	r2, #1
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	e310      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
  	  } else if (menuState == 2 && input == 1) {
 800292a:	4b07      	ldr	r3, [pc, #28]	; (8002948 <HAL_GPIO_EXTI_Callback+0x10f8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d126      	bne.n	8002980 <HAL_GPIO_EXTI_Callback+0x1130>
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_GPIO_EXTI_Callback+0x10fc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d122      	bne.n	8002980 <HAL_GPIO_EXTI_Callback+0x1130>
  		ones = 2;
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_GPIO_EXTI_Callback+0x1104>)
 800293c:	2202      	movs	r2, #2
 800293e:	601a      	str	r2, [r3, #0]
  		input = 0;
 8002940:	4b02      	ldr	r3, [pc, #8]	; (800294c <HAL_GPIO_EXTI_Callback+0x10fc>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e301      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
 8002948:	2000000c 	.word	0x2000000c
 800294c:	200006a8 	.word	0x200006a8
 8002950:	2000069c 	.word	0x2000069c
 8002954:	20000698 	.word	0x20000698
 8002958:	20000768 	.word	0x20000768
 800295c:	20000760 	.word	0x20000760
 8002960:	20000764 	.word	0x20000764
 8002964:	200006ec 	.word	0x200006ec
 8002968:	20000014 	.word	0x20000014
 800296c:	0800e394 	.word	0x0800e394
 8002970:	20000700 	.word	0x20000700
 8002974:	20000028 	.word	0x20000028
 8002978:	20000728 	.word	0x20000728
 800297c:	48001000 	.word	0x48001000
  	  } else if (menuState == 20 && input == 0) {
 8002980:	4b9d      	ldr	r3, [pc, #628]	; (8002bf8 <HAL_GPIO_EXTI_Callback+0x13a8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b14      	cmp	r3, #20
 8002986:	d10a      	bne.n	800299e <HAL_GPIO_EXTI_Callback+0x114e>
 8002988:	4b9c      	ldr	r3, [pc, #624]	; (8002bfc <HAL_GPIO_EXTI_Callback+0x13ac>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d106      	bne.n	800299e <HAL_GPIO_EXTI_Callback+0x114e>
  		  tens = 2;
 8002990:	4b9b      	ldr	r3, [pc, #620]	; (8002c00 <HAL_GPIO_EXTI_Callback+0x13b0>)
 8002992:	2202      	movs	r2, #2
 8002994:	601a      	str	r2, [r3, #0]
  		  input = 1;
 8002996:	4b99      	ldr	r3, [pc, #612]	; (8002bfc <HAL_GPIO_EXTI_Callback+0x13ac>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	e2d6      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
  	  } else if (menuState == 20 && input == 1) {
 800299e:	4b96      	ldr	r3, [pc, #600]	; (8002bf8 <HAL_GPIO_EXTI_Callback+0x13a8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b14      	cmp	r3, #20
 80029a4:	d10a      	bne.n	80029bc <HAL_GPIO_EXTI_Callback+0x116c>
 80029a6:	4b95      	ldr	r3, [pc, #596]	; (8002bfc <HAL_GPIO_EXTI_Callback+0x13ac>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d106      	bne.n	80029bc <HAL_GPIO_EXTI_Callback+0x116c>
  		ones = 2;
 80029ae:	4b95      	ldr	r3, [pc, #596]	; (8002c04 <HAL_GPIO_EXTI_Callback+0x13b4>)
 80029b0:	2202      	movs	r2, #2
 80029b2:	601a      	str	r2, [r3, #0]
  		input = 0;
 80029b4:	4b91      	ldr	r3, [pc, #580]	; (8002bfc <HAL_GPIO_EXTI_Callback+0x13ac>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e2c7      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
  	  } else if(menuState == 3) {
 80029bc:	4b8e      	ldr	r3, [pc, #568]	; (8002bf8 <HAL_GPIO_EXTI_Callback+0x13a8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d117      	bne.n	80029f4 <HAL_GPIO_EXTI_Callback+0x11a4>
  		  if (buzzerForPir == 0) {
 80029c4:	4b90      	ldr	r3, [pc, #576]	; (8002c08 <HAL_GPIO_EXTI_Callback+0x13b8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d109      	bne.n	80029e0 <HAL_GPIO_EXTI_Callback+0x1190>
  			  HAL_UART_Transmit(&huart2, "buzzer for pir is off\n", 22, 100);
 80029cc:	2364      	movs	r3, #100	; 0x64
 80029ce:	2216      	movs	r2, #22
 80029d0:	498e      	ldr	r1, [pc, #568]	; (8002c0c <HAL_GPIO_EXTI_Callback+0x13bc>)
 80029d2:	488f      	ldr	r0, [pc, #572]	; (8002c10 <HAL_GPIO_EXTI_Callback+0x13c0>)
 80029d4:	f009 fc98 	bl	800c308 <HAL_UART_Transmit>
  			  buzzerForPir = 1;
 80029d8:	4b8b      	ldr	r3, [pc, #556]	; (8002c08 <HAL_GPIO_EXTI_Callback+0x13b8>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e2b5      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
  		  } else {
  			HAL_UART_Transmit(&huart2, "buzzer for pir is on\n", 21, 100);
 80029e0:	2364      	movs	r3, #100	; 0x64
 80029e2:	2215      	movs	r2, #21
 80029e4:	498b      	ldr	r1, [pc, #556]	; (8002c14 <HAL_GPIO_EXTI_Callback+0x13c4>)
 80029e6:	488a      	ldr	r0, [pc, #552]	; (8002c10 <HAL_GPIO_EXTI_Callback+0x13c0>)
 80029e8:	f009 fc8e 	bl	800c308 <HAL_UART_Transmit>
  			  buzzerForPir = 0;
 80029ec:	4b86      	ldr	r3, [pc, #536]	; (8002c08 <HAL_GPIO_EXTI_Callback+0x13b8>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e2ab      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
  		  }
  	  } else if (menuState == 4) {
 80029f4:	4b80      	ldr	r3, [pc, #512]	; (8002bf8 <HAL_GPIO_EXTI_Callback+0x13a8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d117      	bne.n	8002a2c <HAL_GPIO_EXTI_Callback+0x11dc>
  		  if (LED2 == 0) {
 80029fc:	4b86      	ldr	r3, [pc, #536]	; (8002c18 <HAL_GPIO_EXTI_Callback+0x13c8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d109      	bne.n	8002a18 <HAL_GPIO_EXTI_Callback+0x11c8>
  			HAL_UART_Transmit(&huart2, "LED2 is on\n", 11, 100);
 8002a04:	2364      	movs	r3, #100	; 0x64
 8002a06:	220b      	movs	r2, #11
 8002a08:	4984      	ldr	r1, [pc, #528]	; (8002c1c <HAL_GPIO_EXTI_Callback+0x13cc>)
 8002a0a:	4881      	ldr	r0, [pc, #516]	; (8002c10 <HAL_GPIO_EXTI_Callback+0x13c0>)
 8002a0c:	f009 fc7c 	bl	800c308 <HAL_UART_Transmit>
  			  LED2 = 1;
 8002a10:	4b81      	ldr	r3, [pc, #516]	; (8002c18 <HAL_GPIO_EXTI_Callback+0x13c8>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	e299      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
  		  } else {
  			HAL_UART_Transmit(&huart2, "LED2 is off\n", 12, 100);
 8002a18:	2364      	movs	r3, #100	; 0x64
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	4980      	ldr	r1, [pc, #512]	; (8002c20 <HAL_GPIO_EXTI_Callback+0x13d0>)
 8002a1e:	487c      	ldr	r0, [pc, #496]	; (8002c10 <HAL_GPIO_EXTI_Callback+0x13c0>)
 8002a20:	f009 fc72 	bl	800c308 <HAL_UART_Transmit>
  			  LED2 = 0;
 8002a24:	4b7c      	ldr	r3, [pc, #496]	; (8002c18 <HAL_GPIO_EXTI_Callback+0x13c8>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	e28f      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
  		  }
  	  } else if (menuState == 5) {
 8002a2c:	4b72      	ldr	r3, [pc, #456]	; (8002bf8 <HAL_GPIO_EXTI_Callback+0x13a8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d121      	bne.n	8002a78 <HAL_GPIO_EXTI_Callback+0x1228>
  		  LED1 = 1;
 8002a34:	4b7b      	ldr	r3, [pc, #492]	; (8002c24 <HAL_GPIO_EXTI_Callback+0x13d4>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
  		  LED2 = 1;
 8002a3a:	4b77      	ldr	r3, [pc, #476]	; (8002c18 <HAL_GPIO_EXTI_Callback+0x13c8>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
  		  LED3 = 1;
 8002a40:	4b79      	ldr	r3, [pc, #484]	; (8002c28 <HAL_GPIO_EXTI_Callback+0x13d8>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
  		  LED4 = 1;
 8002a46:	4b79      	ldr	r3, [pc, #484]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x13dc>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
  		  pirIsOn = 1;
 8002a4c:	4b78      	ldr	r3, [pc, #480]	; (8002c30 <HAL_GPIO_EXTI_Callback+0x13e0>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
  		  buzzerForPir = 1;
 8002a52:	4b6d      	ldr	r3, [pc, #436]	; (8002c08 <HAL_GPIO_EXTI_Callback+0x13b8>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
  		  buzzerForTemp = 0;
 8002a58:	4b76      	ldr	r3, [pc, #472]	; (8002c34 <HAL_GPIO_EXTI_Callback+0x13e4>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
  		  sleepIsOn = 0;
 8002a5e:	4b76      	ldr	r3, [pc, #472]	; (8002c38 <HAL_GPIO_EXTI_Callback+0x13e8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
  		  menuState = 9;
 8002a64:	4b64      	ldr	r3, [pc, #400]	; (8002bf8 <HAL_GPIO_EXTI_Callback+0x13a8>)
 8002a66:	2209      	movs	r2, #9
 8002a68:	601a      	str	r2, [r3, #0]
  		  HAL_UART_Transmit(&huart2, "enter scenario runing\n", 22, 100);
 8002a6a:	2364      	movs	r3, #100	; 0x64
 8002a6c:	2216      	movs	r2, #22
 8002a6e:	4973      	ldr	r1, [pc, #460]	; (8002c3c <HAL_GPIO_EXTI_Callback+0x13ec>)
 8002a70:	4867      	ldr	r0, [pc, #412]	; (8002c10 <HAL_GPIO_EXTI_Callback+0x13c0>)
 8002a72:	f009 fc49 	bl	800c308 <HAL_UART_Transmit>
 8002a76:	e269      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
  	  } else if (menuState == 11) {
 8002a78:	4b5f      	ldr	r3, [pc, #380]	; (8002bf8 <HAL_GPIO_EXTI_Callback+0x13a8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b0b      	cmp	r3, #11
 8002a7e:	d116      	bne.n	8002aae <HAL_GPIO_EXTI_Callback+0x125e>
		  for (int i=0; i<20; i++) {
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002a86:	e00a      	b.n	8002a9e <HAL_GPIO_EXTI_Callback+0x124e>
		  	    byeTemp[i] = '\0';
 8002a88:	4a6d      	ldr	r2, [pc, #436]	; (8002c40 <HAL_GPIO_EXTI_Callback+0x13f0>)
 8002a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a8e:	4413      	add	r3, r2
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
		  for (int i=0; i<20; i++) {
 8002a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aa2:	2b13      	cmp	r3, #19
 8002aa4:	ddf0      	ble.n	8002a88 <HAL_GPIO_EXTI_Callback+0x1238>
		  }
  		  menuState = 13;
 8002aa6:	4b54      	ldr	r3, [pc, #336]	; (8002bf8 <HAL_GPIO_EXTI_Callback+0x13a8>)
 8002aa8:	220d      	movs	r2, #13
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	e24e      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
  	  } else if (menuState == 12) {
 8002aae:	4b52      	ldr	r3, [pc, #328]	; (8002bf8 <HAL_GPIO_EXTI_Callback+0x13a8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	f040 8113 	bne.w	8002cde <HAL_GPIO_EXTI_Callback+0x148e>
  		if (keyState == 0) {
 8002ab8:	4b62      	ldr	r3, [pc, #392]	; (8002c44 <HAL_GPIO_EXTI_Callback+0x13f4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <HAL_GPIO_EXTI_Callback+0x1286>
  			inputHi++;
 8002ac0:	4b61      	ldr	r3, [pc, #388]	; (8002c48 <HAL_GPIO_EXTI_Callback+0x13f8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	4a60      	ldr	r2, [pc, #384]	; (8002c48 <HAL_GPIO_EXTI_Callback+0x13f8>)
 8002ac8:	6013      	str	r3, [r2, #0]
  			hiPressed = 0;
 8002aca:	4b60      	ldr	r3, [pc, #384]	; (8002c4c <HAL_GPIO_EXTI_Callback+0x13fc>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
  			keyState = 2;
 8002ad0:	4b5c      	ldr	r3, [pc, #368]	; (8002c44 <HAL_GPIO_EXTI_Callback+0x13f4>)
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	601a      	str	r2, [r3, #0]
  		}

  		if (keyState == 2) {
 8002ad6:	4b5b      	ldr	r3, [pc, #364]	; (8002c44 <HAL_GPIO_EXTI_Callback+0x13f4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	f040 8236 	bne.w	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
  			for (int i=0; i<strlen(substring); i++) {
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ae6:	e00a      	b.n	8002afe <HAL_GPIO_EXTI_Callback+0x12ae>
  				  substring[i] = '\0';
 8002ae8:	4a59      	ldr	r2, [pc, #356]	; (8002c50 <HAL_GPIO_EXTI_Callback+0x1400>)
 8002aea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002aee:	4413      	add	r3, r2
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
  			for (int i=0; i<strlen(substring); i++) {
 8002af4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002af8:	3301      	adds	r3, #1
 8002afa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002afe:	4854      	ldr	r0, [pc, #336]	; (8002c50 <HAL_GPIO_EXTI_Callback+0x1400>)
 8002b00:	f7fd fb66 	bl	80001d0 <strlen>
 8002b04:	4602      	mov	r2, r0
 8002b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d8ec      	bhi.n	8002ae8 <HAL_GPIO_EXTI_Callback+0x1298>
  			}
  			if (hiPressed == 0) {
 8002b0e:	4b4f      	ldr	r3, [pc, #316]	; (8002c4c <HAL_GPIO_EXTI_Callback+0x13fc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d135      	bne.n	8002b82 <HAL_GPIO_EXTI_Callback+0x1332>
  				strncpy(substring,hiTemp,inputHi-1);
 8002b16:	4b4c      	ldr	r3, [pc, #304]	; (8002c48 <HAL_GPIO_EXTI_Callback+0x13f8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	494d      	ldr	r1, [pc, #308]	; (8002c54 <HAL_GPIO_EXTI_Callback+0x1404>)
 8002b20:	484b      	ldr	r0, [pc, #300]	; (8002c50 <HAL_GPIO_EXTI_Callback+0x1400>)
 8002b22:	f00a fee3 	bl	800d8ec <strncpy>

  				for (int i=0; i<strlen(hiTemp); i++) {
 8002b26:	2300      	movs	r3, #0
 8002b28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b2c:	e00a      	b.n	8002b44 <HAL_GPIO_EXTI_Callback+0x12f4>
  					  hiTemp[i] = '\0';
 8002b2e:	4a49      	ldr	r2, [pc, #292]	; (8002c54 <HAL_GPIO_EXTI_Callback+0x1404>)
 8002b30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b34:	4413      	add	r3, r2
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
  				for (int i=0; i<strlen(hiTemp); i++) {
 8002b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b44:	4843      	ldr	r0, [pc, #268]	; (8002c54 <HAL_GPIO_EXTI_Callback+0x1404>)
 8002b46:	f7fd fb43 	bl	80001d0 <strlen>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d8ec      	bhi.n	8002b2e <HAL_GPIO_EXTI_Callback+0x12de>
  				}

  				concatenate(hiTemp, substring);
 8002b54:	493e      	ldr	r1, [pc, #248]	; (8002c50 <HAL_GPIO_EXTI_Callback+0x1400>)
 8002b56:	483f      	ldr	r0, [pc, #252]	; (8002c54 <HAL_GPIO_EXTI_Callback+0x1404>)
 8002b58:	f7fe fe46 	bl	80017e8 <concatenate>
  				if (isBigger == 0) {
 8002b5c:	4b3e      	ldr	r3, [pc, #248]	; (8002c58 <HAL_GPIO_EXTI_Callback+0x1408>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d104      	bne.n	8002b6e <HAL_GPIO_EXTI_Callback+0x131e>
  							  		  concatenate(hiTemp, "d");
 8002b64:	493d      	ldr	r1, [pc, #244]	; (8002c5c <HAL_GPIO_EXTI_Callback+0x140c>)
 8002b66:	483b      	ldr	r0, [pc, #236]	; (8002c54 <HAL_GPIO_EXTI_Callback+0x1404>)
 8002b68:	f7fe fe3e 	bl	80017e8 <concatenate>
 8002b6c:	e003      	b.n	8002b76 <HAL_GPIO_EXTI_Callback+0x1326>
  							  	  } else {
  							  		concatenate(hiTemp, "D");
 8002b6e:	493c      	ldr	r1, [pc, #240]	; (8002c60 <HAL_GPIO_EXTI_Callback+0x1410>)
 8002b70:	4838      	ldr	r0, [pc, #224]	; (8002c54 <HAL_GPIO_EXTI_Callback+0x1404>)
 8002b72:	f7fe fe39 	bl	80017e8 <concatenate>
  							  	  }
  				hiPressed++;
 8002b76:	4b35      	ldr	r3, [pc, #212]	; (8002c4c <HAL_GPIO_EXTI_Callback+0x13fc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	4a33      	ldr	r2, [pc, #204]	; (8002c4c <HAL_GPIO_EXTI_Callback+0x13fc>)
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	e1e4      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
  			} else if (hiPressed == 1) {
 8002b82:	4b32      	ldr	r3, [pc, #200]	; (8002c4c <HAL_GPIO_EXTI_Callback+0x13fc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d170      	bne.n	8002c6c <HAL_GPIO_EXTI_Callback+0x141c>
  				strncpy(substring, hiTemp, inputHi-1);
 8002b8a:	4b2f      	ldr	r3, [pc, #188]	; (8002c48 <HAL_GPIO_EXTI_Callback+0x13f8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	461a      	mov	r2, r3
 8002b92:	4930      	ldr	r1, [pc, #192]	; (8002c54 <HAL_GPIO_EXTI_Callback+0x1404>)
 8002b94:	482e      	ldr	r0, [pc, #184]	; (8002c50 <HAL_GPIO_EXTI_Callback+0x1400>)
 8002b96:	f00a fea9 	bl	800d8ec <strncpy>

  				for (int i=0; i<strlen(hiTemp); i++) {
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ba0:	e00a      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x1368>
  					  hiTemp[i] = '\0';
 8002ba2:	4a2c      	ldr	r2, [pc, #176]	; (8002c54 <HAL_GPIO_EXTI_Callback+0x1404>)
 8002ba4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ba8:	4413      	add	r3, r2
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
  				for (int i=0; i<strlen(hiTemp); i++) {
 8002bae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bb8:	4826      	ldr	r0, [pc, #152]	; (8002c54 <HAL_GPIO_EXTI_Callback+0x1404>)
 8002bba:	f7fd fb09 	bl	80001d0 <strlen>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d8ec      	bhi.n	8002ba2 <HAL_GPIO_EXTI_Callback+0x1352>
  				}

  				concatenate(hiTemp, substring);
 8002bc8:	4921      	ldr	r1, [pc, #132]	; (8002c50 <HAL_GPIO_EXTI_Callback+0x1400>)
 8002bca:	4822      	ldr	r0, [pc, #136]	; (8002c54 <HAL_GPIO_EXTI_Callback+0x1404>)
 8002bcc:	f7fe fe0c 	bl	80017e8 <concatenate>
  				if (isBigger == 0) {
 8002bd0:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <HAL_GPIO_EXTI_Callback+0x1408>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d104      	bne.n	8002be2 <HAL_GPIO_EXTI_Callback+0x1392>
  							  		  concatenate(hiTemp, "e");
 8002bd8:	4922      	ldr	r1, [pc, #136]	; (8002c64 <HAL_GPIO_EXTI_Callback+0x1414>)
 8002bda:	481e      	ldr	r0, [pc, #120]	; (8002c54 <HAL_GPIO_EXTI_Callback+0x1404>)
 8002bdc:	f7fe fe04 	bl	80017e8 <concatenate>
 8002be0:	e003      	b.n	8002bea <HAL_GPIO_EXTI_Callback+0x139a>
  							  	  } else {
  							  		concatenate(hiTemp, "E");
 8002be2:	4921      	ldr	r1, [pc, #132]	; (8002c68 <HAL_GPIO_EXTI_Callback+0x1418>)
 8002be4:	481b      	ldr	r0, [pc, #108]	; (8002c54 <HAL_GPIO_EXTI_Callback+0x1404>)
 8002be6:	f7fe fdff 	bl	80017e8 <concatenate>
  							  	  }
  				hiPressed++;
 8002bea:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <HAL_GPIO_EXTI_Callback+0x13fc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	4a16      	ldr	r2, [pc, #88]	; (8002c4c <HAL_GPIO_EXTI_Callback+0x13fc>)
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	e1aa      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
 8002bf6:	bf00      	nop
 8002bf8:	2000000c 	.word	0x2000000c
 8002bfc:	200006a8 	.word	0x200006a8
 8002c00:	2000069c 	.word	0x2000069c
 8002c04:	20000698 	.word	0x20000698
 8002c08:	200006b8 	.word	0x200006b8
 8002c0c:	0800e398 	.word	0x0800e398
 8002c10:	20000304 	.word	0x20000304
 8002c14:	0800e3b0 	.word	0x0800e3b0
 8002c18:	20000718 	.word	0x20000718
 8002c1c:	0800e3c8 	.word	0x0800e3c8
 8002c20:	0800e3d4 	.word	0x0800e3d4
 8002c24:	20000714 	.word	0x20000714
 8002c28:	2000071c 	.word	0x2000071c
 8002c2c:	20000720 	.word	0x20000720
 8002c30:	200006b4 	.word	0x200006b4
 8002c34:	200006a0 	.word	0x200006a0
 8002c38:	2000074c 	.word	0x2000074c
 8002c3c:	0800e3e4 	.word	0x0800e3e4
 8002c40:	20000028 	.word	0x20000028
 8002c44:	20000768 	.word	0x20000768
 8002c48:	20000760 	.word	0x20000760
 8002c4c:	20000764 	.word	0x20000764
 8002c50:	200006ec 	.word	0x200006ec
 8002c54:	20000014 	.word	0x20000014
 8002c58:	2000076c 	.word	0x2000076c
 8002c5c:	0800e3fc 	.word	0x0800e3fc
 8002c60:	0800e400 	.word	0x0800e400
 8002c64:	0800e404 	.word	0x0800e404
 8002c68:	0800e408 	.word	0x0800e408
  			} else if (hiPressed == 2) {
 8002c6c:	4ba0      	ldr	r3, [pc, #640]	; (8002ef0 <HAL_GPIO_EXTI_Callback+0x16a0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	f040 816b 	bne.w	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
  				strncpy(substring, hiTemp, inputHi-1);
 8002c76:	4b9f      	ldr	r3, [pc, #636]	; (8002ef4 <HAL_GPIO_EXTI_Callback+0x16a4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	499e      	ldr	r1, [pc, #632]	; (8002ef8 <HAL_GPIO_EXTI_Callback+0x16a8>)
 8002c80:	489e      	ldr	r0, [pc, #632]	; (8002efc <HAL_GPIO_EXTI_Callback+0x16ac>)
 8002c82:	f00a fe33 	bl	800d8ec <strncpy>
  				for (int i=0; i<strlen(hiTemp); i++) {
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c8c:	e00a      	b.n	8002ca4 <HAL_GPIO_EXTI_Callback+0x1454>
  				  	  hiTemp[i] = '\0';
 8002c8e:	4a9a      	ldr	r2, [pc, #616]	; (8002ef8 <HAL_GPIO_EXTI_Callback+0x16a8>)
 8002c90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c94:	4413      	add	r3, r2
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
  				for (int i=0; i<strlen(hiTemp); i++) {
 8002c9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ca4:	4894      	ldr	r0, [pc, #592]	; (8002ef8 <HAL_GPIO_EXTI_Callback+0x16a8>)
 8002ca6:	f7fd fa93 	bl	80001d0 <strlen>
 8002caa:	4602      	mov	r2, r0
 8002cac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d8ec      	bhi.n	8002c8e <HAL_GPIO_EXTI_Callback+0x143e>
  				 }
  				concatenate(hiTemp, substring);
 8002cb4:	4991      	ldr	r1, [pc, #580]	; (8002efc <HAL_GPIO_EXTI_Callback+0x16ac>)
 8002cb6:	4890      	ldr	r0, [pc, #576]	; (8002ef8 <HAL_GPIO_EXTI_Callback+0x16a8>)
 8002cb8:	f7fe fd96 	bl	80017e8 <concatenate>
  				if (isBigger == 0) {
 8002cbc:	4b90      	ldr	r3, [pc, #576]	; (8002f00 <HAL_GPIO_EXTI_Callback+0x16b0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d104      	bne.n	8002cce <HAL_GPIO_EXTI_Callback+0x147e>
  							  		  concatenate(hiTemp, "f");
 8002cc4:	498f      	ldr	r1, [pc, #572]	; (8002f04 <HAL_GPIO_EXTI_Callback+0x16b4>)
 8002cc6:	488c      	ldr	r0, [pc, #560]	; (8002ef8 <HAL_GPIO_EXTI_Callback+0x16a8>)
 8002cc8:	f7fe fd8e 	bl	80017e8 <concatenate>
 8002ccc:	e003      	b.n	8002cd6 <HAL_GPIO_EXTI_Callback+0x1486>
  							  	  } else {
  							  		concatenate(hiTemp, "F");
 8002cce:	498e      	ldr	r1, [pc, #568]	; (8002f08 <HAL_GPIO_EXTI_Callback+0x16b8>)
 8002cd0:	4889      	ldr	r0, [pc, #548]	; (8002ef8 <HAL_GPIO_EXTI_Callback+0x16a8>)
 8002cd2:	f7fe fd89 	bl	80017e8 <concatenate>
  							  	  }
  				hiPressed=0;
 8002cd6:	4b86      	ldr	r3, [pc, #536]	; (8002ef0 <HAL_GPIO_EXTI_Callback+0x16a0>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e136      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
  			}
  		}

  	  } else if (menuState == 13) {
 8002cde:	4b8b      	ldr	r3, [pc, #556]	; (8002f0c <HAL_GPIO_EXTI_Callback+0x16bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b0d      	cmp	r3, #13
 8002ce4:	f040 80d8 	bne.w	8002e98 <HAL_GPIO_EXTI_Callback+0x1648>
    		if (keyState == 0) {
 8002ce8:	4b89      	ldr	r3, [pc, #548]	; (8002f10 <HAL_GPIO_EXTI_Callback+0x16c0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <HAL_GPIO_EXTI_Callback+0x14b6>
    			inputHi++;
 8002cf0:	4b80      	ldr	r3, [pc, #512]	; (8002ef4 <HAL_GPIO_EXTI_Callback+0x16a4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	4a7f      	ldr	r2, [pc, #508]	; (8002ef4 <HAL_GPIO_EXTI_Callback+0x16a4>)
 8002cf8:	6013      	str	r3, [r2, #0]
    			hiPressed = 0;
 8002cfa:	4b7d      	ldr	r3, [pc, #500]	; (8002ef0 <HAL_GPIO_EXTI_Callback+0x16a0>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
    			keyState = 2;
 8002d00:	4b83      	ldr	r3, [pc, #524]	; (8002f10 <HAL_GPIO_EXTI_Callback+0x16c0>)
 8002d02:	2202      	movs	r2, #2
 8002d04:	601a      	str	r2, [r3, #0]
    		}

    		if (keyState == 2) {
 8002d06:	4b82      	ldr	r3, [pc, #520]	; (8002f10 <HAL_GPIO_EXTI_Callback+0x16c0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	f040 811e 	bne.w	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
    			for (int i=0; i<strlen(byeSub); i++) {
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d16:	e00a      	b.n	8002d2e <HAL_GPIO_EXTI_Callback+0x14de>
    				byeSub[i] = '\0';
 8002d18:	4a7e      	ldr	r2, [pc, #504]	; (8002f14 <HAL_GPIO_EXTI_Callback+0x16c4>)
 8002d1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d1e:	4413      	add	r3, r2
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
    			for (int i=0; i<strlen(byeSub); i++) {
 8002d24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d2e:	4879      	ldr	r0, [pc, #484]	; (8002f14 <HAL_GPIO_EXTI_Callback+0x16c4>)
 8002d30:	f7fd fa4e 	bl	80001d0 <strlen>
 8002d34:	4602      	mov	r2, r0
 8002d36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d8ec      	bhi.n	8002d18 <HAL_GPIO_EXTI_Callback+0x14c8>
    			}
    			if (hiPressed == 0) {
 8002d3e:	4b6c      	ldr	r3, [pc, #432]	; (8002ef0 <HAL_GPIO_EXTI_Callback+0x16a0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d135      	bne.n	8002db2 <HAL_GPIO_EXTI_Callback+0x1562>
    				strncpy(byeSub,byeTemp,inputHi-1);
 8002d46:	4b6b      	ldr	r3, [pc, #428]	; (8002ef4 <HAL_GPIO_EXTI_Callback+0x16a4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4972      	ldr	r1, [pc, #456]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002d50:	4870      	ldr	r0, [pc, #448]	; (8002f14 <HAL_GPIO_EXTI_Callback+0x16c4>)
 8002d52:	f00a fdcb 	bl	800d8ec <strncpy>

    				for (int i=0; i<strlen(byeTemp); i++) {
 8002d56:	2300      	movs	r3, #0
 8002d58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d5c:	e00a      	b.n	8002d74 <HAL_GPIO_EXTI_Callback+0x1524>
    					byeTemp[i] = '\0';
 8002d5e:	4a6e      	ldr	r2, [pc, #440]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002d60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d64:	4413      	add	r3, r2
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
    				for (int i=0; i<strlen(byeTemp); i++) {
 8002d6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d74:	4868      	ldr	r0, [pc, #416]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002d76:	f7fd fa2b 	bl	80001d0 <strlen>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d8ec      	bhi.n	8002d5e <HAL_GPIO_EXTI_Callback+0x150e>
    				}

    				concatenate(byeTemp, byeSub);
 8002d84:	4963      	ldr	r1, [pc, #396]	; (8002f14 <HAL_GPIO_EXTI_Callback+0x16c4>)
 8002d86:	4864      	ldr	r0, [pc, #400]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002d88:	f7fe fd2e 	bl	80017e8 <concatenate>
    				if (isBigger == 0) {
 8002d8c:	4b5c      	ldr	r3, [pc, #368]	; (8002f00 <HAL_GPIO_EXTI_Callback+0x16b0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d104      	bne.n	8002d9e <HAL_GPIO_EXTI_Callback+0x154e>
    							  		  concatenate(byeTemp, "d");
 8002d94:	4961      	ldr	r1, [pc, #388]	; (8002f1c <HAL_GPIO_EXTI_Callback+0x16cc>)
 8002d96:	4860      	ldr	r0, [pc, #384]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002d98:	f7fe fd26 	bl	80017e8 <concatenate>
 8002d9c:	e003      	b.n	8002da6 <HAL_GPIO_EXTI_Callback+0x1556>
    							  	  } else {
    							  		concatenate(byeTemp, "D");
 8002d9e:	4960      	ldr	r1, [pc, #384]	; (8002f20 <HAL_GPIO_EXTI_Callback+0x16d0>)
 8002da0:	485d      	ldr	r0, [pc, #372]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002da2:	f7fe fd21 	bl	80017e8 <concatenate>
    							  	  }
    				hiPressed++;
 8002da6:	4b52      	ldr	r3, [pc, #328]	; (8002ef0 <HAL_GPIO_EXTI_Callback+0x16a0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3301      	adds	r3, #1
 8002dac:	4a50      	ldr	r2, [pc, #320]	; (8002ef0 <HAL_GPIO_EXTI_Callback+0x16a0>)
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	e0cc      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
    			} else if (hiPressed == 1) {
 8002db2:	4b4f      	ldr	r3, [pc, #316]	; (8002ef0 <HAL_GPIO_EXTI_Callback+0x16a0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d135      	bne.n	8002e26 <HAL_GPIO_EXTI_Callback+0x15d6>
    				strncpy(byeSub, byeTemp, inputHi-1);
 8002dba:	4b4e      	ldr	r3, [pc, #312]	; (8002ef4 <HAL_GPIO_EXTI_Callback+0x16a4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4955      	ldr	r1, [pc, #340]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002dc4:	4853      	ldr	r0, [pc, #332]	; (8002f14 <HAL_GPIO_EXTI_Callback+0x16c4>)
 8002dc6:	f00a fd91 	bl	800d8ec <strncpy>

    				for (int i=0; i<strlen(byeTemp); i++) {
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dd0:	e00a      	b.n	8002de8 <HAL_GPIO_EXTI_Callback+0x1598>
    					byeTemp[i] = '\0';
 8002dd2:	4a51      	ldr	r2, [pc, #324]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002dd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dd8:	4413      	add	r3, r2
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
    				for (int i=0; i<strlen(byeTemp); i++) {
 8002dde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002de2:	3301      	adds	r3, #1
 8002de4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002de8:	484b      	ldr	r0, [pc, #300]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002dea:	f7fd f9f1 	bl	80001d0 <strlen>
 8002dee:	4602      	mov	r2, r0
 8002df0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d8ec      	bhi.n	8002dd2 <HAL_GPIO_EXTI_Callback+0x1582>
    				}

    				concatenate(byeTemp, byeSub);
 8002df8:	4946      	ldr	r1, [pc, #280]	; (8002f14 <HAL_GPIO_EXTI_Callback+0x16c4>)
 8002dfa:	4847      	ldr	r0, [pc, #284]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002dfc:	f7fe fcf4 	bl	80017e8 <concatenate>
    				if (isBigger == 0) {
 8002e00:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <HAL_GPIO_EXTI_Callback+0x16b0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <HAL_GPIO_EXTI_Callback+0x15c2>
    							  		  concatenate(byeTemp, "e");
 8002e08:	4946      	ldr	r1, [pc, #280]	; (8002f24 <HAL_GPIO_EXTI_Callback+0x16d4>)
 8002e0a:	4843      	ldr	r0, [pc, #268]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002e0c:	f7fe fcec 	bl	80017e8 <concatenate>
 8002e10:	e003      	b.n	8002e1a <HAL_GPIO_EXTI_Callback+0x15ca>
    							  	  } else {
    							  		concatenate(byeTemp, "E");
 8002e12:	4945      	ldr	r1, [pc, #276]	; (8002f28 <HAL_GPIO_EXTI_Callback+0x16d8>)
 8002e14:	4840      	ldr	r0, [pc, #256]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002e16:	f7fe fce7 	bl	80017e8 <concatenate>
    							  	  }
    				hiPressed++;
 8002e1a:	4b35      	ldr	r3, [pc, #212]	; (8002ef0 <HAL_GPIO_EXTI_Callback+0x16a0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	4a33      	ldr	r2, [pc, #204]	; (8002ef0 <HAL_GPIO_EXTI_Callback+0x16a0>)
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	e092      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
    			} else if (hiPressed == 2) {
 8002e26:	4b32      	ldr	r3, [pc, #200]	; (8002ef0 <HAL_GPIO_EXTI_Callback+0x16a0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	f040 808e 	bne.w	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
    				strncpy(byeSub, byeTemp, inputHi-1);
 8002e30:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <HAL_GPIO_EXTI_Callback+0x16a4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	461a      	mov	r2, r3
 8002e38:	4937      	ldr	r1, [pc, #220]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002e3a:	4836      	ldr	r0, [pc, #216]	; (8002f14 <HAL_GPIO_EXTI_Callback+0x16c4>)
 8002e3c:	f00a fd56 	bl	800d8ec <strncpy>
    				for (int i=0; i<strlen(byeTemp); i++) {
 8002e40:	2300      	movs	r3, #0
 8002e42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002e46:	e00a      	b.n	8002e5e <HAL_GPIO_EXTI_Callback+0x160e>
    				  	  hiTemp[i] = '\0';
 8002e48:	4a2b      	ldr	r2, [pc, #172]	; (8002ef8 <HAL_GPIO_EXTI_Callback+0x16a8>)
 8002e4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e4e:	4413      	add	r3, r2
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
    				for (int i=0; i<strlen(byeTemp); i++) {
 8002e54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e58:	3301      	adds	r3, #1
 8002e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002e5e:	482e      	ldr	r0, [pc, #184]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002e60:	f7fd f9b6 	bl	80001d0 <strlen>
 8002e64:	4602      	mov	r2, r0
 8002e66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d8ec      	bhi.n	8002e48 <HAL_GPIO_EXTI_Callback+0x15f8>
    				 }
    				concatenate(byeTemp, byeSub);
 8002e6e:	4929      	ldr	r1, [pc, #164]	; (8002f14 <HAL_GPIO_EXTI_Callback+0x16c4>)
 8002e70:	4829      	ldr	r0, [pc, #164]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002e72:	f7fe fcb9 	bl	80017e8 <concatenate>
    				if (isBigger == 0) {
 8002e76:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <HAL_GPIO_EXTI_Callback+0x16b0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d104      	bne.n	8002e88 <HAL_GPIO_EXTI_Callback+0x1638>
    							  		  concatenate(byeTemp, "f");
 8002e7e:	4921      	ldr	r1, [pc, #132]	; (8002f04 <HAL_GPIO_EXTI_Callback+0x16b4>)
 8002e80:	4825      	ldr	r0, [pc, #148]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002e82:	f7fe fcb1 	bl	80017e8 <concatenate>
 8002e86:	e003      	b.n	8002e90 <HAL_GPIO_EXTI_Callback+0x1640>
    							  	  } else {
    							  		concatenate(byeTemp, "F");
 8002e88:	491f      	ldr	r1, [pc, #124]	; (8002f08 <HAL_GPIO_EXTI_Callback+0x16b8>)
 8002e8a:	4823      	ldr	r0, [pc, #140]	; (8002f18 <HAL_GPIO_EXTI_Callback+0x16c8>)
 8002e8c:	f7fe fcac 	bl	80017e8 <concatenate>
    							  	  }
    				hiPressed=0;
 8002e90:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <HAL_GPIO_EXTI_Callback+0x16a0>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	e059      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
    			}
    		}

    	  } else if (menuState == 14) {
 8002e98:	4b1c      	ldr	r3, [pc, #112]	; (8002f0c <HAL_GPIO_EXTI_Callback+0x16bc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b0e      	cmp	r3, #14
 8002e9e:	d106      	bne.n	8002eae <HAL_GPIO_EXTI_Callback+0x165e>
    		  s1.isSleep = 1;
 8002ea0:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <HAL_GPIO_EXTI_Callback+0x16dc>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
    		  menuState = 15;
 8002ea6:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_GPIO_EXTI_Callback+0x16bc>)
 8002ea8:	220f      	movs	r2, #15
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	e04e      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
    	  } else if (menuState == 15) {
 8002eae:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <HAL_GPIO_EXTI_Callback+0x16bc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	d106      	bne.n	8002ec4 <HAL_GPIO_EXTI_Callback+0x1674>
    		  s1.buzzerForPir = 1;
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <HAL_GPIO_EXTI_Callback+0x16dc>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	605a      	str	r2, [r3, #4]
    		  menuState = 16;
 8002ebc:	4b13      	ldr	r3, [pc, #76]	; (8002f0c <HAL_GPIO_EXTI_Callback+0x16bc>)
 8002ebe:	2210      	movs	r2, #16
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	e043      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
    	  } else if (menuState == 16) {
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <HAL_GPIO_EXTI_Callback+0x16bc>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b10      	cmp	r3, #16
 8002eca:	d106      	bne.n	8002eda <HAL_GPIO_EXTI_Callback+0x168a>
    		  s1.buzzerFortemp = 1;
 8002ecc:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <HAL_GPIO_EXTI_Callback+0x16dc>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	609a      	str	r2, [r3, #8]
    		  menuState = 17;
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <HAL_GPIO_EXTI_Callback+0x16bc>)
 8002ed4:	2211      	movs	r2, #17
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	e038      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
    	  } else if (menuState == 17) {
 8002eda:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <HAL_GPIO_EXTI_Callback+0x16bc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b11      	cmp	r3, #17
 8002ee0:	d126      	bne.n	8002f30 <HAL_GPIO_EXTI_Callback+0x16e0>
    		  s1.Pir = 1;
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_GPIO_EXTI_Callback+0x16dc>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	60da      	str	r2, [r3, #12]
    		  menuState = 18;
 8002ee8:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <HAL_GPIO_EXTI_Callback+0x16bc>)
 8002eea:	2212      	movs	r2, #18
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e02d      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
 8002ef0:	20000764 	.word	0x20000764
 8002ef4:	20000760 	.word	0x20000760
 8002ef8:	20000014 	.word	0x20000014
 8002efc:	200006ec 	.word	0x200006ec
 8002f00:	2000076c 	.word	0x2000076c
 8002f04:	0800e40c 	.word	0x0800e40c
 8002f08:	0800e410 	.word	0x0800e410
 8002f0c:	2000000c 	.word	0x2000000c
 8002f10:	20000768 	.word	0x20000768
 8002f14:	20000700 	.word	0x20000700
 8002f18:	20000028 	.word	0x20000028
 8002f1c:	0800e3fc 	.word	0x0800e3fc
 8002f20:	0800e400 	.word	0x0800e400
 8002f24:	0800e404 	.word	0x0800e404
 8002f28:	0800e408 	.word	0x0800e408
 8002f2c:	200007a4 	.word	0x200007a4
    	  } else if (menuState = 18) {
 8002f30:	4b92      	ldr	r3, [pc, #584]	; (800317c <HAL_GPIO_EXTI_Callback+0x192c>)
 8002f32:	2212      	movs	r2, #18
 8002f34:	601a      	str	r2, [r3, #0]
    		  if (s1.LED2 == 0) {
 8002f36:	4b92      	ldr	r3, [pc, #584]	; (8003180 <HAL_GPIO_EXTI_Callback+0x1930>)
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d103      	bne.n	8002f46 <HAL_GPIO_EXTI_Callback+0x16f6>
    			  s1.LED2 = 1;
 8002f3e:	4b90      	ldr	r3, [pc, #576]	; (8003180 <HAL_GPIO_EXTI_Callback+0x1930>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	615a      	str	r2, [r3, #20]
 8002f44:	e002      	b.n	8002f4c <HAL_GPIO_EXTI_Callback+0x16fc>
    		  } else {
    			  s1.LED2 = 0;
 8002f46:	4b8e      	ldr	r3, [pc, #568]	; (8003180 <HAL_GPIO_EXTI_Callback+0x1930>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	615a      	str	r2, [r3, #20]
    		  }
    	  }
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 8002f4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f50:	488c      	ldr	r0, [pc, #560]	; (8003184 <HAL_GPIO_EXTI_Callback+0x1934>)
 8002f52:	f006 f885 	bl	8009060 <HAL_GPIO_TogglePin>
    break;
 8002f56:	f001 bff2 	b.w	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
  case 6:
	  //6
	  if (menuState != -2 && menuState != -3) {
 8002f5a:	4b88      	ldr	r3, [pc, #544]	; (800317c <HAL_GPIO_EXTI_Callback+0x192c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f113 0f02 	cmn.w	r3, #2
 8002f62:	d007      	beq.n	8002f74 <HAL_GPIO_EXTI_Callback+0x1724>
 8002f64:	4b85      	ldr	r3, [pc, #532]	; (800317c <HAL_GPIO_EXTI_Callback+0x192c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f113 0f03 	cmn.w	r3, #3
 8002f6c:	d002      	beq.n	8002f74 <HAL_GPIO_EXTI_Callback+0x1724>
	  		  count=0;
 8002f6e:	4b86      	ldr	r3, [pc, #536]	; (8003188 <HAL_GPIO_EXTI_Callback+0x1938>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
	  	  }
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 8002f74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f78:	4882      	ldr	r0, [pc, #520]	; (8003184 <HAL_GPIO_EXTI_Callback+0x1934>)
 8002f7a:	f006 f871 	bl	8009060 <HAL_GPIO_TogglePin>
	  if (menuState == 2 && input == 0) {
 8002f7e:	4b7f      	ldr	r3, [pc, #508]	; (800317c <HAL_GPIO_EXTI_Callback+0x192c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d10a      	bne.n	8002f9c <HAL_GPIO_EXTI_Callback+0x174c>
 8002f86:	4b81      	ldr	r3, [pc, #516]	; (800318c <HAL_GPIO_EXTI_Callback+0x193c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_GPIO_EXTI_Callback+0x174c>
	  	tens = 6;
 8002f8e:	4b80      	ldr	r3, [pc, #512]	; (8003190 <HAL_GPIO_EXTI_Callback+0x1940>)
 8002f90:	2206      	movs	r2, #6
 8002f92:	601a      	str	r2, [r3, #0]
	  	input = 1;
 8002f94:	4b7d      	ldr	r3, [pc, #500]	; (800318c <HAL_GPIO_EXTI_Callback+0x193c>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	e2b6      	b.n	800350a <HAL_GPIO_EXTI_Callback+0x1cba>
	  } else if (menuState == 2 && input == 1) {
 8002f9c:	4b77      	ldr	r3, [pc, #476]	; (800317c <HAL_GPIO_EXTI_Callback+0x192c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d10a      	bne.n	8002fba <HAL_GPIO_EXTI_Callback+0x176a>
 8002fa4:	4b79      	ldr	r3, [pc, #484]	; (800318c <HAL_GPIO_EXTI_Callback+0x193c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d106      	bne.n	8002fba <HAL_GPIO_EXTI_Callback+0x176a>
		ones = 6;
 8002fac:	4b79      	ldr	r3, [pc, #484]	; (8003194 <HAL_GPIO_EXTI_Callback+0x1944>)
 8002fae:	2206      	movs	r2, #6
 8002fb0:	601a      	str	r2, [r3, #0]
	  	input = 0;
 8002fb2:	4b76      	ldr	r3, [pc, #472]	; (800318c <HAL_GPIO_EXTI_Callback+0x193c>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	e2a7      	b.n	800350a <HAL_GPIO_EXTI_Callback+0x1cba>
	  } else if (menuState == 20 && input == 0) {
 8002fba:	4b70      	ldr	r3, [pc, #448]	; (800317c <HAL_GPIO_EXTI_Callback+0x192c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b14      	cmp	r3, #20
 8002fc0:	d10a      	bne.n	8002fd8 <HAL_GPIO_EXTI_Callback+0x1788>
 8002fc2:	4b72      	ldr	r3, [pc, #456]	; (800318c <HAL_GPIO_EXTI_Callback+0x193c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_GPIO_EXTI_Callback+0x1788>
		  	tens = 6;
 8002fca:	4b71      	ldr	r3, [pc, #452]	; (8003190 <HAL_GPIO_EXTI_Callback+0x1940>)
 8002fcc:	2206      	movs	r2, #6
 8002fce:	601a      	str	r2, [r3, #0]
		  	input = 1;
 8002fd0:	4b6e      	ldr	r3, [pc, #440]	; (800318c <HAL_GPIO_EXTI_Callback+0x193c>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	e298      	b.n	800350a <HAL_GPIO_EXTI_Callback+0x1cba>
	} else if (menuState == 20 && input == 1) {
 8002fd8:	4b68      	ldr	r3, [pc, #416]	; (800317c <HAL_GPIO_EXTI_Callback+0x192c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b14      	cmp	r3, #20
 8002fde:	d10a      	bne.n	8002ff6 <HAL_GPIO_EXTI_Callback+0x17a6>
 8002fe0:	4b6a      	ldr	r3, [pc, #424]	; (800318c <HAL_GPIO_EXTI_Callback+0x193c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d106      	bne.n	8002ff6 <HAL_GPIO_EXTI_Callback+0x17a6>
			ones = 6;
 8002fe8:	4b6a      	ldr	r3, [pc, #424]	; (8003194 <HAL_GPIO_EXTI_Callback+0x1944>)
 8002fea:	2206      	movs	r2, #6
 8002fec:	601a      	str	r2, [r3, #0]
		  	input = 0;
 8002fee:	4b67      	ldr	r3, [pc, #412]	; (800318c <HAL_GPIO_EXTI_Callback+0x193c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e289      	b.n	800350a <HAL_GPIO_EXTI_Callback+0x1cba>
	  } else if (menuState == 0) {
 8002ff6:	4b61      	ldr	r3, [pc, #388]	; (800317c <HAL_GPIO_EXTI_Callback+0x192c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d108      	bne.n	8003010 <HAL_GPIO_EXTI_Callback+0x17c0>
		  currentState = menuState;
 8002ffe:	4b5f      	ldr	r3, [pc, #380]	; (800317c <HAL_GPIO_EXTI_Callback+0x192c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a65      	ldr	r2, [pc, #404]	; (8003198 <HAL_GPIO_EXTI_Callback+0x1948>)
 8003004:	6013      	str	r3, [r2, #0]
		  menuState = 6;
 8003006:	4b5d      	ldr	r3, [pc, #372]	; (800317c <HAL_GPIO_EXTI_Callback+0x192c>)
 8003008:	2206      	movs	r2, #6
 800300a:	601a      	str	r2, [r3, #0]
		  		  		  hiPressed=0;
		  		  	  }
		  		  }
	  }
    /* code */
    break;
 800300c:	f001 bf5d 	b.w	8004eca <HAL_GPIO_EXTI_Callback+0x367a>
	  } else if (menuState == 12) {
 8003010:	4b5a      	ldr	r3, [pc, #360]	; (800317c <HAL_GPIO_EXTI_Callback+0x192c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b0c      	cmp	r3, #12
 8003016:	f040 813a 	bne.w	800328e <HAL_GPIO_EXTI_Callback+0x1a3e>
		  if (keyState == 0) {
 800301a:	4b60      	ldr	r3, [pc, #384]	; (800319c <HAL_GPIO_EXTI_Callback+0x194c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <HAL_GPIO_EXTI_Callback+0x17e8>
		  			  inputHi++;
 8003022:	4b5f      	ldr	r3, [pc, #380]	; (80031a0 <HAL_GPIO_EXTI_Callback+0x1950>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3301      	adds	r3, #1
 8003028:	4a5d      	ldr	r2, [pc, #372]	; (80031a0 <HAL_GPIO_EXTI_Callback+0x1950>)
 800302a:	6013      	str	r3, [r2, #0]
		  			  hiPressed = 0;
 800302c:	4b5d      	ldr	r3, [pc, #372]	; (80031a4 <HAL_GPIO_EXTI_Callback+0x1954>)
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
		  			  keyState = 6;
 8003032:	4b5a      	ldr	r3, [pc, #360]	; (800319c <HAL_GPIO_EXTI_Callback+0x194c>)
 8003034:	2206      	movs	r2, #6
 8003036:	601a      	str	r2, [r3, #0]
		  		  if (keyState == 6) {
 8003038:	4b58      	ldr	r3, [pc, #352]	; (800319c <HAL_GPIO_EXTI_Callback+0x194c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b06      	cmp	r3, #6
 800303e:	f041 8744 	bne.w	8004eca <HAL_GPIO_EXTI_Callback+0x367a>
		  			  for (int i=0; i<strlen(substring); i++) {
 8003042:	2300      	movs	r3, #0
 8003044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003048:	e00a      	b.n	8003060 <HAL_GPIO_EXTI_Callback+0x1810>
		  			  	  substring[i] = '\0';
 800304a:	4a57      	ldr	r2, [pc, #348]	; (80031a8 <HAL_GPIO_EXTI_Callback+0x1958>)
 800304c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003050:	4413      	add	r3, r2
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
		  			  for (int i=0; i<strlen(substring); i++) {
 8003056:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800305a:	3301      	adds	r3, #1
 800305c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003060:	4851      	ldr	r0, [pc, #324]	; (80031a8 <HAL_GPIO_EXTI_Callback+0x1958>)
 8003062:	f7fd f8b5 	bl	80001d0 <strlen>
 8003066:	4602      	mov	r2, r0
 8003068:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800306c:	429a      	cmp	r2, r3
 800306e:	d8ec      	bhi.n	800304a <HAL_GPIO_EXTI_Callback+0x17fa>
		  		  	  if (hiPressed == 0) {
 8003070:	4b4c      	ldr	r3, [pc, #304]	; (80031a4 <HAL_GPIO_EXTI_Callback+0x1954>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d136      	bne.n	80030e6 <HAL_GPIO_EXTI_Callback+0x1896>
		  		  		  strncpy(substring,hiTemp,inputHi-1);
 8003078:	4b49      	ldr	r3, [pc, #292]	; (80031a0 <HAL_GPIO_EXTI_Callback+0x1950>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3b01      	subs	r3, #1
 800307e:	461a      	mov	r2, r3
 8003080:	494a      	ldr	r1, [pc, #296]	; (80031ac <HAL_GPIO_EXTI_Callback+0x195c>)
 8003082:	4849      	ldr	r0, [pc, #292]	; (80031a8 <HAL_GPIO_EXTI_Callback+0x1958>)
 8003084:	f00a fc32 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 8003088:	2300      	movs	r3, #0
 800308a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800308e:	e00a      	b.n	80030a6 <HAL_GPIO_EXTI_Callback+0x1856>
		  			  	  	  hiTemp[i] = '\0';
 8003090:	4a46      	ldr	r2, [pc, #280]	; (80031ac <HAL_GPIO_EXTI_Callback+0x195c>)
 8003092:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003096:	4413      	add	r3, r2
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 800309c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030a0:	3301      	adds	r3, #1
 80030a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030a6:	4841      	ldr	r0, [pc, #260]	; (80031ac <HAL_GPIO_EXTI_Callback+0x195c>)
 80030a8:	f7fd f892 	bl	80001d0 <strlen>
 80030ac:	4602      	mov	r2, r0
 80030ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d8ec      	bhi.n	8003090 <HAL_GPIO_EXTI_Callback+0x1840>
		  			  	  concatenate(hiTemp, substring);
 80030b6:	493c      	ldr	r1, [pc, #240]	; (80031a8 <HAL_GPIO_EXTI_Callback+0x1958>)
 80030b8:	483c      	ldr	r0, [pc, #240]	; (80031ac <HAL_GPIO_EXTI_Callback+0x195c>)
 80030ba:	f7fe fb95 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 80030be:	4b3c      	ldr	r3, [pc, #240]	; (80031b0 <HAL_GPIO_EXTI_Callback+0x1960>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d104      	bne.n	80030d0 <HAL_GPIO_EXTI_Callback+0x1880>
		  			  				  		  concatenate(hiTemp, "p");
 80030c6:	493b      	ldr	r1, [pc, #236]	; (80031b4 <HAL_GPIO_EXTI_Callback+0x1964>)
 80030c8:	4838      	ldr	r0, [pc, #224]	; (80031ac <HAL_GPIO_EXTI_Callback+0x195c>)
 80030ca:	f7fe fb8d 	bl	80017e8 <concatenate>
 80030ce:	e003      	b.n	80030d8 <HAL_GPIO_EXTI_Callback+0x1888>
		  			  				  		concatenate(hiTemp, "P");
 80030d0:	4939      	ldr	r1, [pc, #228]	; (80031b8 <HAL_GPIO_EXTI_Callback+0x1968>)
 80030d2:	4836      	ldr	r0, [pc, #216]	; (80031ac <HAL_GPIO_EXTI_Callback+0x195c>)
 80030d4:	f7fe fb88 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 80030d8:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <HAL_GPIO_EXTI_Callback+0x1954>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <HAL_GPIO_EXTI_Callback+0x1954>)
 80030e0:	6013      	str	r3, [r2, #0]
    break;
 80030e2:	f001 bef2 	b.w	8004eca <HAL_GPIO_EXTI_Callback+0x367a>
		  		  	  } else if (hiPressed == 1) {
 80030e6:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <HAL_GPIO_EXTI_Callback+0x1954>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d136      	bne.n	800315c <HAL_GPIO_EXTI_Callback+0x190c>
		  			  	  strncpy(substring,hiTemp,inputHi-1);
 80030ee:	4b2c      	ldr	r3, [pc, #176]	; (80031a0 <HAL_GPIO_EXTI_Callback+0x1950>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	461a      	mov	r2, r3
 80030f6:	492d      	ldr	r1, [pc, #180]	; (80031ac <HAL_GPIO_EXTI_Callback+0x195c>)
 80030f8:	482b      	ldr	r0, [pc, #172]	; (80031a8 <HAL_GPIO_EXTI_Callback+0x1958>)
 80030fa:	f00a fbf7 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 80030fe:	2300      	movs	r3, #0
 8003100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003104:	e00a      	b.n	800311c <HAL_GPIO_EXTI_Callback+0x18cc>
		  				  	  hiTemp[i] = '\0';
 8003106:	4a29      	ldr	r2, [pc, #164]	; (80031ac <HAL_GPIO_EXTI_Callback+0x195c>)
 8003108:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800310c:	4413      	add	r3, r2
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 8003112:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003116:	3301      	adds	r3, #1
 8003118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800311c:	4823      	ldr	r0, [pc, #140]	; (80031ac <HAL_GPIO_EXTI_Callback+0x195c>)
 800311e:	f7fd f857 	bl	80001d0 <strlen>
 8003122:	4602      	mov	r2, r0
 8003124:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003128:	429a      	cmp	r2, r3
 800312a:	d8ec      	bhi.n	8003106 <HAL_GPIO_EXTI_Callback+0x18b6>
		  			  	  concatenate(hiTemp, substring);
 800312c:	491e      	ldr	r1, [pc, #120]	; (80031a8 <HAL_GPIO_EXTI_Callback+0x1958>)
 800312e:	481f      	ldr	r0, [pc, #124]	; (80031ac <HAL_GPIO_EXTI_Callback+0x195c>)
 8003130:	f7fe fb5a 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 8003134:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <HAL_GPIO_EXTI_Callback+0x1960>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d104      	bne.n	8003146 <HAL_GPIO_EXTI_Callback+0x18f6>
		  			  				  		  concatenate(hiTemp, "q");
 800313c:	491f      	ldr	r1, [pc, #124]	; (80031bc <HAL_GPIO_EXTI_Callback+0x196c>)
 800313e:	481b      	ldr	r0, [pc, #108]	; (80031ac <HAL_GPIO_EXTI_Callback+0x195c>)
 8003140:	f7fe fb52 	bl	80017e8 <concatenate>
 8003144:	e003      	b.n	800314e <HAL_GPIO_EXTI_Callback+0x18fe>
		  			  				  		concatenate(hiTemp, "Q");
 8003146:	491e      	ldr	r1, [pc, #120]	; (80031c0 <HAL_GPIO_EXTI_Callback+0x1970>)
 8003148:	4818      	ldr	r0, [pc, #96]	; (80031ac <HAL_GPIO_EXTI_Callback+0x195c>)
 800314a:	f7fe fb4d 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <HAL_GPIO_EXTI_Callback+0x1954>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3301      	adds	r3, #1
 8003154:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <HAL_GPIO_EXTI_Callback+0x1954>)
 8003156:	6013      	str	r3, [r2, #0]
    break;
 8003158:	f001 beb7 	b.w	8004eca <HAL_GPIO_EXTI_Callback+0x367a>
		  		  	  } else if(hiPressed == 2) {
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_GPIO_EXTI_Callback+0x1954>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d15a      	bne.n	800321a <HAL_GPIO_EXTI_Callback+0x19ca>
		  		  		  strncpy(substring, hiTemp, inputHi-1);
 8003164:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <HAL_GPIO_EXTI_Callback+0x1950>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3b01      	subs	r3, #1
 800316a:	461a      	mov	r2, r3
 800316c:	490f      	ldr	r1, [pc, #60]	; (80031ac <HAL_GPIO_EXTI_Callback+0x195c>)
 800316e:	480e      	ldr	r0, [pc, #56]	; (80031a8 <HAL_GPIO_EXTI_Callback+0x1958>)
 8003170:	f00a fbbc 	bl	800d8ec <strncpy>
		  		  		  for (int i=0; i<strlen(hiTemp); i++) {
 8003174:	2300      	movs	r3, #0
 8003176:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800317a:	e02e      	b.n	80031da <HAL_GPIO_EXTI_Callback+0x198a>
 800317c:	2000000c 	.word	0x2000000c
 8003180:	200007a4 	.word	0x200007a4
 8003184:	48001000 	.word	0x48001000
 8003188:	20000728 	.word	0x20000728
 800318c:	200006a8 	.word	0x200006a8
 8003190:	2000069c 	.word	0x2000069c
 8003194:	20000698 	.word	0x20000698
 8003198:	2000073c 	.word	0x2000073c
 800319c:	20000768 	.word	0x20000768
 80031a0:	20000760 	.word	0x20000760
 80031a4:	20000764 	.word	0x20000764
 80031a8:	200006ec 	.word	0x200006ec
 80031ac:	20000014 	.word	0x20000014
 80031b0:	2000076c 	.word	0x2000076c
 80031b4:	0800e414 	.word	0x0800e414
 80031b8:	0800e418 	.word	0x0800e418
 80031bc:	0800e41c 	.word	0x0800e41c
 80031c0:	0800e420 	.word	0x0800e420
		  		  			  hiTemp[i] = '\0';
 80031c4:	4aab      	ldr	r2, [pc, #684]	; (8003474 <HAL_GPIO_EXTI_Callback+0x1c24>)
 80031c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031ca:	4413      	add	r3, r2
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
		  		  		  for (int i=0; i<strlen(hiTemp); i++) {
 80031d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031d4:	3301      	adds	r3, #1
 80031d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031da:	48a6      	ldr	r0, [pc, #664]	; (8003474 <HAL_GPIO_EXTI_Callback+0x1c24>)
 80031dc:	f7fc fff8 	bl	80001d0 <strlen>
 80031e0:	4602      	mov	r2, r0
 80031e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d8ec      	bhi.n	80031c4 <HAL_GPIO_EXTI_Callback+0x1974>
		  		  		  concatenate(hiTemp, substring);
 80031ea:	49a3      	ldr	r1, [pc, #652]	; (8003478 <HAL_GPIO_EXTI_Callback+0x1c28>)
 80031ec:	48a1      	ldr	r0, [pc, #644]	; (8003474 <HAL_GPIO_EXTI_Callback+0x1c24>)
 80031ee:	f7fe fafb 	bl	80017e8 <concatenate>
		  		  		if (isBigger == 0) {
 80031f2:	4ba2      	ldr	r3, [pc, #648]	; (800347c <HAL_GPIO_EXTI_Callback+0x1c2c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d104      	bne.n	8003204 <HAL_GPIO_EXTI_Callback+0x19b4>
		  		  					  		  concatenate(hiTemp, "r");
 80031fa:	49a1      	ldr	r1, [pc, #644]	; (8003480 <HAL_GPIO_EXTI_Callback+0x1c30>)
 80031fc:	489d      	ldr	r0, [pc, #628]	; (8003474 <HAL_GPIO_EXTI_Callback+0x1c24>)
 80031fe:	f7fe faf3 	bl	80017e8 <concatenate>
 8003202:	e003      	b.n	800320c <HAL_GPIO_EXTI_Callback+0x19bc>
		  		  					  		concatenate(hiTemp, "R");
 8003204:	499f      	ldr	r1, [pc, #636]	; (8003484 <HAL_GPIO_EXTI_Callback+0x1c34>)
 8003206:	489b      	ldr	r0, [pc, #620]	; (8003474 <HAL_GPIO_EXTI_Callback+0x1c24>)
 8003208:	f7fe faee 	bl	80017e8 <concatenate>
		  		  		  hiPressed++;
 800320c:	4b9e      	ldr	r3, [pc, #632]	; (8003488 <HAL_GPIO_EXTI_Callback+0x1c38>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3301      	adds	r3, #1
 8003212:	4a9d      	ldr	r2, [pc, #628]	; (8003488 <HAL_GPIO_EXTI_Callback+0x1c38>)
 8003214:	6013      	str	r3, [r2, #0]
    break;
 8003216:	f001 be58 	b.w	8004eca <HAL_GPIO_EXTI_Callback+0x367a>
		  		  	  } else if (hiPressed == 3) {
 800321a:	4b9b      	ldr	r3, [pc, #620]	; (8003488 <HAL_GPIO_EXTI_Callback+0x1c38>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b03      	cmp	r3, #3
 8003220:	f041 8653 	bne.w	8004eca <HAL_GPIO_EXTI_Callback+0x367a>
		  		  		  strncpy(substring, hiTemp, inputHi-1);
 8003224:	4b99      	ldr	r3, [pc, #612]	; (800348c <HAL_GPIO_EXTI_Callback+0x1c3c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3b01      	subs	r3, #1
 800322a:	461a      	mov	r2, r3
 800322c:	4991      	ldr	r1, [pc, #580]	; (8003474 <HAL_GPIO_EXTI_Callback+0x1c24>)
 800322e:	4892      	ldr	r0, [pc, #584]	; (8003478 <HAL_GPIO_EXTI_Callback+0x1c28>)
 8003230:	f00a fb5c 	bl	800d8ec <strncpy>
		  		  		  for (int i=0; i<strlen(hiTemp); i++) {
 8003234:	2300      	movs	r3, #0
 8003236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800323a:	e00a      	b.n	8003252 <HAL_GPIO_EXTI_Callback+0x1a02>
		  		  			  hiTemp[i] = '\0';
 800323c:	4a8d      	ldr	r2, [pc, #564]	; (8003474 <HAL_GPIO_EXTI_Callback+0x1c24>)
 800323e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003242:	4413      	add	r3, r2
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
		  		  		  for (int i=0; i<strlen(hiTemp); i++) {
 8003248:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800324c:	3301      	adds	r3, #1
 800324e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003252:	4888      	ldr	r0, [pc, #544]	; (8003474 <HAL_GPIO_EXTI_Callback+0x1c24>)
 8003254:	f7fc ffbc 	bl	80001d0 <strlen>
 8003258:	4602      	mov	r2, r0
 800325a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800325e:	429a      	cmp	r2, r3
 8003260:	d8ec      	bhi.n	800323c <HAL_GPIO_EXTI_Callback+0x19ec>
		  		  		  concatenate(hiTemp, substring);
 8003262:	4985      	ldr	r1, [pc, #532]	; (8003478 <HAL_GPIO_EXTI_Callback+0x1c28>)
 8003264:	4883      	ldr	r0, [pc, #524]	; (8003474 <HAL_GPIO_EXTI_Callback+0x1c24>)
 8003266:	f7fe fabf 	bl	80017e8 <concatenate>
		  		  		if (isBigger == 0) {
 800326a:	4b84      	ldr	r3, [pc, #528]	; (800347c <HAL_GPIO_EXTI_Callback+0x1c2c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d104      	bne.n	800327c <HAL_GPIO_EXTI_Callback+0x1a2c>
		  		  					  		  concatenate(hiTemp, "s");
 8003272:	4987      	ldr	r1, [pc, #540]	; (8003490 <HAL_GPIO_EXTI_Callback+0x1c40>)
 8003274:	487f      	ldr	r0, [pc, #508]	; (8003474 <HAL_GPIO_EXTI_Callback+0x1c24>)
 8003276:	f7fe fab7 	bl	80017e8 <concatenate>
 800327a:	e003      	b.n	8003284 <HAL_GPIO_EXTI_Callback+0x1a34>
		  		  					  		concatenate(hiTemp, "S");
 800327c:	4985      	ldr	r1, [pc, #532]	; (8003494 <HAL_GPIO_EXTI_Callback+0x1c44>)
 800327e:	487d      	ldr	r0, [pc, #500]	; (8003474 <HAL_GPIO_EXTI_Callback+0x1c24>)
 8003280:	f7fe fab2 	bl	80017e8 <concatenate>
		  		  		  hiPressed=0;
 8003284:	4b80      	ldr	r3, [pc, #512]	; (8003488 <HAL_GPIO_EXTI_Callback+0x1c38>)
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
    break;
 800328a:	f001 be1e 	b.w	8004eca <HAL_GPIO_EXTI_Callback+0x367a>
	  } else if (menuState == 13) {
 800328e:	4b82      	ldr	r3, [pc, #520]	; (8003498 <HAL_GPIO_EXTI_Callback+0x1c48>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b0d      	cmp	r3, #13
 8003294:	f041 8619 	bne.w	8004eca <HAL_GPIO_EXTI_Callback+0x367a>
		  if (keyState == 0) {
 8003298:	4b80      	ldr	r3, [pc, #512]	; (800349c <HAL_GPIO_EXTI_Callback+0x1c4c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <HAL_GPIO_EXTI_Callback+0x1a66>
		  			  inputHi++;
 80032a0:	4b7a      	ldr	r3, [pc, #488]	; (800348c <HAL_GPIO_EXTI_Callback+0x1c3c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3301      	adds	r3, #1
 80032a6:	4a79      	ldr	r2, [pc, #484]	; (800348c <HAL_GPIO_EXTI_Callback+0x1c3c>)
 80032a8:	6013      	str	r3, [r2, #0]
		  			  hiPressed = 0;
 80032aa:	4b77      	ldr	r3, [pc, #476]	; (8003488 <HAL_GPIO_EXTI_Callback+0x1c38>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
		  			  keyState = 6;
 80032b0:	4b7a      	ldr	r3, [pc, #488]	; (800349c <HAL_GPIO_EXTI_Callback+0x1c4c>)
 80032b2:	2206      	movs	r2, #6
 80032b4:	601a      	str	r2, [r3, #0]
		  		  if (keyState == 6) {
 80032b6:	4b79      	ldr	r3, [pc, #484]	; (800349c <HAL_GPIO_EXTI_Callback+0x1c4c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	f041 8605 	bne.w	8004eca <HAL_GPIO_EXTI_Callback+0x367a>
		  			  for (int i=0; i<strlen(byeSub); i++) {
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80032c6:	e00a      	b.n	80032de <HAL_GPIO_EXTI_Callback+0x1a8e>
		  				byeSub[i] = '\0';
 80032c8:	4a75      	ldr	r2, [pc, #468]	; (80034a0 <HAL_GPIO_EXTI_Callback+0x1c50>)
 80032ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032ce:	4413      	add	r3, r2
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
		  			  for (int i=0; i<strlen(byeSub); i++) {
 80032d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032d8:	3301      	adds	r3, #1
 80032da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80032de:	4870      	ldr	r0, [pc, #448]	; (80034a0 <HAL_GPIO_EXTI_Callback+0x1c50>)
 80032e0:	f7fc ff76 	bl	80001d0 <strlen>
 80032e4:	4602      	mov	r2, r0
 80032e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d8ec      	bhi.n	80032c8 <HAL_GPIO_EXTI_Callback+0x1a78>
		  		  	  if (hiPressed == 0) {
 80032ee:	4b66      	ldr	r3, [pc, #408]	; (8003488 <HAL_GPIO_EXTI_Callback+0x1c38>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d136      	bne.n	8003364 <HAL_GPIO_EXTI_Callback+0x1b14>
		  		  		  strncpy(byeSub,byeTemp,inputHi-1);
 80032f6:	4b65      	ldr	r3, [pc, #404]	; (800348c <HAL_GPIO_EXTI_Callback+0x1c3c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	461a      	mov	r2, r3
 80032fe:	4969      	ldr	r1, [pc, #420]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 8003300:	4867      	ldr	r0, [pc, #412]	; (80034a0 <HAL_GPIO_EXTI_Callback+0x1c50>)
 8003302:	f00a faf3 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 8003306:	2300      	movs	r3, #0
 8003308:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800330c:	e00a      	b.n	8003324 <HAL_GPIO_EXTI_Callback+0x1ad4>
		  			  		byeTemp[i] = '\0';
 800330e:	4a65      	ldr	r2, [pc, #404]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 8003310:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003314:	4413      	add	r3, r2
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 800331a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800331e:	3301      	adds	r3, #1
 8003320:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003324:	485f      	ldr	r0, [pc, #380]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 8003326:	f7fc ff53 	bl	80001d0 <strlen>
 800332a:	4602      	mov	r2, r0
 800332c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003330:	429a      	cmp	r2, r3
 8003332:	d8ec      	bhi.n	800330e <HAL_GPIO_EXTI_Callback+0x1abe>
		  			  	  concatenate(byeTemp, byeSub);
 8003334:	495a      	ldr	r1, [pc, #360]	; (80034a0 <HAL_GPIO_EXTI_Callback+0x1c50>)
 8003336:	485b      	ldr	r0, [pc, #364]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 8003338:	f7fe fa56 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 800333c:	4b4f      	ldr	r3, [pc, #316]	; (800347c <HAL_GPIO_EXTI_Callback+0x1c2c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d104      	bne.n	800334e <HAL_GPIO_EXTI_Callback+0x1afe>
		  			  				  		  concatenate(byeTemp, "p");
 8003344:	4958      	ldr	r1, [pc, #352]	; (80034a8 <HAL_GPIO_EXTI_Callback+0x1c58>)
 8003346:	4857      	ldr	r0, [pc, #348]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 8003348:	f7fe fa4e 	bl	80017e8 <concatenate>
 800334c:	e003      	b.n	8003356 <HAL_GPIO_EXTI_Callback+0x1b06>
		  			  				  		concatenate(byeTemp, "P");
 800334e:	4957      	ldr	r1, [pc, #348]	; (80034ac <HAL_GPIO_EXTI_Callback+0x1c5c>)
 8003350:	4854      	ldr	r0, [pc, #336]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 8003352:	f7fe fa49 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 8003356:	4b4c      	ldr	r3, [pc, #304]	; (8003488 <HAL_GPIO_EXTI_Callback+0x1c38>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3301      	adds	r3, #1
 800335c:	4a4a      	ldr	r2, [pc, #296]	; (8003488 <HAL_GPIO_EXTI_Callback+0x1c38>)
 800335e:	6013      	str	r3, [r2, #0]
    break;
 8003360:	f001 bdb3 	b.w	8004eca <HAL_GPIO_EXTI_Callback+0x367a>
		  		  	  } else if (hiPressed == 1) {
 8003364:	4b48      	ldr	r3, [pc, #288]	; (8003488 <HAL_GPIO_EXTI_Callback+0x1c38>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d136      	bne.n	80033da <HAL_GPIO_EXTI_Callback+0x1b8a>
		  			  	  strncpy(byeSub,byeTemp,inputHi-1);
 800336c:	4b47      	ldr	r3, [pc, #284]	; (800348c <HAL_GPIO_EXTI_Callback+0x1c3c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3b01      	subs	r3, #1
 8003372:	461a      	mov	r2, r3
 8003374:	494b      	ldr	r1, [pc, #300]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 8003376:	484a      	ldr	r0, [pc, #296]	; (80034a0 <HAL_GPIO_EXTI_Callback+0x1c50>)
 8003378:	f00a fab8 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 800337c:	2300      	movs	r3, #0
 800337e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003382:	e00a      	b.n	800339a <HAL_GPIO_EXTI_Callback+0x1b4a>
		  			  		byeTemp[i] = '\0';
 8003384:	4a47      	ldr	r2, [pc, #284]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 8003386:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800338a:	4413      	add	r3, r2
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 8003390:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003394:	3301      	adds	r3, #1
 8003396:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800339a:	4842      	ldr	r0, [pc, #264]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 800339c:	f7fc ff18 	bl	80001d0 <strlen>
 80033a0:	4602      	mov	r2, r0
 80033a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d8ec      	bhi.n	8003384 <HAL_GPIO_EXTI_Callback+0x1b34>
		  			  	  concatenate(byeTemp, byeSub);
 80033aa:	493d      	ldr	r1, [pc, #244]	; (80034a0 <HAL_GPIO_EXTI_Callback+0x1c50>)
 80033ac:	483d      	ldr	r0, [pc, #244]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 80033ae:	f7fe fa1b 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 80033b2:	4b32      	ldr	r3, [pc, #200]	; (800347c <HAL_GPIO_EXTI_Callback+0x1c2c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d104      	bne.n	80033c4 <HAL_GPIO_EXTI_Callback+0x1b74>
		  			  				  		  concatenate(byeTemp, "q");
 80033ba:	493d      	ldr	r1, [pc, #244]	; (80034b0 <HAL_GPIO_EXTI_Callback+0x1c60>)
 80033bc:	4839      	ldr	r0, [pc, #228]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 80033be:	f7fe fa13 	bl	80017e8 <concatenate>
 80033c2:	e003      	b.n	80033cc <HAL_GPIO_EXTI_Callback+0x1b7c>
		  			  				  		concatenate(byeTemp, "Q");
 80033c4:	493b      	ldr	r1, [pc, #236]	; (80034b4 <HAL_GPIO_EXTI_Callback+0x1c64>)
 80033c6:	4837      	ldr	r0, [pc, #220]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 80033c8:	f7fe fa0e 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 80033cc:	4b2e      	ldr	r3, [pc, #184]	; (8003488 <HAL_GPIO_EXTI_Callback+0x1c38>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3301      	adds	r3, #1
 80033d2:	4a2d      	ldr	r2, [pc, #180]	; (8003488 <HAL_GPIO_EXTI_Callback+0x1c38>)
 80033d4:	6013      	str	r3, [r2, #0]
    break;
 80033d6:	f001 bd78 	b.w	8004eca <HAL_GPIO_EXTI_Callback+0x367a>
		  		  	  } else if(hiPressed == 2) {
 80033da:	4b2b      	ldr	r3, [pc, #172]	; (8003488 <HAL_GPIO_EXTI_Callback+0x1c38>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d136      	bne.n	8003450 <HAL_GPIO_EXTI_Callback+0x1c00>
		  		  		  strncpy(byeSub, byeTemp, inputHi-1);
 80033e2:	4b2a      	ldr	r3, [pc, #168]	; (800348c <HAL_GPIO_EXTI_Callback+0x1c3c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	461a      	mov	r2, r3
 80033ea:	492e      	ldr	r1, [pc, #184]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 80033ec:	482c      	ldr	r0, [pc, #176]	; (80034a0 <HAL_GPIO_EXTI_Callback+0x1c50>)
 80033ee:	f00a fa7d 	bl	800d8ec <strncpy>
		  		  		  for (int i=0; i<strlen(byeTemp); i++) {
 80033f2:	2300      	movs	r3, #0
 80033f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033f8:	e00a      	b.n	8003410 <HAL_GPIO_EXTI_Callback+0x1bc0>
		  		  			byeTemp[i] = '\0';
 80033fa:	4a2a      	ldr	r2, [pc, #168]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 80033fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003400:	4413      	add	r3, r2
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]
		  		  		  for (int i=0; i<strlen(byeTemp); i++) {
 8003406:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800340a:	3301      	adds	r3, #1
 800340c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003410:	4824      	ldr	r0, [pc, #144]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 8003412:	f7fc fedd 	bl	80001d0 <strlen>
 8003416:	4602      	mov	r2, r0
 8003418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800341c:	429a      	cmp	r2, r3
 800341e:	d8ec      	bhi.n	80033fa <HAL_GPIO_EXTI_Callback+0x1baa>
		  		  		  concatenate(byeTemp, byeSub);
 8003420:	491f      	ldr	r1, [pc, #124]	; (80034a0 <HAL_GPIO_EXTI_Callback+0x1c50>)
 8003422:	4820      	ldr	r0, [pc, #128]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 8003424:	f7fe f9e0 	bl	80017e8 <concatenate>
		  		  		if (isBigger == 0) {
 8003428:	4b14      	ldr	r3, [pc, #80]	; (800347c <HAL_GPIO_EXTI_Callback+0x1c2c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d104      	bne.n	800343a <HAL_GPIO_EXTI_Callback+0x1bea>
		  		  					  		  concatenate(byeTemp, "r");
 8003430:	4913      	ldr	r1, [pc, #76]	; (8003480 <HAL_GPIO_EXTI_Callback+0x1c30>)
 8003432:	481c      	ldr	r0, [pc, #112]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 8003434:	f7fe f9d8 	bl	80017e8 <concatenate>
 8003438:	e003      	b.n	8003442 <HAL_GPIO_EXTI_Callback+0x1bf2>
		  		  					  		concatenate(byeTemp, "R");
 800343a:	4912      	ldr	r1, [pc, #72]	; (8003484 <HAL_GPIO_EXTI_Callback+0x1c34>)
 800343c:	4819      	ldr	r0, [pc, #100]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 800343e:	f7fe f9d3 	bl	80017e8 <concatenate>
		  		  		  hiPressed++;
 8003442:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_GPIO_EXTI_Callback+0x1c38>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3301      	adds	r3, #1
 8003448:	4a0f      	ldr	r2, [pc, #60]	; (8003488 <HAL_GPIO_EXTI_Callback+0x1c38>)
 800344a:	6013      	str	r3, [r2, #0]
    break;
 800344c:	f001 bd3d 	b.w	8004eca <HAL_GPIO_EXTI_Callback+0x367a>
		  		  	  } else if (hiPressed == 3) {
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <HAL_GPIO_EXTI_Callback+0x1c38>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b03      	cmp	r3, #3
 8003456:	f041 8538 	bne.w	8004eca <HAL_GPIO_EXTI_Callback+0x367a>
		  		  		  strncpy(byeSub, byeTemp, inputHi-1);
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <HAL_GPIO_EXTI_Callback+0x1c3c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3b01      	subs	r3, #1
 8003460:	461a      	mov	r2, r3
 8003462:	4910      	ldr	r1, [pc, #64]	; (80034a4 <HAL_GPIO_EXTI_Callback+0x1c54>)
 8003464:	480e      	ldr	r0, [pc, #56]	; (80034a0 <HAL_GPIO_EXTI_Callback+0x1c50>)
 8003466:	f00a fa41 	bl	800d8ec <strncpy>
		  		  		  for (int i=0; i<strlen(byeTemp); i++) {
 800346a:	2300      	movs	r3, #0
 800346c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003470:	e02d      	b.n	80034ce <HAL_GPIO_EXTI_Callback+0x1c7e>
 8003472:	bf00      	nop
 8003474:	20000014 	.word	0x20000014
 8003478:	200006ec 	.word	0x200006ec
 800347c:	2000076c 	.word	0x2000076c
 8003480:	0800e424 	.word	0x0800e424
 8003484:	0800e428 	.word	0x0800e428
 8003488:	20000764 	.word	0x20000764
 800348c:	20000760 	.word	0x20000760
 8003490:	0800e42c 	.word	0x0800e42c
 8003494:	0800e430 	.word	0x0800e430
 8003498:	2000000c 	.word	0x2000000c
 800349c:	20000768 	.word	0x20000768
 80034a0:	20000700 	.word	0x20000700
 80034a4:	20000028 	.word	0x20000028
 80034a8:	0800e414 	.word	0x0800e414
 80034ac:	0800e418 	.word	0x0800e418
 80034b0:	0800e41c 	.word	0x0800e41c
 80034b4:	0800e420 	.word	0x0800e420
		  		  			byeTemp[i] = '\0';
 80034b8:	4a8b      	ldr	r2, [pc, #556]	; (80036e8 <HAL_GPIO_EXTI_Callback+0x1e98>)
 80034ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034be:	4413      	add	r3, r2
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
		  		  		  for (int i=0; i<strlen(byeTemp); i++) {
 80034c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034c8:	3301      	adds	r3, #1
 80034ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034ce:	4886      	ldr	r0, [pc, #536]	; (80036e8 <HAL_GPIO_EXTI_Callback+0x1e98>)
 80034d0:	f7fc fe7e 	bl	80001d0 <strlen>
 80034d4:	4602      	mov	r2, r0
 80034d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034da:	429a      	cmp	r2, r3
 80034dc:	d8ec      	bhi.n	80034b8 <HAL_GPIO_EXTI_Callback+0x1c68>
		  		  		  concatenate(byeTemp, byeSub);
 80034de:	4983      	ldr	r1, [pc, #524]	; (80036ec <HAL_GPIO_EXTI_Callback+0x1e9c>)
 80034e0:	4881      	ldr	r0, [pc, #516]	; (80036e8 <HAL_GPIO_EXTI_Callback+0x1e98>)
 80034e2:	f7fe f981 	bl	80017e8 <concatenate>
		  		  		if (isBigger == 0) {
 80034e6:	4b82      	ldr	r3, [pc, #520]	; (80036f0 <HAL_GPIO_EXTI_Callback+0x1ea0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d104      	bne.n	80034f8 <HAL_GPIO_EXTI_Callback+0x1ca8>
		  		  					  		  concatenate(byeTemp, "s");
 80034ee:	4981      	ldr	r1, [pc, #516]	; (80036f4 <HAL_GPIO_EXTI_Callback+0x1ea4>)
 80034f0:	487d      	ldr	r0, [pc, #500]	; (80036e8 <HAL_GPIO_EXTI_Callback+0x1e98>)
 80034f2:	f7fe f979 	bl	80017e8 <concatenate>
 80034f6:	e003      	b.n	8003500 <HAL_GPIO_EXTI_Callback+0x1cb0>
		  		  					  		concatenate(byeTemp, "S");
 80034f8:	497f      	ldr	r1, [pc, #508]	; (80036f8 <HAL_GPIO_EXTI_Callback+0x1ea8>)
 80034fa:	487b      	ldr	r0, [pc, #492]	; (80036e8 <HAL_GPIO_EXTI_Callback+0x1e98>)
 80034fc:	f7fe f974 	bl	80017e8 <concatenate>
		  		  		  hiPressed=0;
 8003500:	4b7e      	ldr	r3, [pc, #504]	; (80036fc <HAL_GPIO_EXTI_Callback+0x1eac>)
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
    break;
 8003506:	f001 bce0 	b.w	8004eca <HAL_GPIO_EXTI_Callback+0x367a>
 800350a:	f001 bcde 	b.w	8004eca <HAL_GPIO_EXTI_Callback+0x367a>
  case 7:
	  //10
	  if (menuState != -2 && menuState != -3) {
 800350e:	4b7c      	ldr	r3, [pc, #496]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f113 0f02 	cmn.w	r3, #2
 8003516:	d007      	beq.n	8003528 <HAL_GPIO_EXTI_Callback+0x1cd8>
 8003518:	4b79      	ldr	r3, [pc, #484]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f113 0f03 	cmn.w	r3, #3
 8003520:	d002      	beq.n	8003528 <HAL_GPIO_EXTI_Callback+0x1cd8>
	  		  count=0;
 8003522:	4b78      	ldr	r3, [pc, #480]	; (8003704 <HAL_GPIO_EXTI_Callback+0x1eb4>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
	  	  }
	  if (menuState == 12) {
 8003528:	4b75      	ldr	r3, [pc, #468]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b0c      	cmp	r3, #12
 800352e:	d116      	bne.n	800355e <HAL_GPIO_EXTI_Callback+0x1d0e>
	 		  if (keyState == 0) {
 8003530:	4b75      	ldr	r3, [pc, #468]	; (8003708 <HAL_GPIO_EXTI_Callback+0x1eb8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <HAL_GPIO_EXTI_Callback+0x1cee>
	 		  			  keyState = 10;
 8003538:	4b73      	ldr	r3, [pc, #460]	; (8003708 <HAL_GPIO_EXTI_Callback+0x1eb8>)
 800353a:	220a      	movs	r2, #10
 800353c:	601a      	str	r2, [r3, #0]
	 		  		  }

	 		  		  if (keyState == 10) {
 800353e:	4b72      	ldr	r3, [pc, #456]	; (8003708 <HAL_GPIO_EXTI_Callback+0x1eb8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b0a      	cmp	r3, #10
 8003544:	d125      	bne.n	8003592 <HAL_GPIO_EXTI_Callback+0x1d42>
	 		  			  if (isBigger == 0) {
 8003546:	4b6a      	ldr	r3, [pc, #424]	; (80036f0 <HAL_GPIO_EXTI_Callback+0x1ea0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <HAL_GPIO_EXTI_Callback+0x1d06>
	 		  				  isBigger = 1;
 800354e:	4b68      	ldr	r3, [pc, #416]	; (80036f0 <HAL_GPIO_EXTI_Callback+0x1ea0>)
 8003550:	2201      	movs	r2, #1
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e01d      	b.n	8003592 <HAL_GPIO_EXTI_Callback+0x1d42>
	 		  			  } else {
	 		  				  isBigger = 0;
 8003556:	4b66      	ldr	r3, [pc, #408]	; (80036f0 <HAL_GPIO_EXTI_Callback+0x1ea0>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	e019      	b.n	8003592 <HAL_GPIO_EXTI_Callback+0x1d42>
	 		  			  }
	 		  		  }
	 	  } else if (menuState == 13) {
 800355e:	4b68      	ldr	r3, [pc, #416]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b0d      	cmp	r3, #13
 8003564:	d115      	bne.n	8003592 <HAL_GPIO_EXTI_Callback+0x1d42>
	 		  if (keyState == 0) {
 8003566:	4b68      	ldr	r3, [pc, #416]	; (8003708 <HAL_GPIO_EXTI_Callback+0x1eb8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <HAL_GPIO_EXTI_Callback+0x1d24>
	 		  			  keyState = 10;
 800356e:	4b66      	ldr	r3, [pc, #408]	; (8003708 <HAL_GPIO_EXTI_Callback+0x1eb8>)
 8003570:	220a      	movs	r2, #10
 8003572:	601a      	str	r2, [r3, #0]
	 		  		  }

	 		  		  if (keyState == 10) {
 8003574:	4b64      	ldr	r3, [pc, #400]	; (8003708 <HAL_GPIO_EXTI_Callback+0x1eb8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b0a      	cmp	r3, #10
 800357a:	d10a      	bne.n	8003592 <HAL_GPIO_EXTI_Callback+0x1d42>
	 		  			  if (isBigger == 0) {
 800357c:	4b5c      	ldr	r3, [pc, #368]	; (80036f0 <HAL_GPIO_EXTI_Callback+0x1ea0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d103      	bne.n	800358c <HAL_GPIO_EXTI_Callback+0x1d3c>
	 		  				  isBigger = 1;
 8003584:	4b5a      	ldr	r3, [pc, #360]	; (80036f0 <HAL_GPIO_EXTI_Callback+0x1ea0>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	e002      	b.n	8003592 <HAL_GPIO_EXTI_Callback+0x1d42>
	 		  			  } else {
	 		  				  isBigger = 0;
 800358c:	4b58      	ldr	r3, [pc, #352]	; (80036f0 <HAL_GPIO_EXTI_Callback+0x1ea0>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
	 		  			  }
	 		  		  }
	 	  }
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);
 8003592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003596:	485d      	ldr	r0, [pc, #372]	; (800370c <HAL_GPIO_EXTI_Callback+0x1ebc>)
 8003598:	f005 fd62 	bl	8009060 <HAL_GPIO_TogglePin>
    /* code */
    break;
 800359c:	f001 bccf 	b.w	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
  case 8:
	  //14
	  if (menuState != -2 && menuState != -3) {
 80035a0:	4b57      	ldr	r3, [pc, #348]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f113 0f02 	cmn.w	r3, #2
 80035a8:	d007      	beq.n	80035ba <HAL_GPIO_EXTI_Callback+0x1d6a>
 80035aa:	4b55      	ldr	r3, [pc, #340]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f113 0f03 	cmn.w	r3, #3
 80035b2:	d002      	beq.n	80035ba <HAL_GPIO_EXTI_Callback+0x1d6a>
	  		  count=0;
 80035b4:	4b53      	ldr	r3, [pc, #332]	; (8003704 <HAL_GPIO_EXTI_Callback+0x1eb4>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
	  	  }
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
 80035ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035be:	4853      	ldr	r0, [pc, #332]	; (800370c <HAL_GPIO_EXTI_Callback+0x1ebc>)
 80035c0:	f005 fd4e 	bl	8009060 <HAL_GPIO_TogglePin>
    /* code */
    break;
 80035c4:	f001 bcbb 	b.w	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
  case 9:
    /* code */
	  //3
	  if (menuState != -2 && menuState != -3) {
 80035c8:	4b4d      	ldr	r3, [pc, #308]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f113 0f02 	cmn.w	r3, #2
 80035d0:	d007      	beq.n	80035e2 <HAL_GPIO_EXTI_Callback+0x1d92>
 80035d2:	4b4b      	ldr	r3, [pc, #300]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f113 0f03 	cmn.w	r3, #3
 80035da:	d002      	beq.n	80035e2 <HAL_GPIO_EXTI_Callback+0x1d92>
	  		  count=0;
 80035dc:	4b49      	ldr	r3, [pc, #292]	; (8003704 <HAL_GPIO_EXTI_Callback+0x1eb4>)
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
	  	  }
	  if (menuState == 2 && input == 0) {
 80035e2:	4b47      	ldr	r3, [pc, #284]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d10a      	bne.n	8003600 <HAL_GPIO_EXTI_Callback+0x1db0>
 80035ea:	4b49      	ldr	r3, [pc, #292]	; (8003710 <HAL_GPIO_EXTI_Callback+0x1ec0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_GPIO_EXTI_Callback+0x1db0>
	  	tens = 3;
 80035f2:	4b48      	ldr	r3, [pc, #288]	; (8003714 <HAL_GPIO_EXTI_Callback+0x1ec4>)
 80035f4:	2203      	movs	r2, #3
 80035f6:	601a      	str	r2, [r3, #0]
	  	input = 1;
 80035f8:	4b45      	ldr	r3, [pc, #276]	; (8003710 <HAL_GPIO_EXTI_Callback+0x1ec0>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e00d      	b.n	800361c <HAL_GPIO_EXTI_Callback+0x1dcc>
	  } else if (menuState == 2 && input == 1) {
 8003600:	4b3f      	ldr	r3, [pc, #252]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d109      	bne.n	800361c <HAL_GPIO_EXTI_Callback+0x1dcc>
 8003608:	4b41      	ldr	r3, [pc, #260]	; (8003710 <HAL_GPIO_EXTI_Callback+0x1ec0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d105      	bne.n	800361c <HAL_GPIO_EXTI_Callback+0x1dcc>
		ones = 3;
 8003610:	4b41      	ldr	r3, [pc, #260]	; (8003718 <HAL_GPIO_EXTI_Callback+0x1ec8>)
 8003612:	2203      	movs	r2, #3
 8003614:	601a      	str	r2, [r3, #0]
		input = 0;
 8003616:	4b3e      	ldr	r3, [pc, #248]	; (8003710 <HAL_GPIO_EXTI_Callback+0x1ec0>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
	  } if (menuState == 20 && input == 0) {
 800361c:	4b38      	ldr	r3, [pc, #224]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b14      	cmp	r3, #20
 8003622:	d10a      	bne.n	800363a <HAL_GPIO_EXTI_Callback+0x1dea>
 8003624:	4b3a      	ldr	r3, [pc, #232]	; (8003710 <HAL_GPIO_EXTI_Callback+0x1ec0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d106      	bne.n	800363a <HAL_GPIO_EXTI_Callback+0x1dea>
		  	tens = 3;
 800362c:	4b39      	ldr	r3, [pc, #228]	; (8003714 <HAL_GPIO_EXTI_Callback+0x1ec4>)
 800362e:	2203      	movs	r2, #3
 8003630:	601a      	str	r2, [r3, #0]
		  	input = 1;
 8003632:	4b37      	ldr	r3, [pc, #220]	; (8003710 <HAL_GPIO_EXTI_Callback+0x1ec0>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e245      	b.n	8003ac6 <HAL_GPIO_EXTI_Callback+0x2276>
		  } else if (menuState == 20 && input == 1) {
 800363a:	4b31      	ldr	r3, [pc, #196]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b14      	cmp	r3, #20
 8003640:	d10a      	bne.n	8003658 <HAL_GPIO_EXTI_Callback+0x1e08>
 8003642:	4b33      	ldr	r3, [pc, #204]	; (8003710 <HAL_GPIO_EXTI_Callback+0x1ec0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d106      	bne.n	8003658 <HAL_GPIO_EXTI_Callback+0x1e08>
			ones = 3;
 800364a:	4b33      	ldr	r3, [pc, #204]	; (8003718 <HAL_GPIO_EXTI_Callback+0x1ec8>)
 800364c:	2203      	movs	r2, #3
 800364e:	601a      	str	r2, [r3, #0]
			input = 0;
 8003650:	4b2f      	ldr	r3, [pc, #188]	; (8003710 <HAL_GPIO_EXTI_Callback+0x1ec0>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	e236      	b.n	8003ac6 <HAL_GPIO_EXTI_Callback+0x2276>
		  } else if (menuState == 0) {
 8003658:	4b29      	ldr	r3, [pc, #164]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d104      	bne.n	800366a <HAL_GPIO_EXTI_Callback+0x1e1a>
		  menuState = 4;
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 8003662:	2204      	movs	r2, #4
 8003664:	601a      	str	r2, [r3, #0]
			  s1.LED3 = 1;
		  } else {
			  s1.LED3 = 0;
		  }
	  }
    break;
 8003666:	f001 bc32 	b.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
	  } else if (menuState == 4) {
 800366a:	4b25      	ldr	r3, [pc, #148]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b04      	cmp	r3, #4
 8003670:	d119      	bne.n	80036a6 <HAL_GPIO_EXTI_Callback+0x1e56>
		  if (LED3 == 0) {
 8003672:	4b2a      	ldr	r3, [pc, #168]	; (800371c <HAL_GPIO_EXTI_Callback+0x1ecc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <HAL_GPIO_EXTI_Callback+0x1e40>
			  HAL_UART_Transmit(&huart2, "LED3 is off\n", 12, 100);
 800367a:	2364      	movs	r3, #100	; 0x64
 800367c:	220c      	movs	r2, #12
 800367e:	4928      	ldr	r1, [pc, #160]	; (8003720 <HAL_GPIO_EXTI_Callback+0x1ed0>)
 8003680:	4828      	ldr	r0, [pc, #160]	; (8003724 <HAL_GPIO_EXTI_Callback+0x1ed4>)
 8003682:	f008 fe41 	bl	800c308 <HAL_UART_Transmit>
			  LED3 = 1;
 8003686:	4b25      	ldr	r3, [pc, #148]	; (800371c <HAL_GPIO_EXTI_Callback+0x1ecc>)
 8003688:	2201      	movs	r2, #1
 800368a:	601a      	str	r2, [r3, #0]
    break;
 800368c:	f001 bc1f 	b.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
			  HAL_UART_Transmit(&huart2, "LED3 is on\n", 11, 100);
 8003690:	2364      	movs	r3, #100	; 0x64
 8003692:	220b      	movs	r2, #11
 8003694:	4924      	ldr	r1, [pc, #144]	; (8003728 <HAL_GPIO_EXTI_Callback+0x1ed8>)
 8003696:	4823      	ldr	r0, [pc, #140]	; (8003724 <HAL_GPIO_EXTI_Callback+0x1ed4>)
 8003698:	f008 fe36 	bl	800c308 <HAL_UART_Transmit>
			  LED3 = 0;
 800369c:	4b1f      	ldr	r3, [pc, #124]	; (800371c <HAL_GPIO_EXTI_Callback+0x1ecc>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
    break;
 80036a2:	f001 bc14 	b.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
	  } else if (menuState == 5) {
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b05      	cmp	r3, #5
 80036ac:	d14c      	bne.n	8003748 <HAL_GPIO_EXTI_Callback+0x1ef8>
  		  LED1 = 0;
 80036ae:	4b1f      	ldr	r3, [pc, #124]	; (800372c <HAL_GPIO_EXTI_Callback+0x1edc>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
  		  LED2 = 0;
 80036b4:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <HAL_GPIO_EXTI_Callback+0x1ee0>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
  		  LED3 = 0;
 80036ba:	4b18      	ldr	r3, [pc, #96]	; (800371c <HAL_GPIO_EXTI_Callback+0x1ecc>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
  		  LED4 = 0;
 80036c0:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <HAL_GPIO_EXTI_Callback+0x1ee4>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
  		  pirIsOn = 0;
 80036c6:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <HAL_GPIO_EXTI_Callback+0x1ee8>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
  		  buzzerForPir = 0;
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_GPIO_EXTI_Callback+0x1eec>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
  		  buzzerForTemp = 0;
 80036d2:	4b1b      	ldr	r3, [pc, #108]	; (8003740 <HAL_GPIO_EXTI_Callback+0x1ef0>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
  		  sleepIsOn = 1;
 80036d8:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <HAL_GPIO_EXTI_Callback+0x1ef4>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]
  		  menuState = 10;
 80036de:	4b08      	ldr	r3, [pc, #32]	; (8003700 <HAL_GPIO_EXTI_Callback+0x1eb0>)
 80036e0:	220a      	movs	r2, #10
 80036e2:	601a      	str	r2, [r3, #0]
    break;
 80036e4:	f001 bbf3 	b.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
 80036e8:	20000028 	.word	0x20000028
 80036ec:	20000700 	.word	0x20000700
 80036f0:	2000076c 	.word	0x2000076c
 80036f4:	0800e42c 	.word	0x0800e42c
 80036f8:	0800e430 	.word	0x0800e430
 80036fc:	20000764 	.word	0x20000764
 8003700:	2000000c 	.word	0x2000000c
 8003704:	20000728 	.word	0x20000728
 8003708:	20000768 	.word	0x20000768
 800370c:	48001000 	.word	0x48001000
 8003710:	200006a8 	.word	0x200006a8
 8003714:	2000069c 	.word	0x2000069c
 8003718:	20000698 	.word	0x20000698
 800371c:	2000071c 	.word	0x2000071c
 8003720:	0800e434 	.word	0x0800e434
 8003724:	20000304 	.word	0x20000304
 8003728:	0800e444 	.word	0x0800e444
 800372c:	20000714 	.word	0x20000714
 8003730:	20000718 	.word	0x20000718
 8003734:	20000720 	.word	0x20000720
 8003738:	200006b4 	.word	0x200006b4
 800373c:	200006b8 	.word	0x200006b8
 8003740:	200006a0 	.word	0x200006a0
 8003744:	2000074c 	.word	0x2000074c
	  } else if (menuState == 12) {
 8003748:	4ba6      	ldr	r3, [pc, #664]	; (80039e4 <HAL_GPIO_EXTI_Callback+0x2194>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b0c      	cmp	r3, #12
 800374e:	f040 80c4 	bne.w	80038da <HAL_GPIO_EXTI_Callback+0x208a>
		  if (keyState == 0) {
 8003752:	4ba5      	ldr	r3, [pc, #660]	; (80039e8 <HAL_GPIO_EXTI_Callback+0x2198>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10a      	bne.n	8003770 <HAL_GPIO_EXTI_Callback+0x1f20>
			  inputHi++;
 800375a:	4ba4      	ldr	r3, [pc, #656]	; (80039ec <HAL_GPIO_EXTI_Callback+0x219c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3301      	adds	r3, #1
 8003760:	4aa2      	ldr	r2, [pc, #648]	; (80039ec <HAL_GPIO_EXTI_Callback+0x219c>)
 8003762:	6013      	str	r3, [r2, #0]
			  hiPressed = 0;
 8003764:	4ba2      	ldr	r3, [pc, #648]	; (80039f0 <HAL_GPIO_EXTI_Callback+0x21a0>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
			  keyState = 3;
 800376a:	4b9f      	ldr	r3, [pc, #636]	; (80039e8 <HAL_GPIO_EXTI_Callback+0x2198>)
 800376c:	2203      	movs	r2, #3
 800376e:	601a      	str	r2, [r3, #0]
		  if (keyState == 3) {
 8003770:	4b9d      	ldr	r3, [pc, #628]	; (80039e8 <HAL_GPIO_EXTI_Callback+0x2198>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b03      	cmp	r3, #3
 8003776:	f041 83aa 	bne.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
			  if (hiPressed == 0) {
 800377a:	4b9d      	ldr	r3, [pc, #628]	; (80039f0 <HAL_GPIO_EXTI_Callback+0x21a0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d136      	bne.n	80037f0 <HAL_GPIO_EXTI_Callback+0x1fa0>
				  strncpy(substring, hiTemp, inputHi-1);
 8003782:	4b9a      	ldr	r3, [pc, #616]	; (80039ec <HAL_GPIO_EXTI_Callback+0x219c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3b01      	subs	r3, #1
 8003788:	461a      	mov	r2, r3
 800378a:	499a      	ldr	r1, [pc, #616]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 800378c:	489a      	ldr	r0, [pc, #616]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x21a8>)
 800378e:	f00a f8ad 	bl	800d8ec <strncpy>
				  for (int i=0; i<strlen(hiTemp); i++) {
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003798:	e00a      	b.n	80037b0 <HAL_GPIO_EXTI_Callback+0x1f60>
				    	hiTemp[i] = '\0';
 800379a:	4a96      	ldr	r2, [pc, #600]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 800379c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037a0:	4413      	add	r3, r2
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
				  for (int i=0; i<strlen(hiTemp); i++) {
 80037a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037aa:	3301      	adds	r3, #1
 80037ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037b0:	4890      	ldr	r0, [pc, #576]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 80037b2:	f7fc fd0d 	bl	80001d0 <strlen>
 80037b6:	4602      	mov	r2, r0
 80037b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037bc:	429a      	cmp	r2, r3
 80037be:	d8ec      	bhi.n	800379a <HAL_GPIO_EXTI_Callback+0x1f4a>
				  concatenate(hiTemp, substring);
 80037c0:	498d      	ldr	r1, [pc, #564]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x21a8>)
 80037c2:	488c      	ldr	r0, [pc, #560]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 80037c4:	f7fe f810 	bl	80017e8 <concatenate>
				  if (isBigger == 0) {
 80037c8:	4b8c      	ldr	r3, [pc, #560]	; (80039fc <HAL_GPIO_EXTI_Callback+0x21ac>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d104      	bne.n	80037da <HAL_GPIO_EXTI_Callback+0x1f8a>
				  			  		  concatenate(hiTemp, "g");
 80037d0:	498b      	ldr	r1, [pc, #556]	; (8003a00 <HAL_GPIO_EXTI_Callback+0x21b0>)
 80037d2:	4888      	ldr	r0, [pc, #544]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 80037d4:	f7fe f808 	bl	80017e8 <concatenate>
 80037d8:	e003      	b.n	80037e2 <HAL_GPIO_EXTI_Callback+0x1f92>
				  			  		concatenate(hiTemp, "G");
 80037da:	498a      	ldr	r1, [pc, #552]	; (8003a04 <HAL_GPIO_EXTI_Callback+0x21b4>)
 80037dc:	4885      	ldr	r0, [pc, #532]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 80037de:	f7fe f803 	bl	80017e8 <concatenate>
				  hiPressed++;
 80037e2:	4b83      	ldr	r3, [pc, #524]	; (80039f0 <HAL_GPIO_EXTI_Callback+0x21a0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3301      	adds	r3, #1
 80037e8:	4a81      	ldr	r2, [pc, #516]	; (80039f0 <HAL_GPIO_EXTI_Callback+0x21a0>)
 80037ea:	6013      	str	r3, [r2, #0]
    break;
 80037ec:	f001 bb6f 	b.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
			  } else if (hiPressed == 1) {
 80037f0:	4b7f      	ldr	r3, [pc, #508]	; (80039f0 <HAL_GPIO_EXTI_Callback+0x21a0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d136      	bne.n	8003866 <HAL_GPIO_EXTI_Callback+0x2016>
				  strncpy(substring, hiTemp, inputHi-1);
 80037f8:	4b7c      	ldr	r3, [pc, #496]	; (80039ec <HAL_GPIO_EXTI_Callback+0x219c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	461a      	mov	r2, r3
 8003800:	497c      	ldr	r1, [pc, #496]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 8003802:	487d      	ldr	r0, [pc, #500]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x21a8>)
 8003804:	f00a f872 	bl	800d8ec <strncpy>
				  for (int i=0; i<strlen(hiTemp); i++) {
 8003808:	2300      	movs	r3, #0
 800380a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800380e:	e00a      	b.n	8003826 <HAL_GPIO_EXTI_Callback+0x1fd6>
				  		hiTemp[i] = '\0';
 8003810:	4a78      	ldr	r2, [pc, #480]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 8003812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003816:	4413      	add	r3, r2
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
				  for (int i=0; i<strlen(hiTemp); i++) {
 800381c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003820:	3301      	adds	r3, #1
 8003822:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003826:	4873      	ldr	r0, [pc, #460]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 8003828:	f7fc fcd2 	bl	80001d0 <strlen>
 800382c:	4602      	mov	r2, r0
 800382e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003832:	429a      	cmp	r2, r3
 8003834:	d8ec      	bhi.n	8003810 <HAL_GPIO_EXTI_Callback+0x1fc0>
				  concatenate(hiTemp, substring);
 8003836:	4970      	ldr	r1, [pc, #448]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x21a8>)
 8003838:	486e      	ldr	r0, [pc, #440]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 800383a:	f7fd ffd5 	bl	80017e8 <concatenate>
				  if (isBigger == 0) {
 800383e:	4b6f      	ldr	r3, [pc, #444]	; (80039fc <HAL_GPIO_EXTI_Callback+0x21ac>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d104      	bne.n	8003850 <HAL_GPIO_EXTI_Callback+0x2000>
				  			  		  concatenate(hiTemp, "h");
 8003846:	4970      	ldr	r1, [pc, #448]	; (8003a08 <HAL_GPIO_EXTI_Callback+0x21b8>)
 8003848:	486a      	ldr	r0, [pc, #424]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 800384a:	f7fd ffcd 	bl	80017e8 <concatenate>
 800384e:	e003      	b.n	8003858 <HAL_GPIO_EXTI_Callback+0x2008>
				  			  		concatenate(hiTemp, "H");
 8003850:	496e      	ldr	r1, [pc, #440]	; (8003a0c <HAL_GPIO_EXTI_Callback+0x21bc>)
 8003852:	4868      	ldr	r0, [pc, #416]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 8003854:	f7fd ffc8 	bl	80017e8 <concatenate>
				  hiPressed++;
 8003858:	4b65      	ldr	r3, [pc, #404]	; (80039f0 <HAL_GPIO_EXTI_Callback+0x21a0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3301      	adds	r3, #1
 800385e:	4a64      	ldr	r2, [pc, #400]	; (80039f0 <HAL_GPIO_EXTI_Callback+0x21a0>)
 8003860:	6013      	str	r3, [r2, #0]
    break;
 8003862:	f001 bb34 	b.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
			  } else if (hiPressed ==  2) {
 8003866:	4b62      	ldr	r3, [pc, #392]	; (80039f0 <HAL_GPIO_EXTI_Callback+0x21a0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b02      	cmp	r3, #2
 800386c:	f041 832f 	bne.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
				  strncpy(substring, hiTemp, inputHi-1);
 8003870:	4b5e      	ldr	r3, [pc, #376]	; (80039ec <HAL_GPIO_EXTI_Callback+0x219c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3b01      	subs	r3, #1
 8003876:	461a      	mov	r2, r3
 8003878:	495e      	ldr	r1, [pc, #376]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 800387a:	485f      	ldr	r0, [pc, #380]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x21a8>)
 800387c:	f00a f836 	bl	800d8ec <strncpy>
				  for (int i=0; i<strlen(hiTemp); i++) {
 8003880:	2300      	movs	r3, #0
 8003882:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003886:	e00a      	b.n	800389e <HAL_GPIO_EXTI_Callback+0x204e>
					  	hiTemp[i] = '\0';
 8003888:	4a5a      	ldr	r2, [pc, #360]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 800388a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800388e:	4413      	add	r3, r2
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
				  for (int i=0; i<strlen(hiTemp); i++) {
 8003894:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003898:	3301      	adds	r3, #1
 800389a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800389e:	4855      	ldr	r0, [pc, #340]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 80038a0:	f7fc fc96 	bl	80001d0 <strlen>
 80038a4:	4602      	mov	r2, r0
 80038a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d8ec      	bhi.n	8003888 <HAL_GPIO_EXTI_Callback+0x2038>
				  concatenate(hiTemp, substring);
 80038ae:	4952      	ldr	r1, [pc, #328]	; (80039f8 <HAL_GPIO_EXTI_Callback+0x21a8>)
 80038b0:	4850      	ldr	r0, [pc, #320]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 80038b2:	f7fd ff99 	bl	80017e8 <concatenate>
				  if (isBigger == 0) {
 80038b6:	4b51      	ldr	r3, [pc, #324]	; (80039fc <HAL_GPIO_EXTI_Callback+0x21ac>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d104      	bne.n	80038c8 <HAL_GPIO_EXTI_Callback+0x2078>
				  			  		  concatenate(hiTemp, "i");
 80038be:	4954      	ldr	r1, [pc, #336]	; (8003a10 <HAL_GPIO_EXTI_Callback+0x21c0>)
 80038c0:	484c      	ldr	r0, [pc, #304]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 80038c2:	f7fd ff91 	bl	80017e8 <concatenate>
 80038c6:	e003      	b.n	80038d0 <HAL_GPIO_EXTI_Callback+0x2080>
				  			  		concatenate(hiTemp, "I");
 80038c8:	4952      	ldr	r1, [pc, #328]	; (8003a14 <HAL_GPIO_EXTI_Callback+0x21c4>)
 80038ca:	484a      	ldr	r0, [pc, #296]	; (80039f4 <HAL_GPIO_EXTI_Callback+0x21a4>)
 80038cc:	f7fd ff8c 	bl	80017e8 <concatenate>
				  hiPressed=0;
 80038d0:	4b47      	ldr	r3, [pc, #284]	; (80039f0 <HAL_GPIO_EXTI_Callback+0x21a0>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
    break;
 80038d6:	f001 bafa 	b.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
	  } else if (menuState == 13) {
 80038da:	4b42      	ldr	r3, [pc, #264]	; (80039e4 <HAL_GPIO_EXTI_Callback+0x2194>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b0d      	cmp	r3, #13
 80038e0:	f040 80de 	bne.w	8003aa0 <HAL_GPIO_EXTI_Callback+0x2250>
		  if (keyState == 0) {
 80038e4:	4b40      	ldr	r3, [pc, #256]	; (80039e8 <HAL_GPIO_EXTI_Callback+0x2198>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <HAL_GPIO_EXTI_Callback+0x20b2>
			  inputHi++;
 80038ec:	4b3f      	ldr	r3, [pc, #252]	; (80039ec <HAL_GPIO_EXTI_Callback+0x219c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3301      	adds	r3, #1
 80038f2:	4a3e      	ldr	r2, [pc, #248]	; (80039ec <HAL_GPIO_EXTI_Callback+0x219c>)
 80038f4:	6013      	str	r3, [r2, #0]
			  hiPressed = 0;
 80038f6:	4b3e      	ldr	r3, [pc, #248]	; (80039f0 <HAL_GPIO_EXTI_Callback+0x21a0>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
			  keyState = 3;
 80038fc:	4b3a      	ldr	r3, [pc, #232]	; (80039e8 <HAL_GPIO_EXTI_Callback+0x2198>)
 80038fe:	2203      	movs	r2, #3
 8003900:	601a      	str	r2, [r3, #0]
		  if (keyState == 3) {
 8003902:	4b39      	ldr	r3, [pc, #228]	; (80039e8 <HAL_GPIO_EXTI_Callback+0x2198>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b03      	cmp	r3, #3
 8003908:	f041 82e1 	bne.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
			  if (hiPressed == 0) {
 800390c:	4b38      	ldr	r3, [pc, #224]	; (80039f0 <HAL_GPIO_EXTI_Callback+0x21a0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d136      	bne.n	8003982 <HAL_GPIO_EXTI_Callback+0x2132>
				  strncpy(byeSub, byeTemp, inputHi-1);
 8003914:	4b35      	ldr	r3, [pc, #212]	; (80039ec <HAL_GPIO_EXTI_Callback+0x219c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3b01      	subs	r3, #1
 800391a:	461a      	mov	r2, r3
 800391c:	493e      	ldr	r1, [pc, #248]	; (8003a18 <HAL_GPIO_EXTI_Callback+0x21c8>)
 800391e:	483f      	ldr	r0, [pc, #252]	; (8003a1c <HAL_GPIO_EXTI_Callback+0x21cc>)
 8003920:	f009 ffe4 	bl	800d8ec <strncpy>
				  for (int i=0; i<strlen(byeTemp); i++) {
 8003924:	2300      	movs	r3, #0
 8003926:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800392a:	e00a      	b.n	8003942 <HAL_GPIO_EXTI_Callback+0x20f2>
					  byeTemp[i] = '\0';
 800392c:	4a3a      	ldr	r2, [pc, #232]	; (8003a18 <HAL_GPIO_EXTI_Callback+0x21c8>)
 800392e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003932:	4413      	add	r3, r2
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
				  for (int i=0; i<strlen(byeTemp); i++) {
 8003938:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800393c:	3301      	adds	r3, #1
 800393e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003942:	4835      	ldr	r0, [pc, #212]	; (8003a18 <HAL_GPIO_EXTI_Callback+0x21c8>)
 8003944:	f7fc fc44 	bl	80001d0 <strlen>
 8003948:	4602      	mov	r2, r0
 800394a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800394e:	429a      	cmp	r2, r3
 8003950:	d8ec      	bhi.n	800392c <HAL_GPIO_EXTI_Callback+0x20dc>
				  concatenate(byeTemp, byeSub);
 8003952:	4932      	ldr	r1, [pc, #200]	; (8003a1c <HAL_GPIO_EXTI_Callback+0x21cc>)
 8003954:	4830      	ldr	r0, [pc, #192]	; (8003a18 <HAL_GPIO_EXTI_Callback+0x21c8>)
 8003956:	f7fd ff47 	bl	80017e8 <concatenate>
				  if (isBigger == 0) {
 800395a:	4b28      	ldr	r3, [pc, #160]	; (80039fc <HAL_GPIO_EXTI_Callback+0x21ac>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d104      	bne.n	800396c <HAL_GPIO_EXTI_Callback+0x211c>
				  			  		  concatenate(byeTemp, "g");
 8003962:	4927      	ldr	r1, [pc, #156]	; (8003a00 <HAL_GPIO_EXTI_Callback+0x21b0>)
 8003964:	482c      	ldr	r0, [pc, #176]	; (8003a18 <HAL_GPIO_EXTI_Callback+0x21c8>)
 8003966:	f7fd ff3f 	bl	80017e8 <concatenate>
 800396a:	e003      	b.n	8003974 <HAL_GPIO_EXTI_Callback+0x2124>
				  			  		concatenate(byeTemp, "G");
 800396c:	4925      	ldr	r1, [pc, #148]	; (8003a04 <HAL_GPIO_EXTI_Callback+0x21b4>)
 800396e:	482a      	ldr	r0, [pc, #168]	; (8003a18 <HAL_GPIO_EXTI_Callback+0x21c8>)
 8003970:	f7fd ff3a 	bl	80017e8 <concatenate>
				  hiPressed++;
 8003974:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <HAL_GPIO_EXTI_Callback+0x21a0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3301      	adds	r3, #1
 800397a:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <HAL_GPIO_EXTI_Callback+0x21a0>)
 800397c:	6013      	str	r3, [r2, #0]
    break;
 800397e:	f001 baa6 	b.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
			  } else if (hiPressed == 1) {
 8003982:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <HAL_GPIO_EXTI_Callback+0x21a0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d155      	bne.n	8003a36 <HAL_GPIO_EXTI_Callback+0x21e6>
				  strncpy(byeSub, byeTemp, inputHi-1);
 800398a:	4b18      	ldr	r3, [pc, #96]	; (80039ec <HAL_GPIO_EXTI_Callback+0x219c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3b01      	subs	r3, #1
 8003990:	461a      	mov	r2, r3
 8003992:	4921      	ldr	r1, [pc, #132]	; (8003a18 <HAL_GPIO_EXTI_Callback+0x21c8>)
 8003994:	4821      	ldr	r0, [pc, #132]	; (8003a1c <HAL_GPIO_EXTI_Callback+0x21cc>)
 8003996:	f009 ffa9 	bl	800d8ec <strncpy>
				  for (int i=0; i<strlen(byeTemp); i++) {
 800399a:	2300      	movs	r3, #0
 800399c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039a0:	e00a      	b.n	80039b8 <HAL_GPIO_EXTI_Callback+0x2168>
					  byeTemp[i] = '\0';
 80039a2:	4a1d      	ldr	r2, [pc, #116]	; (8003a18 <HAL_GPIO_EXTI_Callback+0x21c8>)
 80039a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039a8:	4413      	add	r3, r2
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
				  for (int i=0; i<strlen(byeTemp); i++) {
 80039ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039b2:	3301      	adds	r3, #1
 80039b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039b8:	4817      	ldr	r0, [pc, #92]	; (8003a18 <HAL_GPIO_EXTI_Callback+0x21c8>)
 80039ba:	f7fc fc09 	bl	80001d0 <strlen>
 80039be:	4602      	mov	r2, r0
 80039c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d8ec      	bhi.n	80039a2 <HAL_GPIO_EXTI_Callback+0x2152>
				  concatenate(byeTemp, byeSub);
 80039c8:	4914      	ldr	r1, [pc, #80]	; (8003a1c <HAL_GPIO_EXTI_Callback+0x21cc>)
 80039ca:	4813      	ldr	r0, [pc, #76]	; (8003a18 <HAL_GPIO_EXTI_Callback+0x21c8>)
 80039cc:	f7fd ff0c 	bl	80017e8 <concatenate>
				  if (isBigger == 0) {
 80039d0:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <HAL_GPIO_EXTI_Callback+0x21ac>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d123      	bne.n	8003a20 <HAL_GPIO_EXTI_Callback+0x21d0>
				  			  		  concatenate(byeTemp, "h");
 80039d8:	490b      	ldr	r1, [pc, #44]	; (8003a08 <HAL_GPIO_EXTI_Callback+0x21b8>)
 80039da:	480f      	ldr	r0, [pc, #60]	; (8003a18 <HAL_GPIO_EXTI_Callback+0x21c8>)
 80039dc:	f7fd ff04 	bl	80017e8 <concatenate>
 80039e0:	e022      	b.n	8003a28 <HAL_GPIO_EXTI_Callback+0x21d8>
 80039e2:	bf00      	nop
 80039e4:	2000000c 	.word	0x2000000c
 80039e8:	20000768 	.word	0x20000768
 80039ec:	20000760 	.word	0x20000760
 80039f0:	20000764 	.word	0x20000764
 80039f4:	20000014 	.word	0x20000014
 80039f8:	200006ec 	.word	0x200006ec
 80039fc:	2000076c 	.word	0x2000076c
 8003a00:	0800e450 	.word	0x0800e450
 8003a04:	0800e454 	.word	0x0800e454
 8003a08:	0800e458 	.word	0x0800e458
 8003a0c:	0800e45c 	.word	0x0800e45c
 8003a10:	0800e460 	.word	0x0800e460
 8003a14:	0800e464 	.word	0x0800e464
 8003a18:	20000028 	.word	0x20000028
 8003a1c:	20000700 	.word	0x20000700
				  			  		concatenate(byeTemp, "H");
 8003a20:	4998      	ldr	r1, [pc, #608]	; (8003c84 <HAL_GPIO_EXTI_Callback+0x2434>)
 8003a22:	4899      	ldr	r0, [pc, #612]	; (8003c88 <HAL_GPIO_EXTI_Callback+0x2438>)
 8003a24:	f7fd fee0 	bl	80017e8 <concatenate>
				  hiPressed++;
 8003a28:	4b98      	ldr	r3, [pc, #608]	; (8003c8c <HAL_GPIO_EXTI_Callback+0x243c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	4a97      	ldr	r2, [pc, #604]	; (8003c8c <HAL_GPIO_EXTI_Callback+0x243c>)
 8003a30:	6013      	str	r3, [r2, #0]
    break;
 8003a32:	f001 ba4c 	b.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
			  } else if (hiPressed ==  2) {
 8003a36:	4b95      	ldr	r3, [pc, #596]	; (8003c8c <HAL_GPIO_EXTI_Callback+0x243c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	f041 8247 	bne.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
				  strncpy(byeSub, byeTemp, inputHi-1);
 8003a40:	4b93      	ldr	r3, [pc, #588]	; (8003c90 <HAL_GPIO_EXTI_Callback+0x2440>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	461a      	mov	r2, r3
 8003a48:	498f      	ldr	r1, [pc, #572]	; (8003c88 <HAL_GPIO_EXTI_Callback+0x2438>)
 8003a4a:	4892      	ldr	r0, [pc, #584]	; (8003c94 <HAL_GPIO_EXTI_Callback+0x2444>)
 8003a4c:	f009 ff4e 	bl	800d8ec <strncpy>
				  for (int i=0; i<strlen(byeTemp); i++) {
 8003a50:	2300      	movs	r3, #0
 8003a52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a54:	e007      	b.n	8003a66 <HAL_GPIO_EXTI_Callback+0x2216>
					  byeTemp[i] = '\0';
 8003a56:	4a8c      	ldr	r2, [pc, #560]	; (8003c88 <HAL_GPIO_EXTI_Callback+0x2438>)
 8003a58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a5a:	4413      	add	r3, r2
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
				  for (int i=0; i<strlen(byeTemp); i++) {
 8003a60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a62:	3301      	adds	r3, #1
 8003a64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a66:	4888      	ldr	r0, [pc, #544]	; (8003c88 <HAL_GPIO_EXTI_Callback+0x2438>)
 8003a68:	f7fc fbb2 	bl	80001d0 <strlen>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d8f0      	bhi.n	8003a56 <HAL_GPIO_EXTI_Callback+0x2206>
				  concatenate(byeTemp, byeSub);
 8003a74:	4987      	ldr	r1, [pc, #540]	; (8003c94 <HAL_GPIO_EXTI_Callback+0x2444>)
 8003a76:	4884      	ldr	r0, [pc, #528]	; (8003c88 <HAL_GPIO_EXTI_Callback+0x2438>)
 8003a78:	f7fd feb6 	bl	80017e8 <concatenate>
				  if (isBigger == 0) {
 8003a7c:	4b86      	ldr	r3, [pc, #536]	; (8003c98 <HAL_GPIO_EXTI_Callback+0x2448>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d104      	bne.n	8003a8e <HAL_GPIO_EXTI_Callback+0x223e>
				  			  		  concatenate(byeTemp, "i");
 8003a84:	4985      	ldr	r1, [pc, #532]	; (8003c9c <HAL_GPIO_EXTI_Callback+0x244c>)
 8003a86:	4880      	ldr	r0, [pc, #512]	; (8003c88 <HAL_GPIO_EXTI_Callback+0x2438>)
 8003a88:	f7fd feae 	bl	80017e8 <concatenate>
 8003a8c:	e003      	b.n	8003a96 <HAL_GPIO_EXTI_Callback+0x2246>
				  			  		concatenate(byeTemp, "I");
 8003a8e:	4984      	ldr	r1, [pc, #528]	; (8003ca0 <HAL_GPIO_EXTI_Callback+0x2450>)
 8003a90:	487d      	ldr	r0, [pc, #500]	; (8003c88 <HAL_GPIO_EXTI_Callback+0x2438>)
 8003a92:	f7fd fea9 	bl	80017e8 <concatenate>
				  hiPressed=0;
 8003a96:	4b7d      	ldr	r3, [pc, #500]	; (8003c8c <HAL_GPIO_EXTI_Callback+0x243c>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
    break;
 8003a9c:	f001 ba17 	b.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
	  } else if (menuState == 18) {
 8003aa0:	4b80      	ldr	r3, [pc, #512]	; (8003ca4 <HAL_GPIO_EXTI_Callback+0x2454>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b12      	cmp	r3, #18
 8003aa6:	f041 8212 	bne.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
		  if (s1.LED3 == 0) {
 8003aaa:	4b7f      	ldr	r3, [pc, #508]	; (8003ca8 <HAL_GPIO_EXTI_Callback+0x2458>)
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d104      	bne.n	8003abc <HAL_GPIO_EXTI_Callback+0x226c>
			  s1.LED3 = 1;
 8003ab2:	4b7d      	ldr	r3, [pc, #500]	; (8003ca8 <HAL_GPIO_EXTI_Callback+0x2458>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	619a      	str	r2, [r3, #24]
    break;
 8003ab8:	f001 ba09 	b.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
			  s1.LED3 = 0;
 8003abc:	4b7a      	ldr	r3, [pc, #488]	; (8003ca8 <HAL_GPIO_EXTI_Callback+0x2458>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	619a      	str	r2, [r3, #24]
    break;
 8003ac2:	f001 ba04 	b.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
 8003ac6:	f001 ba02 	b.w	8004ece <HAL_GPIO_EXTI_Callback+0x367e>
  case 10:
    /* code */
	  //7
	  if (menuState != -2 && menuState != -3) {
 8003aca:	4b76      	ldr	r3, [pc, #472]	; (8003ca4 <HAL_GPIO_EXTI_Callback+0x2454>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f113 0f02 	cmn.w	r3, #2
 8003ad2:	d007      	beq.n	8003ae4 <HAL_GPIO_EXTI_Callback+0x2294>
 8003ad4:	4b73      	ldr	r3, [pc, #460]	; (8003ca4 <HAL_GPIO_EXTI_Callback+0x2454>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f113 0f03 	cmn.w	r3, #3
 8003adc:	d002      	beq.n	8003ae4 <HAL_GPIO_EXTI_Callback+0x2294>
	  		  count=0;
 8003ade:	4b73      	ldr	r3, [pc, #460]	; (8003cac <HAL_GPIO_EXTI_Callback+0x245c>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
	  	  }
	  if (menuState == 2 && input == 0) {
 8003ae4:	4b6f      	ldr	r3, [pc, #444]	; (8003ca4 <HAL_GPIO_EXTI_Callback+0x2454>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d10a      	bne.n	8003b02 <HAL_GPIO_EXTI_Callback+0x22b2>
 8003aec:	4b70      	ldr	r3, [pc, #448]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0x2460>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <HAL_GPIO_EXTI_Callback+0x22b2>
	  	tens = 7;
 8003af4:	4b6f      	ldr	r3, [pc, #444]	; (8003cb4 <HAL_GPIO_EXTI_Callback+0x2464>)
 8003af6:	2207      	movs	r2, #7
 8003af8:	601a      	str	r2, [r3, #0]
	  	input = 1;
 8003afa:	4b6d      	ldr	r3, [pc, #436]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0x2460>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	e00d      	b.n	8003b1e <HAL_GPIO_EXTI_Callback+0x22ce>
	  } else if (menuState == 2 && input == 1) {
 8003b02:	4b68      	ldr	r3, [pc, #416]	; (8003ca4 <HAL_GPIO_EXTI_Callback+0x2454>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d109      	bne.n	8003b1e <HAL_GPIO_EXTI_Callback+0x22ce>
 8003b0a:	4b69      	ldr	r3, [pc, #420]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0x2460>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d105      	bne.n	8003b1e <HAL_GPIO_EXTI_Callback+0x22ce>
		ones = 7;
 8003b12:	4b69      	ldr	r3, [pc, #420]	; (8003cb8 <HAL_GPIO_EXTI_Callback+0x2468>)
 8003b14:	2207      	movs	r2, #7
 8003b16:	601a      	str	r2, [r3, #0]
		input = 0;
 8003b18:	4b65      	ldr	r3, [pc, #404]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0x2460>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
	  }if (menuState == 20 && input == 0) {
 8003b1e:	4b61      	ldr	r3, [pc, #388]	; (8003ca4 <HAL_GPIO_EXTI_Callback+0x2454>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b14      	cmp	r3, #20
 8003b24:	d10a      	bne.n	8003b3c <HAL_GPIO_EXTI_Callback+0x22ec>
 8003b26:	4b62      	ldr	r3, [pc, #392]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0x2460>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_GPIO_EXTI_Callback+0x22ec>
		  	tens = 7;
 8003b2e:	4b61      	ldr	r3, [pc, #388]	; (8003cb4 <HAL_GPIO_EXTI_Callback+0x2464>)
 8003b30:	2207      	movs	r2, #7
 8003b32:	601a      	str	r2, [r3, #0]
		  	input = 1;
 8003b34:	4b5e      	ldr	r3, [pc, #376]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0x2460>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	e00d      	b.n	8003b58 <HAL_GPIO_EXTI_Callback+0x2308>
	  } else if (menuState == 20 && input == 1) {
 8003b3c:	4b59      	ldr	r3, [pc, #356]	; (8003ca4 <HAL_GPIO_EXTI_Callback+0x2454>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b14      	cmp	r3, #20
 8003b42:	d109      	bne.n	8003b58 <HAL_GPIO_EXTI_Callback+0x2308>
 8003b44:	4b5a      	ldr	r3, [pc, #360]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0x2460>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d105      	bne.n	8003b58 <HAL_GPIO_EXTI_Callback+0x2308>
			ones = 7;
 8003b4c:	4b5a      	ldr	r3, [pc, #360]	; (8003cb8 <HAL_GPIO_EXTI_Callback+0x2468>)
 8003b4e:	2207      	movs	r2, #7
 8003b50:	601a      	str	r2, [r3, #0]
			input = 0;
 8003b52:	4b57      	ldr	r3, [pc, #348]	; (8003cb0 <HAL_GPIO_EXTI_Callback+0x2460>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
	  } if (menuState == 0) {
 8003b58:	4b52      	ldr	r3, [pc, #328]	; (8003ca4 <HAL_GPIO_EXTI_Callback+0x2454>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d104      	bne.n	8003b6a <HAL_GPIO_EXTI_Callback+0x231a>
		menuState = 11;
 8003b60:	4b50      	ldr	r3, [pc, #320]	; (8003ca4 <HAL_GPIO_EXTI_Callback+0x2454>)
 8003b62:	220b      	movs	r2, #11
 8003b64:	601a      	str	r2, [r3, #0]
		  		  					  	  }
		  		  		  hiPressed=0;
		  		  	  }
		  		  }
	  }
    break;
 8003b66:	f001 b9b4 	b.w	8004ed2 <HAL_GPIO_EXTI_Callback+0x3682>
	  } else if (menuState == 12) {
 8003b6a:	4b4e      	ldr	r3, [pc, #312]	; (8003ca4 <HAL_GPIO_EXTI_Callback+0x2454>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	f040 80f0 	bne.w	8003d54 <HAL_GPIO_EXTI_Callback+0x2504>
		  if (keyState == 0) {
 8003b74:	4b51      	ldr	r3, [pc, #324]	; (8003cbc <HAL_GPIO_EXTI_Callback+0x246c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <HAL_GPIO_EXTI_Callback+0x2342>
		  			  inputHi++;
 8003b7c:	4b44      	ldr	r3, [pc, #272]	; (8003c90 <HAL_GPIO_EXTI_Callback+0x2440>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3301      	adds	r3, #1
 8003b82:	4a43      	ldr	r2, [pc, #268]	; (8003c90 <HAL_GPIO_EXTI_Callback+0x2440>)
 8003b84:	6013      	str	r3, [r2, #0]
		  			  hiPressed = 0;
 8003b86:	4b41      	ldr	r3, [pc, #260]	; (8003c8c <HAL_GPIO_EXTI_Callback+0x243c>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
		  			  keyState = 7;
 8003b8c:	4b4b      	ldr	r3, [pc, #300]	; (8003cbc <HAL_GPIO_EXTI_Callback+0x246c>)
 8003b8e:	2207      	movs	r2, #7
 8003b90:	601a      	str	r2, [r3, #0]
		  		  if (keyState == 7) {
 8003b92:	4b4a      	ldr	r3, [pc, #296]	; (8003cbc <HAL_GPIO_EXTI_Callback+0x246c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b07      	cmp	r3, #7
 8003b98:	f041 819b 	bne.w	8004ed2 <HAL_GPIO_EXTI_Callback+0x3682>
		  			  for (int i=0; i<strlen(substring); i++) {
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ba0:	e007      	b.n	8003bb2 <HAL_GPIO_EXTI_Callback+0x2362>
		  			  	  substring[i] = '\0';
 8003ba2:	4a47      	ldr	r2, [pc, #284]	; (8003cc0 <HAL_GPIO_EXTI_Callback+0x2470>)
 8003ba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ba6:	4413      	add	r3, r2
 8003ba8:	2200      	movs	r2, #0
 8003baa:	701a      	strb	r2, [r3, #0]
		  			  for (int i=0; i<strlen(substring); i++) {
 8003bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bae:	3301      	adds	r3, #1
 8003bb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bb2:	4843      	ldr	r0, [pc, #268]	; (8003cc0 <HAL_GPIO_EXTI_Callback+0x2470>)
 8003bb4:	f7fc fb0c 	bl	80001d0 <strlen>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d8f0      	bhi.n	8003ba2 <HAL_GPIO_EXTI_Callback+0x2352>
		  		  	  if (hiPressed == 0) {
 8003bc0:	4b32      	ldr	r3, [pc, #200]	; (8003c8c <HAL_GPIO_EXTI_Callback+0x243c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d131      	bne.n	8003c2c <HAL_GPIO_EXTI_Callback+0x23dc>
		  		  		  strncpy(substring,hiTemp,inputHi-1);
 8003bc8:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <HAL_GPIO_EXTI_Callback+0x2440>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	461a      	mov	r2, r3
 8003bd0:	493c      	ldr	r1, [pc, #240]	; (8003cc4 <HAL_GPIO_EXTI_Callback+0x2474>)
 8003bd2:	483b      	ldr	r0, [pc, #236]	; (8003cc0 <HAL_GPIO_EXTI_Callback+0x2470>)
 8003bd4:	f009 fe8a 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 8003bd8:	2300      	movs	r3, #0
 8003bda:	677b      	str	r3, [r7, #116]	; 0x74
 8003bdc:	e007      	b.n	8003bee <HAL_GPIO_EXTI_Callback+0x239e>
		  			  	  	  hiTemp[i] = '\0';
 8003bde:	4a39      	ldr	r2, [pc, #228]	; (8003cc4 <HAL_GPIO_EXTI_Callback+0x2474>)
 8003be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003be2:	4413      	add	r3, r2
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 8003be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bea:	3301      	adds	r3, #1
 8003bec:	677b      	str	r3, [r7, #116]	; 0x74
 8003bee:	4835      	ldr	r0, [pc, #212]	; (8003cc4 <HAL_GPIO_EXTI_Callback+0x2474>)
 8003bf0:	f7fc faee 	bl	80001d0 <strlen>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d8f0      	bhi.n	8003bde <HAL_GPIO_EXTI_Callback+0x238e>
		  			  	  concatenate(hiTemp, substring);
 8003bfc:	4930      	ldr	r1, [pc, #192]	; (8003cc0 <HAL_GPIO_EXTI_Callback+0x2470>)
 8003bfe:	4831      	ldr	r0, [pc, #196]	; (8003cc4 <HAL_GPIO_EXTI_Callback+0x2474>)
 8003c00:	f7fd fdf2 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 8003c04:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <HAL_GPIO_EXTI_Callback+0x2448>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d104      	bne.n	8003c16 <HAL_GPIO_EXTI_Callback+0x23c6>
		  			  				  		  concatenate(hiTemp, "t");
 8003c0c:	492e      	ldr	r1, [pc, #184]	; (8003cc8 <HAL_GPIO_EXTI_Callback+0x2478>)
 8003c0e:	482d      	ldr	r0, [pc, #180]	; (8003cc4 <HAL_GPIO_EXTI_Callback+0x2474>)
 8003c10:	f7fd fdea 	bl	80017e8 <concatenate>
 8003c14:	e003      	b.n	8003c1e <HAL_GPIO_EXTI_Callback+0x23ce>
		  			  				  		concatenate(hiTemp, "T");
 8003c16:	492d      	ldr	r1, [pc, #180]	; (8003ccc <HAL_GPIO_EXTI_Callback+0x247c>)
 8003c18:	482a      	ldr	r0, [pc, #168]	; (8003cc4 <HAL_GPIO_EXTI_Callback+0x2474>)
 8003c1a:	f7fd fde5 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <HAL_GPIO_EXTI_Callback+0x243c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3301      	adds	r3, #1
 8003c24:	4a19      	ldr	r2, [pc, #100]	; (8003c8c <HAL_GPIO_EXTI_Callback+0x243c>)
 8003c26:	6013      	str	r3, [r2, #0]
    break;
 8003c28:	f001 b953 	b.w	8004ed2 <HAL_GPIO_EXTI_Callback+0x3682>
		  		  	  } else if (hiPressed == 1) {
 8003c2c:	4b17      	ldr	r3, [pc, #92]	; (8003c8c <HAL_GPIO_EXTI_Callback+0x243c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d15a      	bne.n	8003cea <HAL_GPIO_EXTI_Callback+0x249a>
		  			  	  strncpy(substring,hiTemp,inputHi-1);
 8003c34:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <HAL_GPIO_EXTI_Callback+0x2440>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4921      	ldr	r1, [pc, #132]	; (8003cc4 <HAL_GPIO_EXTI_Callback+0x2474>)
 8003c3e:	4820      	ldr	r0, [pc, #128]	; (8003cc0 <HAL_GPIO_EXTI_Callback+0x2470>)
 8003c40:	f009 fe54 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 8003c44:	2300      	movs	r3, #0
 8003c46:	673b      	str	r3, [r7, #112]	; 0x70
 8003c48:	e007      	b.n	8003c5a <HAL_GPIO_EXTI_Callback+0x240a>
		  				  	  hiTemp[i] = '\0';
 8003c4a:	4a1e      	ldr	r2, [pc, #120]	; (8003cc4 <HAL_GPIO_EXTI_Callback+0x2474>)
 8003c4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c4e:	4413      	add	r3, r2
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 8003c54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c56:	3301      	adds	r3, #1
 8003c58:	673b      	str	r3, [r7, #112]	; 0x70
 8003c5a:	481a      	ldr	r0, [pc, #104]	; (8003cc4 <HAL_GPIO_EXTI_Callback+0x2474>)
 8003c5c:	f7fc fab8 	bl	80001d0 <strlen>
 8003c60:	4602      	mov	r2, r0
 8003c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d8f0      	bhi.n	8003c4a <HAL_GPIO_EXTI_Callback+0x23fa>
		  			  	  concatenate(hiTemp, substring);
 8003c68:	4915      	ldr	r1, [pc, #84]	; (8003cc0 <HAL_GPIO_EXTI_Callback+0x2470>)
 8003c6a:	4816      	ldr	r0, [pc, #88]	; (8003cc4 <HAL_GPIO_EXTI_Callback+0x2474>)
 8003c6c:	f7fd fdbc 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <HAL_GPIO_EXTI_Callback+0x2448>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d12d      	bne.n	8003cd4 <HAL_GPIO_EXTI_Callback+0x2484>
		  			  				  		  concatenate(hiTemp, "u");
 8003c78:	4915      	ldr	r1, [pc, #84]	; (8003cd0 <HAL_GPIO_EXTI_Callback+0x2480>)
 8003c7a:	4812      	ldr	r0, [pc, #72]	; (8003cc4 <HAL_GPIO_EXTI_Callback+0x2474>)
 8003c7c:	f7fd fdb4 	bl	80017e8 <concatenate>
 8003c80:	e02c      	b.n	8003cdc <HAL_GPIO_EXTI_Callback+0x248c>
 8003c82:	bf00      	nop
 8003c84:	0800e45c 	.word	0x0800e45c
 8003c88:	20000028 	.word	0x20000028
 8003c8c:	20000764 	.word	0x20000764
 8003c90:	20000760 	.word	0x20000760
 8003c94:	20000700 	.word	0x20000700
 8003c98:	2000076c 	.word	0x2000076c
 8003c9c:	0800e460 	.word	0x0800e460
 8003ca0:	0800e464 	.word	0x0800e464
 8003ca4:	2000000c 	.word	0x2000000c
 8003ca8:	200007a4 	.word	0x200007a4
 8003cac:	20000728 	.word	0x20000728
 8003cb0:	200006a8 	.word	0x200006a8
 8003cb4:	2000069c 	.word	0x2000069c
 8003cb8:	20000698 	.word	0x20000698
 8003cbc:	20000768 	.word	0x20000768
 8003cc0:	200006ec 	.word	0x200006ec
 8003cc4:	20000014 	.word	0x20000014
 8003cc8:	0800e468 	.word	0x0800e468
 8003ccc:	0800e46c 	.word	0x0800e46c
 8003cd0:	0800e470 	.word	0x0800e470
		  			  				  		concatenate(hiTemp, "U");
 8003cd4:	4996      	ldr	r1, [pc, #600]	; (8003f30 <HAL_GPIO_EXTI_Callback+0x26e0>)
 8003cd6:	4897      	ldr	r0, [pc, #604]	; (8003f34 <HAL_GPIO_EXTI_Callback+0x26e4>)
 8003cd8:	f7fd fd86 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 8003cdc:	4b96      	ldr	r3, [pc, #600]	; (8003f38 <HAL_GPIO_EXTI_Callback+0x26e8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	4a95      	ldr	r2, [pc, #596]	; (8003f38 <HAL_GPIO_EXTI_Callback+0x26e8>)
 8003ce4:	6013      	str	r3, [r2, #0]
    break;
 8003ce6:	f001 b8f4 	b.w	8004ed2 <HAL_GPIO_EXTI_Callback+0x3682>
		  		  	  } else if(hiPressed == 2) {
 8003cea:	4b93      	ldr	r3, [pc, #588]	; (8003f38 <HAL_GPIO_EXTI_Callback+0x26e8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	f041 80ef 	bne.w	8004ed2 <HAL_GPIO_EXTI_Callback+0x3682>
		  		  		  strncpy(substring, hiTemp, inputHi-1);
 8003cf4:	4b91      	ldr	r3, [pc, #580]	; (8003f3c <HAL_GPIO_EXTI_Callback+0x26ec>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	498d      	ldr	r1, [pc, #564]	; (8003f34 <HAL_GPIO_EXTI_Callback+0x26e4>)
 8003cfe:	4890      	ldr	r0, [pc, #576]	; (8003f40 <HAL_GPIO_EXTI_Callback+0x26f0>)
 8003d00:	f009 fdf4 	bl	800d8ec <strncpy>
		  		  		  for (int i=0; i<strlen(hiTemp); i++) {
 8003d04:	2300      	movs	r3, #0
 8003d06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d08:	e007      	b.n	8003d1a <HAL_GPIO_EXTI_Callback+0x24ca>
		  		  			  hiTemp[i] = '\0';
 8003d0a:	4a8a      	ldr	r2, [pc, #552]	; (8003f34 <HAL_GPIO_EXTI_Callback+0x26e4>)
 8003d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0e:	4413      	add	r3, r2
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
		  		  		  for (int i=0; i<strlen(hiTemp); i++) {
 8003d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d16:	3301      	adds	r3, #1
 8003d18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d1a:	4886      	ldr	r0, [pc, #536]	; (8003f34 <HAL_GPIO_EXTI_Callback+0x26e4>)
 8003d1c:	f7fc fa58 	bl	80001d0 <strlen>
 8003d20:	4602      	mov	r2, r0
 8003d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d8f0      	bhi.n	8003d0a <HAL_GPIO_EXTI_Callback+0x24ba>
		  		  		  concatenate(hiTemp, substring);
 8003d28:	4985      	ldr	r1, [pc, #532]	; (8003f40 <HAL_GPIO_EXTI_Callback+0x26f0>)
 8003d2a:	4882      	ldr	r0, [pc, #520]	; (8003f34 <HAL_GPIO_EXTI_Callback+0x26e4>)
 8003d2c:	f7fd fd5c 	bl	80017e8 <concatenate>
		  		  		if (isBigger == 0) {
 8003d30:	4b84      	ldr	r3, [pc, #528]	; (8003f44 <HAL_GPIO_EXTI_Callback+0x26f4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d104      	bne.n	8003d42 <HAL_GPIO_EXTI_Callback+0x24f2>
		  		  					  		  concatenate(hiTemp, "v");
 8003d38:	4983      	ldr	r1, [pc, #524]	; (8003f48 <HAL_GPIO_EXTI_Callback+0x26f8>)
 8003d3a:	487e      	ldr	r0, [pc, #504]	; (8003f34 <HAL_GPIO_EXTI_Callback+0x26e4>)
 8003d3c:	f7fd fd54 	bl	80017e8 <concatenate>
 8003d40:	e003      	b.n	8003d4a <HAL_GPIO_EXTI_Callback+0x24fa>
		  		  					  		concatenate(hiTemp, "V");
 8003d42:	4982      	ldr	r1, [pc, #520]	; (8003f4c <HAL_GPIO_EXTI_Callback+0x26fc>)
 8003d44:	487b      	ldr	r0, [pc, #492]	; (8003f34 <HAL_GPIO_EXTI_Callback+0x26e4>)
 8003d46:	f7fd fd4f 	bl	80017e8 <concatenate>
		  		  		  hiPressed=0;
 8003d4a:	4b7b      	ldr	r3, [pc, #492]	; (8003f38 <HAL_GPIO_EXTI_Callback+0x26e8>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
    break;
 8003d50:	f001 b8bf 	b.w	8004ed2 <HAL_GPIO_EXTI_Callback+0x3682>
	  } else if (menuState == 13) {
 8003d54:	4b7e      	ldr	r3, [pc, #504]	; (8003f50 <HAL_GPIO_EXTI_Callback+0x2700>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b0d      	cmp	r3, #13
 8003d5a:	f041 80ba 	bne.w	8004ed2 <HAL_GPIO_EXTI_Callback+0x3682>
		  if (keyState == 0) {
 8003d5e:	4b7d      	ldr	r3, [pc, #500]	; (8003f54 <HAL_GPIO_EXTI_Callback+0x2704>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <HAL_GPIO_EXTI_Callback+0x252c>
		  			  inputHi++;
 8003d66:	4b75      	ldr	r3, [pc, #468]	; (8003f3c <HAL_GPIO_EXTI_Callback+0x26ec>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	4a73      	ldr	r2, [pc, #460]	; (8003f3c <HAL_GPIO_EXTI_Callback+0x26ec>)
 8003d6e:	6013      	str	r3, [r2, #0]
		  			  hiPressed = 0;
 8003d70:	4b71      	ldr	r3, [pc, #452]	; (8003f38 <HAL_GPIO_EXTI_Callback+0x26e8>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
		  			  keyState = 7;
 8003d76:	4b77      	ldr	r3, [pc, #476]	; (8003f54 <HAL_GPIO_EXTI_Callback+0x2704>)
 8003d78:	2207      	movs	r2, #7
 8003d7a:	601a      	str	r2, [r3, #0]
		  		  if (keyState == 7) {
 8003d7c:	4b75      	ldr	r3, [pc, #468]	; (8003f54 <HAL_GPIO_EXTI_Callback+0x2704>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b07      	cmp	r3, #7
 8003d82:	f041 80a6 	bne.w	8004ed2 <HAL_GPIO_EXTI_Callback+0x3682>
		  			  for (int i=0; i<strlen(byeSub); i++) {
 8003d86:	2300      	movs	r3, #0
 8003d88:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d8a:	e007      	b.n	8003d9c <HAL_GPIO_EXTI_Callback+0x254c>
		  				byeSub[i] = '\0';
 8003d8c:	4a72      	ldr	r2, [pc, #456]	; (8003f58 <HAL_GPIO_EXTI_Callback+0x2708>)
 8003d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d90:	4413      	add	r3, r2
 8003d92:	2200      	movs	r2, #0
 8003d94:	701a      	strb	r2, [r3, #0]
		  			  for (int i=0; i<strlen(byeSub); i++) {
 8003d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d98:	3301      	adds	r3, #1
 8003d9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d9c:	486e      	ldr	r0, [pc, #440]	; (8003f58 <HAL_GPIO_EXTI_Callback+0x2708>)
 8003d9e:	f7fc fa17 	bl	80001d0 <strlen>
 8003da2:	4602      	mov	r2, r0
 8003da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d8f0      	bhi.n	8003d8c <HAL_GPIO_EXTI_Callback+0x253c>
		  		  	  if (hiPressed == 0) {
 8003daa:	4b63      	ldr	r3, [pc, #396]	; (8003f38 <HAL_GPIO_EXTI_Callback+0x26e8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d131      	bne.n	8003e16 <HAL_GPIO_EXTI_Callback+0x25c6>
		  		  		  strncpy(byeSub,byeTemp,inputHi-1);
 8003db2:	4b62      	ldr	r3, [pc, #392]	; (8003f3c <HAL_GPIO_EXTI_Callback+0x26ec>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	461a      	mov	r2, r3
 8003dba:	4968      	ldr	r1, [pc, #416]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003dbc:	4866      	ldr	r0, [pc, #408]	; (8003f58 <HAL_GPIO_EXTI_Callback+0x2708>)
 8003dbe:	f009 fd95 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	667b      	str	r3, [r7, #100]	; 0x64
 8003dc6:	e007      	b.n	8003dd8 <HAL_GPIO_EXTI_Callback+0x2588>
		  			  		byeTemp[i] = '\0';
 8003dc8:	4a64      	ldr	r2, [pc, #400]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003dca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dcc:	4413      	add	r3, r2
 8003dce:	2200      	movs	r2, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 8003dd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	667b      	str	r3, [r7, #100]	; 0x64
 8003dd8:	4860      	ldr	r0, [pc, #384]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003dda:	f7fc f9f9 	bl	80001d0 <strlen>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d8f0      	bhi.n	8003dc8 <HAL_GPIO_EXTI_Callback+0x2578>
		  			  	  concatenate(byeTemp, byeSub);
 8003de6:	495c      	ldr	r1, [pc, #368]	; (8003f58 <HAL_GPIO_EXTI_Callback+0x2708>)
 8003de8:	485c      	ldr	r0, [pc, #368]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003dea:	f7fd fcfd 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 8003dee:	4b55      	ldr	r3, [pc, #340]	; (8003f44 <HAL_GPIO_EXTI_Callback+0x26f4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d104      	bne.n	8003e00 <HAL_GPIO_EXTI_Callback+0x25b0>
		  			  				  		  concatenate(byeTemp, "t");
 8003df6:	495a      	ldr	r1, [pc, #360]	; (8003f60 <HAL_GPIO_EXTI_Callback+0x2710>)
 8003df8:	4858      	ldr	r0, [pc, #352]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003dfa:	f7fd fcf5 	bl	80017e8 <concatenate>
 8003dfe:	e003      	b.n	8003e08 <HAL_GPIO_EXTI_Callback+0x25b8>
		  			  				  		concatenate(byeTemp, "T");
 8003e00:	4958      	ldr	r1, [pc, #352]	; (8003f64 <HAL_GPIO_EXTI_Callback+0x2714>)
 8003e02:	4856      	ldr	r0, [pc, #344]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003e04:	f7fd fcf0 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 8003e08:	4b4b      	ldr	r3, [pc, #300]	; (8003f38 <HAL_GPIO_EXTI_Callback+0x26e8>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	4a4a      	ldr	r2, [pc, #296]	; (8003f38 <HAL_GPIO_EXTI_Callback+0x26e8>)
 8003e10:	6013      	str	r3, [r2, #0]
    break;
 8003e12:	f001 b85e 	b.w	8004ed2 <HAL_GPIO_EXTI_Callback+0x3682>
		  		  	  } else if (hiPressed == 1) {
 8003e16:	4b48      	ldr	r3, [pc, #288]	; (8003f38 <HAL_GPIO_EXTI_Callback+0x26e8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d131      	bne.n	8003e82 <HAL_GPIO_EXTI_Callback+0x2632>
		  			  	  strncpy(byeSub,byeTemp,inputHi-1);
 8003e1e:	4b47      	ldr	r3, [pc, #284]	; (8003f3c <HAL_GPIO_EXTI_Callback+0x26ec>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	461a      	mov	r2, r3
 8003e26:	494d      	ldr	r1, [pc, #308]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003e28:	484b      	ldr	r0, [pc, #300]	; (8003f58 <HAL_GPIO_EXTI_Callback+0x2708>)
 8003e2a:	f009 fd5f 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 8003e2e:	2300      	movs	r3, #0
 8003e30:	663b      	str	r3, [r7, #96]	; 0x60
 8003e32:	e007      	b.n	8003e44 <HAL_GPIO_EXTI_Callback+0x25f4>
		  			  		byeTemp[i] = '\0';
 8003e34:	4a49      	ldr	r2, [pc, #292]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e38:	4413      	add	r3, r2
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 8003e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e40:	3301      	adds	r3, #1
 8003e42:	663b      	str	r3, [r7, #96]	; 0x60
 8003e44:	4845      	ldr	r0, [pc, #276]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003e46:	f7fc f9c3 	bl	80001d0 <strlen>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d8f0      	bhi.n	8003e34 <HAL_GPIO_EXTI_Callback+0x25e4>
		  			  	  concatenate(byeTemp, byeSub);
 8003e52:	4941      	ldr	r1, [pc, #260]	; (8003f58 <HAL_GPIO_EXTI_Callback+0x2708>)
 8003e54:	4841      	ldr	r0, [pc, #260]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003e56:	f7fd fcc7 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 8003e5a:	4b3a      	ldr	r3, [pc, #232]	; (8003f44 <HAL_GPIO_EXTI_Callback+0x26f4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d104      	bne.n	8003e6c <HAL_GPIO_EXTI_Callback+0x261c>
		  			  				  		  concatenate(byeTemp, "u");
 8003e62:	4941      	ldr	r1, [pc, #260]	; (8003f68 <HAL_GPIO_EXTI_Callback+0x2718>)
 8003e64:	483d      	ldr	r0, [pc, #244]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003e66:	f7fd fcbf 	bl	80017e8 <concatenate>
 8003e6a:	e003      	b.n	8003e74 <HAL_GPIO_EXTI_Callback+0x2624>
		  			  				  		concatenate(byeTemp, "U");
 8003e6c:	4930      	ldr	r1, [pc, #192]	; (8003f30 <HAL_GPIO_EXTI_Callback+0x26e0>)
 8003e6e:	483b      	ldr	r0, [pc, #236]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003e70:	f7fd fcba 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 8003e74:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <HAL_GPIO_EXTI_Callback+0x26e8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	4a2f      	ldr	r2, [pc, #188]	; (8003f38 <HAL_GPIO_EXTI_Callback+0x26e8>)
 8003e7c:	6013      	str	r3, [r2, #0]
    break;
 8003e7e:	f001 b828 	b.w	8004ed2 <HAL_GPIO_EXTI_Callback+0x3682>
		  		  	  } else if(hiPressed == 2) {
 8003e82:	4b2d      	ldr	r3, [pc, #180]	; (8003f38 <HAL_GPIO_EXTI_Callback+0x26e8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	f041 8023 	bne.w	8004ed2 <HAL_GPIO_EXTI_Callback+0x3682>
		  		  		  strncpy(byeSub, byeTemp, inputHi-1);
 8003e8c:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <HAL_GPIO_EXTI_Callback+0x26ec>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	461a      	mov	r2, r3
 8003e94:	4931      	ldr	r1, [pc, #196]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003e96:	4830      	ldr	r0, [pc, #192]	; (8003f58 <HAL_GPIO_EXTI_Callback+0x2708>)
 8003e98:	f009 fd28 	bl	800d8ec <strncpy>
		  		  		  for (int i=0; i<strlen(byeTemp); i++) {
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ea0:	e007      	b.n	8003eb2 <HAL_GPIO_EXTI_Callback+0x2662>
		  		  			byeTemp[i] = '\0';
 8003ea2:	4a2e      	ldr	r2, [pc, #184]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea6:	4413      	add	r3, r2
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]
		  		  		  for (int i=0; i<strlen(byeTemp); i++) {
 8003eac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eae:	3301      	adds	r3, #1
 8003eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eb2:	482a      	ldr	r0, [pc, #168]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003eb4:	f7fc f98c 	bl	80001d0 <strlen>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d8f0      	bhi.n	8003ea2 <HAL_GPIO_EXTI_Callback+0x2652>
		  		  		  concatenate(byeTemp, byeSub);
 8003ec0:	4925      	ldr	r1, [pc, #148]	; (8003f58 <HAL_GPIO_EXTI_Callback+0x2708>)
 8003ec2:	4826      	ldr	r0, [pc, #152]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003ec4:	f7fd fc90 	bl	80017e8 <concatenate>
		  		  		if (isBigger == 0) {
 8003ec8:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <HAL_GPIO_EXTI_Callback+0x26f4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d104      	bne.n	8003eda <HAL_GPIO_EXTI_Callback+0x268a>
		  		  					  		  concatenate(byeTemp, "v");
 8003ed0:	491d      	ldr	r1, [pc, #116]	; (8003f48 <HAL_GPIO_EXTI_Callback+0x26f8>)
 8003ed2:	4822      	ldr	r0, [pc, #136]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003ed4:	f7fd fc88 	bl	80017e8 <concatenate>
 8003ed8:	e003      	b.n	8003ee2 <HAL_GPIO_EXTI_Callback+0x2692>
		  		  					  		concatenate(byeTemp, "V");
 8003eda:	491c      	ldr	r1, [pc, #112]	; (8003f4c <HAL_GPIO_EXTI_Callback+0x26fc>)
 8003edc:	481f      	ldr	r0, [pc, #124]	; (8003f5c <HAL_GPIO_EXTI_Callback+0x270c>)
 8003ede:	f7fd fc83 	bl	80017e8 <concatenate>
		  		  		  hiPressed=0;
 8003ee2:	4b15      	ldr	r3, [pc, #84]	; (8003f38 <HAL_GPIO_EXTI_Callback+0x26e8>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
    break;
 8003ee8:	f000 bff3 	b.w	8004ed2 <HAL_GPIO_EXTI_Callback+0x3682>
  case 11:
    /* code */
	  //11
	  if (menuState != -2 && menuState != -3) {
 8003eec:	4b18      	ldr	r3, [pc, #96]	; (8003f50 <HAL_GPIO_EXTI_Callback+0x2700>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f113 0f02 	cmn.w	r3, #2
 8003ef4:	f000 87ef 	beq.w	8004ed6 <HAL_GPIO_EXTI_Callback+0x3686>
 8003ef8:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <HAL_GPIO_EXTI_Callback+0x2700>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f113 0f03 	cmn.w	r3, #3
 8003f00:	f000 87e9 	beq.w	8004ed6 <HAL_GPIO_EXTI_Callback+0x3686>
	  		  count=0;
 8003f04:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <HAL_GPIO_EXTI_Callback+0x271c>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
	  	  }
    break;
 8003f0a:	f000 bfe4 	b.w	8004ed6 <HAL_GPIO_EXTI_Callback+0x3686>
  case 12:
    /* code */
	  //15
	  if (menuState != -2 && menuState != -3) {
 8003f0e:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <HAL_GPIO_EXTI_Callback+0x2700>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f113 0f02 	cmn.w	r3, #2
 8003f16:	f000 87e0 	beq.w	8004eda <HAL_GPIO_EXTI_Callback+0x368a>
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <HAL_GPIO_EXTI_Callback+0x2700>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f113 0f03 	cmn.w	r3, #3
 8003f22:	f000 87da 	beq.w	8004eda <HAL_GPIO_EXTI_Callback+0x368a>
	  		  count=0;
 8003f26:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <HAL_GPIO_EXTI_Callback+0x271c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
	  	  }
    break;
 8003f2c:	f000 bfd5 	b.w	8004eda <HAL_GPIO_EXTI_Callback+0x368a>
 8003f30:	0800e474 	.word	0x0800e474
 8003f34:	20000014 	.word	0x20000014
 8003f38:	20000764 	.word	0x20000764
 8003f3c:	20000760 	.word	0x20000760
 8003f40:	200006ec 	.word	0x200006ec
 8003f44:	2000076c 	.word	0x2000076c
 8003f48:	0800e478 	.word	0x0800e478
 8003f4c:	0800e47c 	.word	0x0800e47c
 8003f50:	2000000c 	.word	0x2000000c
 8003f54:	20000768 	.word	0x20000768
 8003f58:	20000700 	.word	0x20000700
 8003f5c:	20000028 	.word	0x20000028
 8003f60:	0800e468 	.word	0x0800e468
 8003f64:	0800e46c 	.word	0x0800e46c
 8003f68:	0800e470 	.word	0x0800e470
 8003f6c:	20000728 	.word	0x20000728
  case 13:
    /* code */
	  //4
	  if (menuState != -2 && menuState != -3) {
 8003f70:	4b8a      	ldr	r3, [pc, #552]	; (800419c <HAL_GPIO_EXTI_Callback+0x294c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f113 0f02 	cmn.w	r3, #2
 8003f78:	d007      	beq.n	8003f8a <HAL_GPIO_EXTI_Callback+0x273a>
 8003f7a:	4b88      	ldr	r3, [pc, #544]	; (800419c <HAL_GPIO_EXTI_Callback+0x294c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f113 0f03 	cmn.w	r3, #3
 8003f82:	d002      	beq.n	8003f8a <HAL_GPIO_EXTI_Callback+0x273a>
	  		  count=0;
 8003f84:	4b86      	ldr	r3, [pc, #536]	; (80041a0 <HAL_GPIO_EXTI_Callback+0x2950>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
	  	  }
	  if (menuState == 2 && input == 0) {
 8003f8a:	4b84      	ldr	r3, [pc, #528]	; (800419c <HAL_GPIO_EXTI_Callback+0x294c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d10a      	bne.n	8003fa8 <HAL_GPIO_EXTI_Callback+0x2758>
 8003f92:	4b84      	ldr	r3, [pc, #528]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x2954>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_GPIO_EXTI_Callback+0x2758>
	  	tens = 4;
 8003f9a:	4b83      	ldr	r3, [pc, #524]	; (80041a8 <HAL_GPIO_EXTI_Callback+0x2958>)
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	601a      	str	r2, [r3, #0]
	  	input = 1;
 8003fa0:	4b80      	ldr	r3, [pc, #512]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x2954>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	e00d      	b.n	8003fc4 <HAL_GPIO_EXTI_Callback+0x2774>
	  } else if (menuState == 2 && input == 1) {
 8003fa8:	4b7c      	ldr	r3, [pc, #496]	; (800419c <HAL_GPIO_EXTI_Callback+0x294c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d109      	bne.n	8003fc4 <HAL_GPIO_EXTI_Callback+0x2774>
 8003fb0:	4b7c      	ldr	r3, [pc, #496]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x2954>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <HAL_GPIO_EXTI_Callback+0x2774>
		  ones = 4;
 8003fb8:	4b7c      	ldr	r3, [pc, #496]	; (80041ac <HAL_GPIO_EXTI_Callback+0x295c>)
 8003fba:	2204      	movs	r2, #4
 8003fbc:	601a      	str	r2, [r3, #0]
		  input = 0;
 8003fbe:	4b79      	ldr	r3, [pc, #484]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x2954>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
	  } if (menuState == 20 && input == 0) {
 8003fc4:	4b75      	ldr	r3, [pc, #468]	; (800419c <HAL_GPIO_EXTI_Callback+0x294c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b14      	cmp	r3, #20
 8003fca:	d10a      	bne.n	8003fe2 <HAL_GPIO_EXTI_Callback+0x2792>
 8003fcc:	4b75      	ldr	r3, [pc, #468]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x2954>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <HAL_GPIO_EXTI_Callback+0x2792>
		  	tens = 4;
 8003fd4:	4b74      	ldr	r3, [pc, #464]	; (80041a8 <HAL_GPIO_EXTI_Callback+0x2958>)
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	601a      	str	r2, [r3, #0]
		  	input = 1;
 8003fda:	4b72      	ldr	r3, [pc, #456]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x2954>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	e25f      	b.n	80044a2 <HAL_GPIO_EXTI_Callback+0x2c52>
		  } else if (menuState == 20 && input == 1) {
 8003fe2:	4b6e      	ldr	r3, [pc, #440]	; (800419c <HAL_GPIO_EXTI_Callback+0x294c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b14      	cmp	r3, #20
 8003fe8:	d10a      	bne.n	8004000 <HAL_GPIO_EXTI_Callback+0x27b0>
 8003fea:	4b6e      	ldr	r3, [pc, #440]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x2954>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d106      	bne.n	8004000 <HAL_GPIO_EXTI_Callback+0x27b0>
			  ones = 4;
 8003ff2:	4b6e      	ldr	r3, [pc, #440]	; (80041ac <HAL_GPIO_EXTI_Callback+0x295c>)
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	601a      	str	r2, [r3, #0]
			  input = 0;
 8003ff8:	4b6a      	ldr	r3, [pc, #424]	; (80041a4 <HAL_GPIO_EXTI_Callback+0x2954>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e250      	b.n	80044a2 <HAL_GPIO_EXTI_Callback+0x2c52>
		  } else if (menuState == 4) {
 8004000:	4b66      	ldr	r3, [pc, #408]	; (800419c <HAL_GPIO_EXTI_Callback+0x294c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b04      	cmp	r3, #4
 8004006:	d119      	bne.n	800403c <HAL_GPIO_EXTI_Callback+0x27ec>
		  if (LED4 == 0) {
 8004008:	4b69      	ldr	r3, [pc, #420]	; (80041b0 <HAL_GPIO_EXTI_Callback+0x2960>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <HAL_GPIO_EXTI_Callback+0x27d6>
			  HAL_UART_Transmit(&huart2, "LED4 is off\n", 12, 100);
 8004010:	2364      	movs	r3, #100	; 0x64
 8004012:	220c      	movs	r2, #12
 8004014:	4967      	ldr	r1, [pc, #412]	; (80041b4 <HAL_GPIO_EXTI_Callback+0x2964>)
 8004016:	4868      	ldr	r0, [pc, #416]	; (80041b8 <HAL_GPIO_EXTI_Callback+0x2968>)
 8004018:	f008 f976 	bl	800c308 <HAL_UART_Transmit>
			  LED4 = 1;
 800401c:	4b64      	ldr	r3, [pc, #400]	; (80041b0 <HAL_GPIO_EXTI_Callback+0x2960>)
 800401e:	2201      	movs	r2, #1
 8004020:	601a      	str	r2, [r3, #0]
		  LED4 = s1.LED4;
		  menuState = 19;
		  tempTresh = s1.tempTresh;
		  HAL_UART_Transmit(&huart2, "runing new scenario\n", 20, 100);
	  }
    break;
 8004022:	f000 bf85 	b.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
			  HAL_UART_Transmit(&huart2, "LED4 is on\n", 11, 100);
 8004026:	2364      	movs	r3, #100	; 0x64
 8004028:	220b      	movs	r2, #11
 800402a:	4964      	ldr	r1, [pc, #400]	; (80041bc <HAL_GPIO_EXTI_Callback+0x296c>)
 800402c:	4862      	ldr	r0, [pc, #392]	; (80041b8 <HAL_GPIO_EXTI_Callback+0x2968>)
 800402e:	f008 f96b 	bl	800c308 <HAL_UART_Transmit>
			  LED4 = 0;
 8004032:	4b5f      	ldr	r3, [pc, #380]	; (80041b0 <HAL_GPIO_EXTI_Callback+0x2960>)
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
    break;
 8004038:	f000 bf7a 	b.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
	  } else if(menuState == 0) {
 800403c:	4b57      	ldr	r3, [pc, #348]	; (800419c <HAL_GPIO_EXTI_Callback+0x294c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d104      	bne.n	800404e <HAL_GPIO_EXTI_Callback+0x27fe>
		  menuState = 5;
 8004044:	4b55      	ldr	r3, [pc, #340]	; (800419c <HAL_GPIO_EXTI_Callback+0x294c>)
 8004046:	2205      	movs	r2, #5
 8004048:	601a      	str	r2, [r3, #0]
    break;
 800404a:	f000 bf71 	b.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
	  } else if (menuState == 12) {
 800404e:	4b53      	ldr	r3, [pc, #332]	; (800419c <HAL_GPIO_EXTI_Callback+0x294c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b0c      	cmp	r3, #12
 8004054:	f040 80ed 	bne.w	8004232 <HAL_GPIO_EXTI_Callback+0x29e2>
		  if (keyState == 0) {
 8004058:	4b59      	ldr	r3, [pc, #356]	; (80041c0 <HAL_GPIO_EXTI_Callback+0x2970>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <HAL_GPIO_EXTI_Callback+0x2826>
		  			  inputHi++;
 8004060:	4b58      	ldr	r3, [pc, #352]	; (80041c4 <HAL_GPIO_EXTI_Callback+0x2974>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	4a57      	ldr	r2, [pc, #348]	; (80041c4 <HAL_GPIO_EXTI_Callback+0x2974>)
 8004068:	6013      	str	r3, [r2, #0]
		  			  hiPressed = 0;
 800406a:	4b57      	ldr	r3, [pc, #348]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x2978>)
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
		  			  keyState = 4;
 8004070:	4b53      	ldr	r3, [pc, #332]	; (80041c0 <HAL_GPIO_EXTI_Callback+0x2970>)
 8004072:	2204      	movs	r2, #4
 8004074:	601a      	str	r2, [r3, #0]
		  		  if (keyState == 4) {
 8004076:	4b52      	ldr	r3, [pc, #328]	; (80041c0 <HAL_GPIO_EXTI_Callback+0x2970>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b04      	cmp	r3, #4
 800407c:	f040 8758 	bne.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
		  			  for (int i=0; i<strlen(substring); i++) {
 8004080:	2300      	movs	r3, #0
 8004082:	65bb      	str	r3, [r7, #88]	; 0x58
 8004084:	e007      	b.n	8004096 <HAL_GPIO_EXTI_Callback+0x2846>
		  			  	  substring[i] = '\0';
 8004086:	4a51      	ldr	r2, [pc, #324]	; (80041cc <HAL_GPIO_EXTI_Callback+0x297c>)
 8004088:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800408a:	4413      	add	r3, r2
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
		  			  for (int i=0; i<strlen(substring); i++) {
 8004090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004092:	3301      	adds	r3, #1
 8004094:	65bb      	str	r3, [r7, #88]	; 0x58
 8004096:	484d      	ldr	r0, [pc, #308]	; (80041cc <HAL_GPIO_EXTI_Callback+0x297c>)
 8004098:	f7fc f89a 	bl	80001d0 <strlen>
 800409c:	4602      	mov	r2, r0
 800409e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d8f0      	bhi.n	8004086 <HAL_GPIO_EXTI_Callback+0x2836>
		  		  	  if (hiPressed == 0) {
 80040a4:	4b48      	ldr	r3, [pc, #288]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x2978>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d131      	bne.n	8004110 <HAL_GPIO_EXTI_Callback+0x28c0>
		  		  		  strncpy(substring,hiTemp,inputHi-1);
 80040ac:	4b45      	ldr	r3, [pc, #276]	; (80041c4 <HAL_GPIO_EXTI_Callback+0x2974>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	461a      	mov	r2, r3
 80040b4:	4946      	ldr	r1, [pc, #280]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2980>)
 80040b6:	4845      	ldr	r0, [pc, #276]	; (80041cc <HAL_GPIO_EXTI_Callback+0x297c>)
 80040b8:	f009 fc18 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 80040bc:	2300      	movs	r3, #0
 80040be:	657b      	str	r3, [r7, #84]	; 0x54
 80040c0:	e007      	b.n	80040d2 <HAL_GPIO_EXTI_Callback+0x2882>
		  			  	  	  hiTemp[i] = '\0';
 80040c2:	4a43      	ldr	r2, [pc, #268]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2980>)
 80040c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040c6:	4413      	add	r3, r2
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 80040cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ce:	3301      	adds	r3, #1
 80040d0:	657b      	str	r3, [r7, #84]	; 0x54
 80040d2:	483f      	ldr	r0, [pc, #252]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2980>)
 80040d4:	f7fc f87c 	bl	80001d0 <strlen>
 80040d8:	4602      	mov	r2, r0
 80040da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040dc:	429a      	cmp	r2, r3
 80040de:	d8f0      	bhi.n	80040c2 <HAL_GPIO_EXTI_Callback+0x2872>
		  			  	  concatenate(hiTemp, substring);
 80040e0:	493a      	ldr	r1, [pc, #232]	; (80041cc <HAL_GPIO_EXTI_Callback+0x297c>)
 80040e2:	483b      	ldr	r0, [pc, #236]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2980>)
 80040e4:	f7fd fb80 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 80040e8:	4b3a      	ldr	r3, [pc, #232]	; (80041d4 <HAL_GPIO_EXTI_Callback+0x2984>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d104      	bne.n	80040fa <HAL_GPIO_EXTI_Callback+0x28aa>
		  			  				  		  concatenate(hiTemp, "j");
 80040f0:	4939      	ldr	r1, [pc, #228]	; (80041d8 <HAL_GPIO_EXTI_Callback+0x2988>)
 80040f2:	4837      	ldr	r0, [pc, #220]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2980>)
 80040f4:	f7fd fb78 	bl	80017e8 <concatenate>
 80040f8:	e003      	b.n	8004102 <HAL_GPIO_EXTI_Callback+0x28b2>
		  			  				  		concatenate(hiTemp, "J");
 80040fa:	4938      	ldr	r1, [pc, #224]	; (80041dc <HAL_GPIO_EXTI_Callback+0x298c>)
 80040fc:	4834      	ldr	r0, [pc, #208]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2980>)
 80040fe:	f7fd fb73 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 8004102:	4b31      	ldr	r3, [pc, #196]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x2978>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	4a2f      	ldr	r2, [pc, #188]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x2978>)
 800410a:	6013      	str	r3, [r2, #0]
    break;
 800410c:	f000 bf10 	b.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
		  		  	  } else if (hiPressed == 1) {
 8004110:	4b2d      	ldr	r3, [pc, #180]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x2978>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d131      	bne.n	800417c <HAL_GPIO_EXTI_Callback+0x292c>
		  			  	  strncpy(substring,hiTemp,inputHi-1);
 8004118:	4b2a      	ldr	r3, [pc, #168]	; (80041c4 <HAL_GPIO_EXTI_Callback+0x2974>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3b01      	subs	r3, #1
 800411e:	461a      	mov	r2, r3
 8004120:	492b      	ldr	r1, [pc, #172]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2980>)
 8004122:	482a      	ldr	r0, [pc, #168]	; (80041cc <HAL_GPIO_EXTI_Callback+0x297c>)
 8004124:	f009 fbe2 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 8004128:	2300      	movs	r3, #0
 800412a:	653b      	str	r3, [r7, #80]	; 0x50
 800412c:	e007      	b.n	800413e <HAL_GPIO_EXTI_Callback+0x28ee>
		  				  	  hiTemp[i] = '\0';
 800412e:	4a28      	ldr	r2, [pc, #160]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2980>)
 8004130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004132:	4413      	add	r3, r2
 8004134:	2200      	movs	r2, #0
 8004136:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 8004138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800413a:	3301      	adds	r3, #1
 800413c:	653b      	str	r3, [r7, #80]	; 0x50
 800413e:	4824      	ldr	r0, [pc, #144]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2980>)
 8004140:	f7fc f846 	bl	80001d0 <strlen>
 8004144:	4602      	mov	r2, r0
 8004146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004148:	429a      	cmp	r2, r3
 800414a:	d8f0      	bhi.n	800412e <HAL_GPIO_EXTI_Callback+0x28de>
		  			  	  concatenate(hiTemp, substring);
 800414c:	491f      	ldr	r1, [pc, #124]	; (80041cc <HAL_GPIO_EXTI_Callback+0x297c>)
 800414e:	4820      	ldr	r0, [pc, #128]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2980>)
 8004150:	f7fd fb4a 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 8004154:	4b1f      	ldr	r3, [pc, #124]	; (80041d4 <HAL_GPIO_EXTI_Callback+0x2984>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d104      	bne.n	8004166 <HAL_GPIO_EXTI_Callback+0x2916>
		  			  				  		  concatenate(hiTemp, "k");
 800415c:	4920      	ldr	r1, [pc, #128]	; (80041e0 <HAL_GPIO_EXTI_Callback+0x2990>)
 800415e:	481c      	ldr	r0, [pc, #112]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2980>)
 8004160:	f7fd fb42 	bl	80017e8 <concatenate>
 8004164:	e003      	b.n	800416e <HAL_GPIO_EXTI_Callback+0x291e>
		  			  				  		concatenate(hiTemp, "K");
 8004166:	491f      	ldr	r1, [pc, #124]	; (80041e4 <HAL_GPIO_EXTI_Callback+0x2994>)
 8004168:	4819      	ldr	r0, [pc, #100]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2980>)
 800416a:	f7fd fb3d 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 800416e:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x2978>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3301      	adds	r3, #1
 8004174:	4a14      	ldr	r2, [pc, #80]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x2978>)
 8004176:	6013      	str	r3, [r2, #0]
    break;
 8004178:	f000 beda 	b.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
		  		  	  } else if(hiPressed == 2) {
 800417c:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <HAL_GPIO_EXTI_Callback+0x2978>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b02      	cmp	r3, #2
 8004182:	f040 86d5 	bne.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
		  		  		  strncpy(substring, hiTemp, inputHi-1);
 8004186:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <HAL_GPIO_EXTI_Callback+0x2974>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3b01      	subs	r3, #1
 800418c:	461a      	mov	r2, r3
 800418e:	4910      	ldr	r1, [pc, #64]	; (80041d0 <HAL_GPIO_EXTI_Callback+0x2980>)
 8004190:	480e      	ldr	r0, [pc, #56]	; (80041cc <HAL_GPIO_EXTI_Callback+0x297c>)
 8004192:	f009 fbab 	bl	800d8ec <strncpy>
		  		  		  for (int i=0; i<strlen(hiTemp); i++) {
 8004196:	2300      	movs	r3, #0
 8004198:	64fb      	str	r3, [r7, #76]	; 0x4c
 800419a:	e02d      	b.n	80041f8 <HAL_GPIO_EXTI_Callback+0x29a8>
 800419c:	2000000c 	.word	0x2000000c
 80041a0:	20000728 	.word	0x20000728
 80041a4:	200006a8 	.word	0x200006a8
 80041a8:	2000069c 	.word	0x2000069c
 80041ac:	20000698 	.word	0x20000698
 80041b0:	20000720 	.word	0x20000720
 80041b4:	0800e480 	.word	0x0800e480
 80041b8:	20000304 	.word	0x20000304
 80041bc:	0800e490 	.word	0x0800e490
 80041c0:	20000768 	.word	0x20000768
 80041c4:	20000760 	.word	0x20000760
 80041c8:	20000764 	.word	0x20000764
 80041cc:	200006ec 	.word	0x200006ec
 80041d0:	20000014 	.word	0x20000014
 80041d4:	2000076c 	.word	0x2000076c
 80041d8:	0800e49c 	.word	0x0800e49c
 80041dc:	0800e4a0 	.word	0x0800e4a0
 80041e0:	0800e4a4 	.word	0x0800e4a4
 80041e4:	0800e4a8 	.word	0x0800e4a8
		  		  			  hiTemp[i] = '\0';
 80041e8:	4a81      	ldr	r2, [pc, #516]	; (80043f0 <HAL_GPIO_EXTI_Callback+0x2ba0>)
 80041ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ec:	4413      	add	r3, r2
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
		  		  		  for (int i=0; i<strlen(hiTemp); i++) {
 80041f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f4:	3301      	adds	r3, #1
 80041f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f8:	487d      	ldr	r0, [pc, #500]	; (80043f0 <HAL_GPIO_EXTI_Callback+0x2ba0>)
 80041fa:	f7fb ffe9 	bl	80001d0 <strlen>
 80041fe:	4602      	mov	r2, r0
 8004200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004202:	429a      	cmp	r2, r3
 8004204:	d8f0      	bhi.n	80041e8 <HAL_GPIO_EXTI_Callback+0x2998>
		  		  		  concatenate(hiTemp, substring);
 8004206:	497b      	ldr	r1, [pc, #492]	; (80043f4 <HAL_GPIO_EXTI_Callback+0x2ba4>)
 8004208:	4879      	ldr	r0, [pc, #484]	; (80043f0 <HAL_GPIO_EXTI_Callback+0x2ba0>)
 800420a:	f7fd faed 	bl	80017e8 <concatenate>
		  		  		if (isBigger == 0) {
 800420e:	4b7a      	ldr	r3, [pc, #488]	; (80043f8 <HAL_GPIO_EXTI_Callback+0x2ba8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d104      	bne.n	8004220 <HAL_GPIO_EXTI_Callback+0x29d0>
		  		  					  		  concatenate(hiTemp, "l");
 8004216:	4979      	ldr	r1, [pc, #484]	; (80043fc <HAL_GPIO_EXTI_Callback+0x2bac>)
 8004218:	4875      	ldr	r0, [pc, #468]	; (80043f0 <HAL_GPIO_EXTI_Callback+0x2ba0>)
 800421a:	f7fd fae5 	bl	80017e8 <concatenate>
 800421e:	e003      	b.n	8004228 <HAL_GPIO_EXTI_Callback+0x29d8>
		  		  					  		concatenate(hiTemp, "L");
 8004220:	4977      	ldr	r1, [pc, #476]	; (8004400 <HAL_GPIO_EXTI_Callback+0x2bb0>)
 8004222:	4873      	ldr	r0, [pc, #460]	; (80043f0 <HAL_GPIO_EXTI_Callback+0x2ba0>)
 8004224:	f7fd fae0 	bl	80017e8 <concatenate>
		  		  		  hiPressed=0;
 8004228:	4b76      	ldr	r3, [pc, #472]	; (8004404 <HAL_GPIO_EXTI_Callback+0x2bb4>)
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
    break;
 800422e:	f000 be7f 	b.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
	  } else if (menuState == 13) {
 8004232:	4b75      	ldr	r3, [pc, #468]	; (8004408 <HAL_GPIO_EXTI_Callback+0x2bb8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b0d      	cmp	r3, #13
 8004238:	f040 80c7 	bne.w	80043ca <HAL_GPIO_EXTI_Callback+0x2b7a>
		  if (keyState == 0) {
 800423c:	4b73      	ldr	r3, [pc, #460]	; (800440c <HAL_GPIO_EXTI_Callback+0x2bbc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10a      	bne.n	800425a <HAL_GPIO_EXTI_Callback+0x2a0a>
		  			  inputHi++;
 8004244:	4b72      	ldr	r3, [pc, #456]	; (8004410 <HAL_GPIO_EXTI_Callback+0x2bc0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3301      	adds	r3, #1
 800424a:	4a71      	ldr	r2, [pc, #452]	; (8004410 <HAL_GPIO_EXTI_Callback+0x2bc0>)
 800424c:	6013      	str	r3, [r2, #0]
		  			  hiPressed = 0;
 800424e:	4b6d      	ldr	r3, [pc, #436]	; (8004404 <HAL_GPIO_EXTI_Callback+0x2bb4>)
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
		  			  keyState = 4;
 8004254:	4b6d      	ldr	r3, [pc, #436]	; (800440c <HAL_GPIO_EXTI_Callback+0x2bbc>)
 8004256:	2204      	movs	r2, #4
 8004258:	601a      	str	r2, [r3, #0]
		  		  if (keyState == 4) {
 800425a:	4b6c      	ldr	r3, [pc, #432]	; (800440c <HAL_GPIO_EXTI_Callback+0x2bbc>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b04      	cmp	r3, #4
 8004260:	f040 8666 	bne.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
		  			  for (int i=0; i<strlen(byeSub); i++) {
 8004264:	2300      	movs	r3, #0
 8004266:	64bb      	str	r3, [r7, #72]	; 0x48
 8004268:	e007      	b.n	800427a <HAL_GPIO_EXTI_Callback+0x2a2a>
		  				byeSub[i] = '\0';
 800426a:	4a6a      	ldr	r2, [pc, #424]	; (8004414 <HAL_GPIO_EXTI_Callback+0x2bc4>)
 800426c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800426e:	4413      	add	r3, r2
 8004270:	2200      	movs	r2, #0
 8004272:	701a      	strb	r2, [r3, #0]
		  			  for (int i=0; i<strlen(byeSub); i++) {
 8004274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004276:	3301      	adds	r3, #1
 8004278:	64bb      	str	r3, [r7, #72]	; 0x48
 800427a:	4866      	ldr	r0, [pc, #408]	; (8004414 <HAL_GPIO_EXTI_Callback+0x2bc4>)
 800427c:	f7fb ffa8 	bl	80001d0 <strlen>
 8004280:	4602      	mov	r2, r0
 8004282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004284:	429a      	cmp	r2, r3
 8004286:	d8f0      	bhi.n	800426a <HAL_GPIO_EXTI_Callback+0x2a1a>
		  		  	  if (hiPressed == 0) {
 8004288:	4b5e      	ldr	r3, [pc, #376]	; (8004404 <HAL_GPIO_EXTI_Callback+0x2bb4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d131      	bne.n	80042f4 <HAL_GPIO_EXTI_Callback+0x2aa4>
		  		  		  strncpy(byeSub,byeTemp,inputHi-1);
 8004290:	4b5f      	ldr	r3, [pc, #380]	; (8004410 <HAL_GPIO_EXTI_Callback+0x2bc0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3b01      	subs	r3, #1
 8004296:	461a      	mov	r2, r3
 8004298:	495f      	ldr	r1, [pc, #380]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 800429a:	485e      	ldr	r0, [pc, #376]	; (8004414 <HAL_GPIO_EXTI_Callback+0x2bc4>)
 800429c:	f009 fb26 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 80042a0:	2300      	movs	r3, #0
 80042a2:	647b      	str	r3, [r7, #68]	; 0x44
 80042a4:	e007      	b.n	80042b6 <HAL_GPIO_EXTI_Callback+0x2a66>
		  			  		byeTemp[i] = '\0';
 80042a6:	4a5c      	ldr	r2, [pc, #368]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 80042a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042aa:	4413      	add	r3, r2
 80042ac:	2200      	movs	r2, #0
 80042ae:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 80042b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b2:	3301      	adds	r3, #1
 80042b4:	647b      	str	r3, [r7, #68]	; 0x44
 80042b6:	484e      	ldr	r0, [pc, #312]	; (80043f0 <HAL_GPIO_EXTI_Callback+0x2ba0>)
 80042b8:	f7fb ff8a 	bl	80001d0 <strlen>
 80042bc:	4602      	mov	r2, r0
 80042be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d8f0      	bhi.n	80042a6 <HAL_GPIO_EXTI_Callback+0x2a56>
		  			  	  concatenate(byeTemp, byeSub);
 80042c4:	4953      	ldr	r1, [pc, #332]	; (8004414 <HAL_GPIO_EXTI_Callback+0x2bc4>)
 80042c6:	4854      	ldr	r0, [pc, #336]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 80042c8:	f7fd fa8e 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 80042cc:	4b4a      	ldr	r3, [pc, #296]	; (80043f8 <HAL_GPIO_EXTI_Callback+0x2ba8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d104      	bne.n	80042de <HAL_GPIO_EXTI_Callback+0x2a8e>
		  			  				  		  concatenate(byeTemp, "j");
 80042d4:	4951      	ldr	r1, [pc, #324]	; (800441c <HAL_GPIO_EXTI_Callback+0x2bcc>)
 80042d6:	4850      	ldr	r0, [pc, #320]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 80042d8:	f7fd fa86 	bl	80017e8 <concatenate>
 80042dc:	e003      	b.n	80042e6 <HAL_GPIO_EXTI_Callback+0x2a96>
		  			  				  		concatenate(byeTemp, "J");
 80042de:	4950      	ldr	r1, [pc, #320]	; (8004420 <HAL_GPIO_EXTI_Callback+0x2bd0>)
 80042e0:	484d      	ldr	r0, [pc, #308]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 80042e2:	f7fd fa81 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 80042e6:	4b47      	ldr	r3, [pc, #284]	; (8004404 <HAL_GPIO_EXTI_Callback+0x2bb4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3301      	adds	r3, #1
 80042ec:	4a45      	ldr	r2, [pc, #276]	; (8004404 <HAL_GPIO_EXTI_Callback+0x2bb4>)
 80042ee:	6013      	str	r3, [r2, #0]
    break;
 80042f0:	f000 be1e 	b.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
		  		  	  } else if (hiPressed == 1) {
 80042f4:	4b43      	ldr	r3, [pc, #268]	; (8004404 <HAL_GPIO_EXTI_Callback+0x2bb4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d131      	bne.n	8004360 <HAL_GPIO_EXTI_Callback+0x2b10>
		  			  	  strncpy(byeSub,byeTemp,inputHi-1);
 80042fc:	4b44      	ldr	r3, [pc, #272]	; (8004410 <HAL_GPIO_EXTI_Callback+0x2bc0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3b01      	subs	r3, #1
 8004302:	461a      	mov	r2, r3
 8004304:	4944      	ldr	r1, [pc, #272]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 8004306:	4843      	ldr	r0, [pc, #268]	; (8004414 <HAL_GPIO_EXTI_Callback+0x2bc4>)
 8004308:	f009 faf0 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 800430c:	2300      	movs	r3, #0
 800430e:	643b      	str	r3, [r7, #64]	; 0x40
 8004310:	e007      	b.n	8004322 <HAL_GPIO_EXTI_Callback+0x2ad2>
		  			  		byeTemp[i] = '\0';
 8004312:	4a41      	ldr	r2, [pc, #260]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 8004314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004316:	4413      	add	r3, r2
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 800431c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800431e:	3301      	adds	r3, #1
 8004320:	643b      	str	r3, [r7, #64]	; 0x40
 8004322:	483d      	ldr	r0, [pc, #244]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 8004324:	f7fb ff54 	bl	80001d0 <strlen>
 8004328:	4602      	mov	r2, r0
 800432a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800432c:	429a      	cmp	r2, r3
 800432e:	d8f0      	bhi.n	8004312 <HAL_GPIO_EXTI_Callback+0x2ac2>
		  			  	  concatenate(byeTemp, byeSub);
 8004330:	4938      	ldr	r1, [pc, #224]	; (8004414 <HAL_GPIO_EXTI_Callback+0x2bc4>)
 8004332:	4839      	ldr	r0, [pc, #228]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 8004334:	f7fd fa58 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 8004338:	4b2f      	ldr	r3, [pc, #188]	; (80043f8 <HAL_GPIO_EXTI_Callback+0x2ba8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d104      	bne.n	800434a <HAL_GPIO_EXTI_Callback+0x2afa>
		  			  				  		  concatenate(byeTemp, "k");
 8004340:	4938      	ldr	r1, [pc, #224]	; (8004424 <HAL_GPIO_EXTI_Callback+0x2bd4>)
 8004342:	4835      	ldr	r0, [pc, #212]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 8004344:	f7fd fa50 	bl	80017e8 <concatenate>
 8004348:	e003      	b.n	8004352 <HAL_GPIO_EXTI_Callback+0x2b02>
		  			  				  		concatenate(byeTemp, "K");
 800434a:	4937      	ldr	r1, [pc, #220]	; (8004428 <HAL_GPIO_EXTI_Callback+0x2bd8>)
 800434c:	4832      	ldr	r0, [pc, #200]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 800434e:	f7fd fa4b 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 8004352:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <HAL_GPIO_EXTI_Callback+0x2bb4>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3301      	adds	r3, #1
 8004358:	4a2a      	ldr	r2, [pc, #168]	; (8004404 <HAL_GPIO_EXTI_Callback+0x2bb4>)
 800435a:	6013      	str	r3, [r2, #0]
    break;
 800435c:	f000 bde8 	b.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
		  		  	  } else if(hiPressed == 2) {
 8004360:	4b28      	ldr	r3, [pc, #160]	; (8004404 <HAL_GPIO_EXTI_Callback+0x2bb4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b02      	cmp	r3, #2
 8004366:	f040 85e3 	bne.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
		  		  		  strncpy(byeSub, byeTemp, inputHi-1);
 800436a:	4b29      	ldr	r3, [pc, #164]	; (8004410 <HAL_GPIO_EXTI_Callback+0x2bc0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3b01      	subs	r3, #1
 8004370:	461a      	mov	r2, r3
 8004372:	4929      	ldr	r1, [pc, #164]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 8004374:	4827      	ldr	r0, [pc, #156]	; (8004414 <HAL_GPIO_EXTI_Callback+0x2bc4>)
 8004376:	f009 fab9 	bl	800d8ec <strncpy>
		  		  		  for (int i=0; i<strlen(byeTemp); i++) {
 800437a:	2300      	movs	r3, #0
 800437c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800437e:	e007      	b.n	8004390 <HAL_GPIO_EXTI_Callback+0x2b40>
		  		  			byeTemp[i] = '\0';
 8004380:	4a25      	ldr	r2, [pc, #148]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 8004382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004384:	4413      	add	r3, r2
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
		  		  		  for (int i=0; i<strlen(byeTemp); i++) {
 800438a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438c:	3301      	adds	r3, #1
 800438e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004390:	4821      	ldr	r0, [pc, #132]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 8004392:	f7fb ff1d 	bl	80001d0 <strlen>
 8004396:	4602      	mov	r2, r0
 8004398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439a:	429a      	cmp	r2, r3
 800439c:	d8f0      	bhi.n	8004380 <HAL_GPIO_EXTI_Callback+0x2b30>
		  		  		  concatenate(byeTemp, byeSub);
 800439e:	491d      	ldr	r1, [pc, #116]	; (8004414 <HAL_GPIO_EXTI_Callback+0x2bc4>)
 80043a0:	481d      	ldr	r0, [pc, #116]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 80043a2:	f7fd fa21 	bl	80017e8 <concatenate>
		  		  		if (isBigger == 0) {
 80043a6:	4b14      	ldr	r3, [pc, #80]	; (80043f8 <HAL_GPIO_EXTI_Callback+0x2ba8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d104      	bne.n	80043b8 <HAL_GPIO_EXTI_Callback+0x2b68>
		  		  					  		  concatenate(byeTemp, "l");
 80043ae:	4913      	ldr	r1, [pc, #76]	; (80043fc <HAL_GPIO_EXTI_Callback+0x2bac>)
 80043b0:	4819      	ldr	r0, [pc, #100]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 80043b2:	f7fd fa19 	bl	80017e8 <concatenate>
 80043b6:	e003      	b.n	80043c0 <HAL_GPIO_EXTI_Callback+0x2b70>
		  		  					  		concatenate(byeTemp, "L");
 80043b8:	4911      	ldr	r1, [pc, #68]	; (8004400 <HAL_GPIO_EXTI_Callback+0x2bb0>)
 80043ba:	4817      	ldr	r0, [pc, #92]	; (8004418 <HAL_GPIO_EXTI_Callback+0x2bc8>)
 80043bc:	f7fd fa14 	bl	80017e8 <concatenate>
		  		  		  hiPressed=0;
 80043c0:	4b10      	ldr	r3, [pc, #64]	; (8004404 <HAL_GPIO_EXTI_Callback+0x2bb4>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
    break;
 80043c6:	f000 bdb3 	b.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
	  } else if (menuState == 18) {
 80043ca:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <HAL_GPIO_EXTI_Callback+0x2bb8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b12      	cmp	r3, #18
 80043d0:	d12e      	bne.n	8004430 <HAL_GPIO_EXTI_Callback+0x2be0>
		  if (s1.LED4 == 0) {
 80043d2:	4b16      	ldr	r3, [pc, #88]	; (800442c <HAL_GPIO_EXTI_Callback+0x2bdc>)
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d104      	bne.n	80043e4 <HAL_GPIO_EXTI_Callback+0x2b94>
			  s1.LED4 = 1;
 80043da:	4b14      	ldr	r3, [pc, #80]	; (800442c <HAL_GPIO_EXTI_Callback+0x2bdc>)
 80043dc:	2201      	movs	r2, #1
 80043de:	61da      	str	r2, [r3, #28]
    break;
 80043e0:	f000 bda6 	b.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
			  s1.LED4 = 0;
 80043e4:	4b11      	ldr	r3, [pc, #68]	; (800442c <HAL_GPIO_EXTI_Callback+0x2bdc>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	61da      	str	r2, [r3, #28]
    break;
 80043ea:	f000 bda1 	b.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
 80043ee:	bf00      	nop
 80043f0:	20000014 	.word	0x20000014
 80043f4:	200006ec 	.word	0x200006ec
 80043f8:	2000076c 	.word	0x2000076c
 80043fc:	0800e4ac 	.word	0x0800e4ac
 8004400:	0800e4b0 	.word	0x0800e4b0
 8004404:	20000764 	.word	0x20000764
 8004408:	2000000c 	.word	0x2000000c
 800440c:	20000768 	.word	0x20000768
 8004410:	20000760 	.word	0x20000760
 8004414:	20000700 	.word	0x20000700
 8004418:	20000028 	.word	0x20000028
 800441c:	0800e49c 	.word	0x0800e49c
 8004420:	0800e4a0 	.word	0x0800e4a0
 8004424:	0800e4a4 	.word	0x0800e4a4
 8004428:	0800e4a8 	.word	0x0800e4a8
 800442c:	200007a4 	.word	0x200007a4
	  } else if (menuState == 5 && isNewScenario == 1) {
 8004430:	4b8f      	ldr	r3, [pc, #572]	; (8004670 <HAL_GPIO_EXTI_Callback+0x2e20>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b05      	cmp	r3, #5
 8004436:	f040 857b 	bne.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
 800443a:	4b8e      	ldr	r3, [pc, #568]	; (8004674 <HAL_GPIO_EXTI_Callback+0x2e24>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b01      	cmp	r3, #1
 8004440:	f040 8576 	bne.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
		  sleepIsOn = s1.isSleep;
 8004444:	4b8c      	ldr	r3, [pc, #560]	; (8004678 <HAL_GPIO_EXTI_Callback+0x2e28>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a8c      	ldr	r2, [pc, #560]	; (800467c <HAL_GPIO_EXTI_Callback+0x2e2c>)
 800444a:	6013      	str	r3, [r2, #0]
		  buzzerForPir = s1.buzzerForPir;
 800444c:	4b8a      	ldr	r3, [pc, #552]	; (8004678 <HAL_GPIO_EXTI_Callback+0x2e28>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	4a8b      	ldr	r2, [pc, #556]	; (8004680 <HAL_GPIO_EXTI_Callback+0x2e30>)
 8004452:	6013      	str	r3, [r2, #0]
		  buzzerForTemp = s1.buzzerFortemp;
 8004454:	4b88      	ldr	r3, [pc, #544]	; (8004678 <HAL_GPIO_EXTI_Callback+0x2e28>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	4a8a      	ldr	r2, [pc, #552]	; (8004684 <HAL_GPIO_EXTI_Callback+0x2e34>)
 800445a:	6013      	str	r3, [r2, #0]
		  pirIsOn = s1.Pir;
 800445c:	4b86      	ldr	r3, [pc, #536]	; (8004678 <HAL_GPIO_EXTI_Callback+0x2e28>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4a89      	ldr	r2, [pc, #548]	; (8004688 <HAL_GPIO_EXTI_Callback+0x2e38>)
 8004462:	6013      	str	r3, [r2, #0]
		  LED1 = s1.LED1;
 8004464:	4b84      	ldr	r3, [pc, #528]	; (8004678 <HAL_GPIO_EXTI_Callback+0x2e28>)
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	4a88      	ldr	r2, [pc, #544]	; (800468c <HAL_GPIO_EXTI_Callback+0x2e3c>)
 800446a:	6013      	str	r3, [r2, #0]
		  LED2 = s1.LED2;
 800446c:	4b82      	ldr	r3, [pc, #520]	; (8004678 <HAL_GPIO_EXTI_Callback+0x2e28>)
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	4a87      	ldr	r2, [pc, #540]	; (8004690 <HAL_GPIO_EXTI_Callback+0x2e40>)
 8004472:	6013      	str	r3, [r2, #0]
		  LED3 = s1.LED3;
 8004474:	4b80      	ldr	r3, [pc, #512]	; (8004678 <HAL_GPIO_EXTI_Callback+0x2e28>)
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	4a86      	ldr	r2, [pc, #536]	; (8004694 <HAL_GPIO_EXTI_Callback+0x2e44>)
 800447a:	6013      	str	r3, [r2, #0]
		  LED4 = s1.LED4;
 800447c:	4b7e      	ldr	r3, [pc, #504]	; (8004678 <HAL_GPIO_EXTI_Callback+0x2e28>)
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	4a85      	ldr	r2, [pc, #532]	; (8004698 <HAL_GPIO_EXTI_Callback+0x2e48>)
 8004482:	6013      	str	r3, [r2, #0]
		  menuState = 19;
 8004484:	4b7a      	ldr	r3, [pc, #488]	; (8004670 <HAL_GPIO_EXTI_Callback+0x2e20>)
 8004486:	2213      	movs	r2, #19
 8004488:	601a      	str	r2, [r3, #0]
		  tempTresh = s1.tempTresh;
 800448a:	4b7b      	ldr	r3, [pc, #492]	; (8004678 <HAL_GPIO_EXTI_Callback+0x2e28>)
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	4a83      	ldr	r2, [pc, #524]	; (800469c <HAL_GPIO_EXTI_Callback+0x2e4c>)
 8004490:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart2, "runing new scenario\n", 20, 100);
 8004492:	2364      	movs	r3, #100	; 0x64
 8004494:	2214      	movs	r2, #20
 8004496:	4982      	ldr	r1, [pc, #520]	; (80046a0 <HAL_GPIO_EXTI_Callback+0x2e50>)
 8004498:	4882      	ldr	r0, [pc, #520]	; (80046a4 <HAL_GPIO_EXTI_Callback+0x2e54>)
 800449a:	f007 ff35 	bl	800c308 <HAL_UART_Transmit>
    break;
 800449e:	f000 bd47 	b.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
 80044a2:	f000 bd45 	b.w	8004f30 <HAL_GPIO_EXTI_Callback+0x36e0>
  case 14:
    /* code */
	  //8
	  if (menuState != -2 && menuState != -3) {
 80044a6:	4b72      	ldr	r3, [pc, #456]	; (8004670 <HAL_GPIO_EXTI_Callback+0x2e20>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f113 0f02 	cmn.w	r3, #2
 80044ae:	d007      	beq.n	80044c0 <HAL_GPIO_EXTI_Callback+0x2c70>
 80044b0:	4b6f      	ldr	r3, [pc, #444]	; (8004670 <HAL_GPIO_EXTI_Callback+0x2e20>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f113 0f03 	cmn.w	r3, #3
 80044b8:	d002      	beq.n	80044c0 <HAL_GPIO_EXTI_Callback+0x2c70>
	  		  count=0;
 80044ba:	4b7b      	ldr	r3, [pc, #492]	; (80046a8 <HAL_GPIO_EXTI_Callback+0x2e58>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
	  	  }
	  if (menuState == 2 && input == 0) {
 80044c0:	4b6b      	ldr	r3, [pc, #428]	; (8004670 <HAL_GPIO_EXTI_Callback+0x2e20>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d10a      	bne.n	80044de <HAL_GPIO_EXTI_Callback+0x2c8e>
 80044c8:	4b78      	ldr	r3, [pc, #480]	; (80046ac <HAL_GPIO_EXTI_Callback+0x2e5c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d106      	bne.n	80044de <HAL_GPIO_EXTI_Callback+0x2c8e>
	  	tens = 8;
 80044d0:	4b77      	ldr	r3, [pc, #476]	; (80046b0 <HAL_GPIO_EXTI_Callback+0x2e60>)
 80044d2:	2208      	movs	r2, #8
 80044d4:	601a      	str	r2, [r3, #0]
	  	input = 1;
 80044d6:	4b75      	ldr	r3, [pc, #468]	; (80046ac <HAL_GPIO_EXTI_Callback+0x2e5c>)
 80044d8:	2201      	movs	r2, #1
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	e00d      	b.n	80044fa <HAL_GPIO_EXTI_Callback+0x2caa>
	  } else if (menuState == 2 && input == 1) {
 80044de:	4b64      	ldr	r3, [pc, #400]	; (8004670 <HAL_GPIO_EXTI_Callback+0x2e20>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d109      	bne.n	80044fa <HAL_GPIO_EXTI_Callback+0x2caa>
 80044e6:	4b71      	ldr	r3, [pc, #452]	; (80046ac <HAL_GPIO_EXTI_Callback+0x2e5c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d105      	bne.n	80044fa <HAL_GPIO_EXTI_Callback+0x2caa>
		  	ones = 8;
 80044ee:	4b71      	ldr	r3, [pc, #452]	; (80046b4 <HAL_GPIO_EXTI_Callback+0x2e64>)
 80044f0:	2208      	movs	r2, #8
 80044f2:	601a      	str	r2, [r3, #0]
			input = 0;
 80044f4:	4b6d      	ldr	r3, [pc, #436]	; (80046ac <HAL_GPIO_EXTI_Callback+0x2e5c>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
	  } if (menuState == 20 && input == 0) {
 80044fa:	4b5d      	ldr	r3, [pc, #372]	; (8004670 <HAL_GPIO_EXTI_Callback+0x2e20>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b14      	cmp	r3, #20
 8004500:	d10a      	bne.n	8004518 <HAL_GPIO_EXTI_Callback+0x2cc8>
 8004502:	4b6a      	ldr	r3, [pc, #424]	; (80046ac <HAL_GPIO_EXTI_Callback+0x2e5c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_GPIO_EXTI_Callback+0x2cc8>
		  	tens = 8;
 800450a:	4b69      	ldr	r3, [pc, #420]	; (80046b0 <HAL_GPIO_EXTI_Callback+0x2e60>)
 800450c:	2208      	movs	r2, #8
 800450e:	601a      	str	r2, [r3, #0]
		  	input = 1;
 8004510:	4b66      	ldr	r3, [pc, #408]	; (80046ac <HAL_GPIO_EXTI_Callback+0x2e5c>)
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	e32b      	b.n	8004b70 <HAL_GPIO_EXTI_Callback+0x3320>
	} else if (menuState == 20 && input == 1) {
 8004518:	4b55      	ldr	r3, [pc, #340]	; (8004670 <HAL_GPIO_EXTI_Callback+0x2e20>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b14      	cmp	r3, #20
 800451e:	d10a      	bne.n	8004536 <HAL_GPIO_EXTI_Callback+0x2ce6>
 8004520:	4b62      	ldr	r3, [pc, #392]	; (80046ac <HAL_GPIO_EXTI_Callback+0x2e5c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d106      	bne.n	8004536 <HAL_GPIO_EXTI_Callback+0x2ce6>
			  	ones = 8;
 8004528:	4b62      	ldr	r3, [pc, #392]	; (80046b4 <HAL_GPIO_EXTI_Callback+0x2e64>)
 800452a:	2208      	movs	r2, #8
 800452c:	601a      	str	r2, [r3, #0]
				input = 0;
 800452e:	4b5f      	ldr	r3, [pc, #380]	; (80046ac <HAL_GPIO_EXTI_Callback+0x2e5c>)
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	e31c      	b.n	8004b70 <HAL_GPIO_EXTI_Callback+0x3320>
	  } else if (menuState == 12) {
 8004536:	4b4e      	ldr	r3, [pc, #312]	; (8004670 <HAL_GPIO_EXTI_Callback+0x2e20>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b0c      	cmp	r3, #12
 800453c:	f040 8193 	bne.w	8004866 <HAL_GPIO_EXTI_Callback+0x3016>
		  if (keyState == 0) {
 8004540:	4b5d      	ldr	r3, [pc, #372]	; (80046b8 <HAL_GPIO_EXTI_Callback+0x2e68>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <HAL_GPIO_EXTI_Callback+0x2d0e>
		  			  inputHi++;
 8004548:	4b5c      	ldr	r3, [pc, #368]	; (80046bc <HAL_GPIO_EXTI_Callback+0x2e6c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3301      	adds	r3, #1
 800454e:	4a5b      	ldr	r2, [pc, #364]	; (80046bc <HAL_GPIO_EXTI_Callback+0x2e6c>)
 8004550:	6013      	str	r3, [r2, #0]
		  			  hiPressed = 0;
 8004552:	4b5b      	ldr	r3, [pc, #364]	; (80046c0 <HAL_GPIO_EXTI_Callback+0x2e70>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
		  			  keyState = 8;
 8004558:	4b57      	ldr	r3, [pc, #348]	; (80046b8 <HAL_GPIO_EXTI_Callback+0x2e68>)
 800455a:	2208      	movs	r2, #8
 800455c:	601a      	str	r2, [r3, #0]
		  		  }

		  		  if (keyState == 8) {
 800455e:	4b56      	ldr	r3, [pc, #344]	; (80046b8 <HAL_GPIO_EXTI_Callback+0x2e68>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b08      	cmp	r3, #8
 8004564:	f040 84e6 	bne.w	8004f34 <HAL_GPIO_EXTI_Callback+0x36e4>
		  			  for (int i=0; i<strlen(substring); i++) {
 8004568:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800456c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	e013      	b.n	800459e <HAL_GPIO_EXTI_Callback+0x2d4e>
		  			  	  substring[i] = '\0';
 8004576:	4a53      	ldr	r2, [pc, #332]	; (80046c4 <HAL_GPIO_EXTI_Callback+0x2e74>)
 8004578:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800457c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4413      	add	r3, r2
 8004584:	2200      	movs	r2, #0
 8004586:	701a      	strb	r2, [r3, #0]
		  			  for (int i=0; i<strlen(substring); i++) {
 8004588:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800458c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004590:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004594:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004598:	6812      	ldr	r2, [r2, #0]
 800459a:	3201      	adds	r2, #1
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	4849      	ldr	r0, [pc, #292]	; (80046c4 <HAL_GPIO_EXTI_Callback+0x2e74>)
 80045a0:	f7fb fe16 	bl	80001d0 <strlen>
 80045a4:	4602      	mov	r2, r0
 80045a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80045aa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d8e0      	bhi.n	8004576 <HAL_GPIO_EXTI_Callback+0x2d26>
		  		  	  }

		  		  	  if (hiPressed == 0) {
 80045b4:	4b42      	ldr	r3, [pc, #264]	; (80046c0 <HAL_GPIO_EXTI_Callback+0x2e70>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d145      	bne.n	8004648 <HAL_GPIO_EXTI_Callback+0x2df8>
		  		  		  strncpy(substring,hiTemp,inputHi-1);
 80045bc:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <HAL_GPIO_EXTI_Callback+0x2e6c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	461a      	mov	r2, r3
 80045c4:	4940      	ldr	r1, [pc, #256]	; (80046c8 <HAL_GPIO_EXTI_Callback+0x2e78>)
 80045c6:	483f      	ldr	r0, [pc, #252]	; (80046c4 <HAL_GPIO_EXTI_Callback+0x2e74>)
 80045c8:	f009 f990 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 80045cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80045d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	e013      	b.n	8004602 <HAL_GPIO_EXTI_Callback+0x2db2>
		  			  	  	  hiTemp[i] = '\0';
 80045da:	4a3b      	ldr	r2, [pc, #236]	; (80046c8 <HAL_GPIO_EXTI_Callback+0x2e78>)
 80045dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80045e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4413      	add	r3, r2
 80045e8:	2200      	movs	r2, #0
 80045ea:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 80045ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80045f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045f4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80045f8:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80045fc:	6812      	ldr	r2, [r2, #0]
 80045fe:	3201      	adds	r2, #1
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	4831      	ldr	r0, [pc, #196]	; (80046c8 <HAL_GPIO_EXTI_Callback+0x2e78>)
 8004604:	f7fb fde4 	bl	80001d0 <strlen>
 8004608:	4602      	mov	r2, r0
 800460a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800460e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d8e0      	bhi.n	80045da <HAL_GPIO_EXTI_Callback+0x2d8a>
		  			  	  }
		  			  	  concatenate(hiTemp, substring);
 8004618:	492a      	ldr	r1, [pc, #168]	; (80046c4 <HAL_GPIO_EXTI_Callback+0x2e74>)
 800461a:	482b      	ldr	r0, [pc, #172]	; (80046c8 <HAL_GPIO_EXTI_Callback+0x2e78>)
 800461c:	f7fd f8e4 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 8004620:	4b2a      	ldr	r3, [pc, #168]	; (80046cc <HAL_GPIO_EXTI_Callback+0x2e7c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d104      	bne.n	8004632 <HAL_GPIO_EXTI_Callback+0x2de2>
		  			  				  		  concatenate(hiTemp, "w");
 8004628:	4929      	ldr	r1, [pc, #164]	; (80046d0 <HAL_GPIO_EXTI_Callback+0x2e80>)
 800462a:	4827      	ldr	r0, [pc, #156]	; (80046c8 <HAL_GPIO_EXTI_Callback+0x2e78>)
 800462c:	f7fd f8dc 	bl	80017e8 <concatenate>
 8004630:	e003      	b.n	800463a <HAL_GPIO_EXTI_Callback+0x2dea>
		  			  				  	  } else {
		  			  				  		concatenate(hiTemp, "W");
 8004632:	4928      	ldr	r1, [pc, #160]	; (80046d4 <HAL_GPIO_EXTI_Callback+0x2e84>)
 8004634:	4824      	ldr	r0, [pc, #144]	; (80046c8 <HAL_GPIO_EXTI_Callback+0x2e78>)
 8004636:	f7fd f8d7 	bl	80017e8 <concatenate>
		  			  				  	  }
		  			  	  hiPressed++;
 800463a:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <HAL_GPIO_EXTI_Callback+0x2e70>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3301      	adds	r3, #1
 8004640:	4a1f      	ldr	r2, [pc, #124]	; (80046c0 <HAL_GPIO_EXTI_Callback+0x2e70>)
 8004642:	6013      	str	r3, [r2, #0]
		  		  				  	  }
		  		  		hiPressed=0;
		  		  	  }
		  		  }
	  }
    break;
 8004644:	f000 bc76 	b.w	8004f34 <HAL_GPIO_EXTI_Callback+0x36e4>
		  		  	  } else if (hiPressed == 1) {
 8004648:	4b1d      	ldr	r3, [pc, #116]	; (80046c0 <HAL_GPIO_EXTI_Callback+0x2e70>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d179      	bne.n	8004744 <HAL_GPIO_EXTI_Callback+0x2ef4>
		  			  	  strncpy(substring,hiTemp,inputHi-1);
 8004650:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <HAL_GPIO_EXTI_Callback+0x2e6c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3b01      	subs	r3, #1
 8004656:	461a      	mov	r2, r3
 8004658:	491b      	ldr	r1, [pc, #108]	; (80046c8 <HAL_GPIO_EXTI_Callback+0x2e78>)
 800465a:	481a      	ldr	r0, [pc, #104]	; (80046c4 <HAL_GPIO_EXTI_Callback+0x2e74>)
 800465c:	f009 f946 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 8004660:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	e048      	b.n	8004700 <HAL_GPIO_EXTI_Callback+0x2eb0>
 800466e:	bf00      	nop
 8004670:	2000000c 	.word	0x2000000c
 8004674:	20000770 	.word	0x20000770
 8004678:	200007a4 	.word	0x200007a4
 800467c:	2000074c 	.word	0x2000074c
 8004680:	200006b8 	.word	0x200006b8
 8004684:	200006a0 	.word	0x200006a0
 8004688:	200006b4 	.word	0x200006b4
 800468c:	20000714 	.word	0x20000714
 8004690:	20000718 	.word	0x20000718
 8004694:	2000071c 	.word	0x2000071c
 8004698:	20000720 	.word	0x20000720
 800469c:	20000010 	.word	0x20000010
 80046a0:	0800e4b4 	.word	0x0800e4b4
 80046a4:	20000304 	.word	0x20000304
 80046a8:	20000728 	.word	0x20000728
 80046ac:	200006a8 	.word	0x200006a8
 80046b0:	2000069c 	.word	0x2000069c
 80046b4:	20000698 	.word	0x20000698
 80046b8:	20000768 	.word	0x20000768
 80046bc:	20000760 	.word	0x20000760
 80046c0:	20000764 	.word	0x20000764
 80046c4:	200006ec 	.word	0x200006ec
 80046c8:	20000014 	.word	0x20000014
 80046cc:	2000076c 	.word	0x2000076c
 80046d0:	0800e4cc 	.word	0x0800e4cc
 80046d4:	0800e4d0 	.word	0x0800e4d0
		  				  	  hiTemp[i] = '\0';
 80046d8:	4aa7      	ldr	r2, [pc, #668]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 80046da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80046de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4413      	add	r3, r2
 80046e6:	2200      	movs	r2, #0
 80046e8:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(hiTemp); i++) {
 80046ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80046ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046f2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80046f6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	3201      	adds	r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	489d      	ldr	r0, [pc, #628]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 8004702:	f7fb fd65 	bl	80001d0 <strlen>
 8004706:	4602      	mov	r2, r0
 8004708:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800470c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d8e0      	bhi.n	80046d8 <HAL_GPIO_EXTI_Callback+0x2e88>
		  			  	  concatenate(hiTemp, substring);
 8004716:	4999      	ldr	r1, [pc, #612]	; (800497c <HAL_GPIO_EXTI_Callback+0x312c>)
 8004718:	4897      	ldr	r0, [pc, #604]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 800471a:	f7fd f865 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 800471e:	4b98      	ldr	r3, [pc, #608]	; (8004980 <HAL_GPIO_EXTI_Callback+0x3130>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d104      	bne.n	8004730 <HAL_GPIO_EXTI_Callback+0x2ee0>
		  			  				  		  concatenate(hiTemp, "x");
 8004726:	4997      	ldr	r1, [pc, #604]	; (8004984 <HAL_GPIO_EXTI_Callback+0x3134>)
 8004728:	4893      	ldr	r0, [pc, #588]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 800472a:	f7fd f85d 	bl	80017e8 <concatenate>
 800472e:	e003      	b.n	8004738 <HAL_GPIO_EXTI_Callback+0x2ee8>
		  			  				  		concatenate(hiTemp, "X");
 8004730:	4995      	ldr	r1, [pc, #596]	; (8004988 <HAL_GPIO_EXTI_Callback+0x3138>)
 8004732:	4891      	ldr	r0, [pc, #580]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 8004734:	f7fd f858 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 8004738:	4b94      	ldr	r3, [pc, #592]	; (800498c <HAL_GPIO_EXTI_Callback+0x313c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3301      	adds	r3, #1
 800473e:	4a93      	ldr	r2, [pc, #588]	; (800498c <HAL_GPIO_EXTI_Callback+0x313c>)
 8004740:	6013      	str	r3, [r2, #0]
    break;
 8004742:	e3f7      	b.n	8004f34 <HAL_GPIO_EXTI_Callback+0x36e4>
		  		  	  } else if(hiPressed == 2) {
 8004744:	4b91      	ldr	r3, [pc, #580]	; (800498c <HAL_GPIO_EXTI_Callback+0x313c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b02      	cmp	r3, #2
 800474a:	d144      	bne.n	80047d6 <HAL_GPIO_EXTI_Callback+0x2f86>
		  		  		  strncpy(substring, hiTemp, inputHi-1);
 800474c:	4b90      	ldr	r3, [pc, #576]	; (8004990 <HAL_GPIO_EXTI_Callback+0x3140>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3b01      	subs	r3, #1
 8004752:	461a      	mov	r2, r3
 8004754:	4988      	ldr	r1, [pc, #544]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 8004756:	4889      	ldr	r0, [pc, #548]	; (800497c <HAL_GPIO_EXTI_Callback+0x312c>)
 8004758:	f009 f8c8 	bl	800d8ec <strncpy>
		  		  		  for (int i=0; i<strlen(hiTemp); i++) {
 800475c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004760:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	e013      	b.n	8004792 <HAL_GPIO_EXTI_Callback+0x2f42>
		  		  			  hiTemp[i] = '\0';
 800476a:	4a83      	ldr	r2, [pc, #524]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 800476c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004770:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4413      	add	r3, r2
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
		  		  		  for (int i=0; i<strlen(hiTemp); i++) {
 800477c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004780:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004784:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004788:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	3201      	adds	r2, #1
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	4879      	ldr	r0, [pc, #484]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 8004794:	f7fb fd1c 	bl	80001d0 <strlen>
 8004798:	4602      	mov	r2, r0
 800479a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800479e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d8e0      	bhi.n	800476a <HAL_GPIO_EXTI_Callback+0x2f1a>
		  		  		  concatenate(hiTemp, substring);
 80047a8:	4974      	ldr	r1, [pc, #464]	; (800497c <HAL_GPIO_EXTI_Callback+0x312c>)
 80047aa:	4873      	ldr	r0, [pc, #460]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 80047ac:	f7fd f81c 	bl	80017e8 <concatenate>
		  		  		if (isBigger == 0) {
 80047b0:	4b73      	ldr	r3, [pc, #460]	; (8004980 <HAL_GPIO_EXTI_Callback+0x3130>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d104      	bne.n	80047c2 <HAL_GPIO_EXTI_Callback+0x2f72>
		  		  					  		  concatenate(hiTemp, "y");
 80047b8:	4976      	ldr	r1, [pc, #472]	; (8004994 <HAL_GPIO_EXTI_Callback+0x3144>)
 80047ba:	486f      	ldr	r0, [pc, #444]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 80047bc:	f7fd f814 	bl	80017e8 <concatenate>
 80047c0:	e003      	b.n	80047ca <HAL_GPIO_EXTI_Callback+0x2f7a>
		  		  					  		concatenate(hiTemp, "Y");
 80047c2:	4975      	ldr	r1, [pc, #468]	; (8004998 <HAL_GPIO_EXTI_Callback+0x3148>)
 80047c4:	486c      	ldr	r0, [pc, #432]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 80047c6:	f7fd f80f 	bl	80017e8 <concatenate>
		  		  		  hiPressed++;
 80047ca:	4b70      	ldr	r3, [pc, #448]	; (800498c <HAL_GPIO_EXTI_Callback+0x313c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3301      	adds	r3, #1
 80047d0:	4a6e      	ldr	r2, [pc, #440]	; (800498c <HAL_GPIO_EXTI_Callback+0x313c>)
 80047d2:	6013      	str	r3, [r2, #0]
    break;
 80047d4:	e3ae      	b.n	8004f34 <HAL_GPIO_EXTI_Callback+0x36e4>
		  		  	  } else if (hiPressed == 3) {
 80047d6:	4b6d      	ldr	r3, [pc, #436]	; (800498c <HAL_GPIO_EXTI_Callback+0x313c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b03      	cmp	r3, #3
 80047dc:	f040 83aa 	bne.w	8004f34 <HAL_GPIO_EXTI_Callback+0x36e4>
		  		  		strncpy(substring, hiTemp, inputHi-1);
 80047e0:	4b6b      	ldr	r3, [pc, #428]	; (8004990 <HAL_GPIO_EXTI_Callback+0x3140>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	461a      	mov	r2, r3
 80047e8:	4963      	ldr	r1, [pc, #396]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 80047ea:	4864      	ldr	r0, [pc, #400]	; (800497c <HAL_GPIO_EXTI_Callback+0x312c>)
 80047ec:	f009 f87e 	bl	800d8ec <strncpy>
		  		  		for (int i=0; i<strlen(hiTemp); i++) {
 80047f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80047f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	e013      	b.n	8004826 <HAL_GPIO_EXTI_Callback+0x2fd6>
		  		  			  hiTemp[i] = '\0';
 80047fe:	4a5e      	ldr	r2, [pc, #376]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 8004800:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004804:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4413      	add	r3, r2
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
		  		  		for (int i=0; i<strlen(hiTemp); i++) {
 8004810:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004814:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004818:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800481c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004820:	6812      	ldr	r2, [r2, #0]
 8004822:	3201      	adds	r2, #1
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	4854      	ldr	r0, [pc, #336]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 8004828:	f7fb fcd2 	bl	80001d0 <strlen>
 800482c:	4602      	mov	r2, r0
 800482e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004832:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d8e0      	bhi.n	80047fe <HAL_GPIO_EXTI_Callback+0x2fae>
		  		  		concatenate(hiTemp, substring);
 800483c:	494f      	ldr	r1, [pc, #316]	; (800497c <HAL_GPIO_EXTI_Callback+0x312c>)
 800483e:	484e      	ldr	r0, [pc, #312]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 8004840:	f7fc ffd2 	bl	80017e8 <concatenate>
		  		  	if (isBigger == 0) {
 8004844:	4b4e      	ldr	r3, [pc, #312]	; (8004980 <HAL_GPIO_EXTI_Callback+0x3130>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d104      	bne.n	8004856 <HAL_GPIO_EXTI_Callback+0x3006>
		  		  				  		  concatenate(hiTemp, "z");
 800484c:	4953      	ldr	r1, [pc, #332]	; (800499c <HAL_GPIO_EXTI_Callback+0x314c>)
 800484e:	484a      	ldr	r0, [pc, #296]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 8004850:	f7fc ffca 	bl	80017e8 <concatenate>
 8004854:	e003      	b.n	800485e <HAL_GPIO_EXTI_Callback+0x300e>
		  		  				  		concatenate(hiTemp, "Z");
 8004856:	4952      	ldr	r1, [pc, #328]	; (80049a0 <HAL_GPIO_EXTI_Callback+0x3150>)
 8004858:	4847      	ldr	r0, [pc, #284]	; (8004978 <HAL_GPIO_EXTI_Callback+0x3128>)
 800485a:	f7fc ffc5 	bl	80017e8 <concatenate>
		  		  		hiPressed=0;
 800485e:	4b4b      	ldr	r3, [pc, #300]	; (800498c <HAL_GPIO_EXTI_Callback+0x313c>)
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
    break;
 8004864:	e366      	b.n	8004f34 <HAL_GPIO_EXTI_Callback+0x36e4>
	  } else if (menuState == 13) {
 8004866:	4b4f      	ldr	r3, [pc, #316]	; (80049a4 <HAL_GPIO_EXTI_Callback+0x3154>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b0d      	cmp	r3, #13
 800486c:	f040 8362 	bne.w	8004f34 <HAL_GPIO_EXTI_Callback+0x36e4>
		  if (keyState == 0) {
 8004870:	4b4d      	ldr	r3, [pc, #308]	; (80049a8 <HAL_GPIO_EXTI_Callback+0x3158>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <HAL_GPIO_EXTI_Callback+0x303e>
		  			  inputHi++;
 8004878:	4b45      	ldr	r3, [pc, #276]	; (8004990 <HAL_GPIO_EXTI_Callback+0x3140>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3301      	adds	r3, #1
 800487e:	4a44      	ldr	r2, [pc, #272]	; (8004990 <HAL_GPIO_EXTI_Callback+0x3140>)
 8004880:	6013      	str	r3, [r2, #0]
		  			  hiPressed = 0;
 8004882:	4b42      	ldr	r3, [pc, #264]	; (800498c <HAL_GPIO_EXTI_Callback+0x313c>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
		  			  keyState = 8;
 8004888:	4b47      	ldr	r3, [pc, #284]	; (80049a8 <HAL_GPIO_EXTI_Callback+0x3158>)
 800488a:	2208      	movs	r2, #8
 800488c:	601a      	str	r2, [r3, #0]
		  		  if (keyState == 8) {
 800488e:	4b46      	ldr	r3, [pc, #280]	; (80049a8 <HAL_GPIO_EXTI_Callback+0x3158>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b08      	cmp	r3, #8
 8004894:	f040 834e 	bne.w	8004f34 <HAL_GPIO_EXTI_Callback+0x36e4>
		  			  for (int i=0; i<strlen(byeSub); i++) {
 8004898:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800489c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	e013      	b.n	80048ce <HAL_GPIO_EXTI_Callback+0x307e>
		  				byeSub[i] = '\0';
 80048a6:	4a41      	ldr	r2, [pc, #260]	; (80049ac <HAL_GPIO_EXTI_Callback+0x315c>)
 80048a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80048ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4413      	add	r3, r2
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]
		  			  for (int i=0; i<strlen(byeSub); i++) {
 80048b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80048bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80048c0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80048c4:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80048c8:	6812      	ldr	r2, [r2, #0]
 80048ca:	3201      	adds	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	4837      	ldr	r0, [pc, #220]	; (80049ac <HAL_GPIO_EXTI_Callback+0x315c>)
 80048d0:	f7fb fc7e 	bl	80001d0 <strlen>
 80048d4:	4602      	mov	r2, r0
 80048d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80048da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d8e0      	bhi.n	80048a6 <HAL_GPIO_EXTI_Callback+0x3056>
		  		  	  if (hiPressed == 0) {
 80048e4:	4b29      	ldr	r3, [pc, #164]	; (800498c <HAL_GPIO_EXTI_Callback+0x313c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d167      	bne.n	80049bc <HAL_GPIO_EXTI_Callback+0x316c>
		  		  		  strncpy(byeSub,byeTemp,inputHi-1);
 80048ec:	4b28      	ldr	r3, [pc, #160]	; (8004990 <HAL_GPIO_EXTI_Callback+0x3140>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3b01      	subs	r3, #1
 80048f2:	461a      	mov	r2, r3
 80048f4:	492e      	ldr	r1, [pc, #184]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x3160>)
 80048f6:	482d      	ldr	r0, [pc, #180]	; (80049ac <HAL_GPIO_EXTI_Callback+0x315c>)
 80048f8:	f008 fff8 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 80048fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004900:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	e013      	b.n	8004932 <HAL_GPIO_EXTI_Callback+0x30e2>
		  			  		byeTemp[i] = '\0';
 800490a:	4a29      	ldr	r2, [pc, #164]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x3160>)
 800490c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004910:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4413      	add	r3, r2
 8004918:	2200      	movs	r2, #0
 800491a:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 800491c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004920:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004924:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004928:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800492c:	6812      	ldr	r2, [r2, #0]
 800492e:	3201      	adds	r2, #1
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	481f      	ldr	r0, [pc, #124]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x3160>)
 8004934:	f7fb fc4c 	bl	80001d0 <strlen>
 8004938:	4602      	mov	r2, r0
 800493a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800493e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d8e0      	bhi.n	800490a <HAL_GPIO_EXTI_Callback+0x30ba>
		  			  	  concatenate(byeTemp, byeSub);
 8004948:	4918      	ldr	r1, [pc, #96]	; (80049ac <HAL_GPIO_EXTI_Callback+0x315c>)
 800494a:	4819      	ldr	r0, [pc, #100]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x3160>)
 800494c:	f7fc ff4c 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <HAL_GPIO_EXTI_Callback+0x3130>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d104      	bne.n	8004962 <HAL_GPIO_EXTI_Callback+0x3112>
		  			  				  		  concatenate(byeTemp, "w");
 8004958:	4916      	ldr	r1, [pc, #88]	; (80049b4 <HAL_GPIO_EXTI_Callback+0x3164>)
 800495a:	4815      	ldr	r0, [pc, #84]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x3160>)
 800495c:	f7fc ff44 	bl	80017e8 <concatenate>
 8004960:	e003      	b.n	800496a <HAL_GPIO_EXTI_Callback+0x311a>
		  			  				  		concatenate(byeTemp, "W");
 8004962:	4915      	ldr	r1, [pc, #84]	; (80049b8 <HAL_GPIO_EXTI_Callback+0x3168>)
 8004964:	4812      	ldr	r0, [pc, #72]	; (80049b0 <HAL_GPIO_EXTI_Callback+0x3160>)
 8004966:	f7fc ff3f 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 800496a:	4b08      	ldr	r3, [pc, #32]	; (800498c <HAL_GPIO_EXTI_Callback+0x313c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3301      	adds	r3, #1
 8004970:	4a06      	ldr	r2, [pc, #24]	; (800498c <HAL_GPIO_EXTI_Callback+0x313c>)
 8004972:	6013      	str	r3, [r2, #0]
    break;
 8004974:	e2de      	b.n	8004f34 <HAL_GPIO_EXTI_Callback+0x36e4>
 8004976:	bf00      	nop
 8004978:	20000014 	.word	0x20000014
 800497c:	200006ec 	.word	0x200006ec
 8004980:	2000076c 	.word	0x2000076c
 8004984:	0800e4d4 	.word	0x0800e4d4
 8004988:	0800e4d8 	.word	0x0800e4d8
 800498c:	20000764 	.word	0x20000764
 8004990:	20000760 	.word	0x20000760
 8004994:	0800e4dc 	.word	0x0800e4dc
 8004998:	0800e4e0 	.word	0x0800e4e0
 800499c:	0800e4e4 	.word	0x0800e4e4
 80049a0:	0800e4e8 	.word	0x0800e4e8
 80049a4:	2000000c 	.word	0x2000000c
 80049a8:	20000768 	.word	0x20000768
 80049ac:	20000700 	.word	0x20000700
 80049b0:	20000028 	.word	0x20000028
 80049b4:	0800e4cc 	.word	0x0800e4cc
 80049b8:	0800e4d0 	.word	0x0800e4d0
		  		  	  } else if (hiPressed == 1) {
 80049bc:	4b96      	ldr	r3, [pc, #600]	; (8004c18 <HAL_GPIO_EXTI_Callback+0x33c8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d144      	bne.n	8004a4e <HAL_GPIO_EXTI_Callback+0x31fe>
		  			  	  strncpy(byeSub,byeTemp,inputHi-1);
 80049c4:	4b95      	ldr	r3, [pc, #596]	; (8004c1c <HAL_GPIO_EXTI_Callback+0x33cc>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	461a      	mov	r2, r3
 80049cc:	4994      	ldr	r1, [pc, #592]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 80049ce:	4895      	ldr	r0, [pc, #596]	; (8004c24 <HAL_GPIO_EXTI_Callback+0x33d4>)
 80049d0:	f008 ff8c 	bl	800d8ec <strncpy>
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 80049d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80049d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e013      	b.n	8004a0a <HAL_GPIO_EXTI_Callback+0x31ba>
		  			  		byeTemp[i] = '\0';
 80049e2:	4a8f      	ldr	r2, [pc, #572]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 80049e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80049e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4413      	add	r3, r2
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
		  			  	  for (int i=0; i<strlen(byeTemp); i++) {
 80049f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80049f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049fc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004a00:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8004a04:	6812      	ldr	r2, [r2, #0]
 8004a06:	3201      	adds	r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	4885      	ldr	r0, [pc, #532]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 8004a0c:	f7fb fbe0 	bl	80001d0 <strlen>
 8004a10:	4602      	mov	r2, r0
 8004a12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a16:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d8e0      	bhi.n	80049e2 <HAL_GPIO_EXTI_Callback+0x3192>
		  			  	  concatenate(byeTemp, byeSub);
 8004a20:	4980      	ldr	r1, [pc, #512]	; (8004c24 <HAL_GPIO_EXTI_Callback+0x33d4>)
 8004a22:	487f      	ldr	r0, [pc, #508]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 8004a24:	f7fc fee0 	bl	80017e8 <concatenate>
		  			  	if (isBigger == 0) {
 8004a28:	4b7f      	ldr	r3, [pc, #508]	; (8004c28 <HAL_GPIO_EXTI_Callback+0x33d8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <HAL_GPIO_EXTI_Callback+0x31ea>
		  			  				  		  concatenate(byeTemp, "x");
 8004a30:	497e      	ldr	r1, [pc, #504]	; (8004c2c <HAL_GPIO_EXTI_Callback+0x33dc>)
 8004a32:	487b      	ldr	r0, [pc, #492]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 8004a34:	f7fc fed8 	bl	80017e8 <concatenate>
 8004a38:	e003      	b.n	8004a42 <HAL_GPIO_EXTI_Callback+0x31f2>
		  			  				  		concatenate(byeTemp, "X");
 8004a3a:	497d      	ldr	r1, [pc, #500]	; (8004c30 <HAL_GPIO_EXTI_Callback+0x33e0>)
 8004a3c:	4878      	ldr	r0, [pc, #480]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 8004a3e:	f7fc fed3 	bl	80017e8 <concatenate>
		  			  	  hiPressed++;
 8004a42:	4b75      	ldr	r3, [pc, #468]	; (8004c18 <HAL_GPIO_EXTI_Callback+0x33c8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3301      	adds	r3, #1
 8004a48:	4a73      	ldr	r2, [pc, #460]	; (8004c18 <HAL_GPIO_EXTI_Callback+0x33c8>)
 8004a4a:	6013      	str	r3, [r2, #0]
    break;
 8004a4c:	e272      	b.n	8004f34 <HAL_GPIO_EXTI_Callback+0x36e4>
		  		  	  } else if(hiPressed == 2) {
 8004a4e:	4b72      	ldr	r3, [pc, #456]	; (8004c18 <HAL_GPIO_EXTI_Callback+0x33c8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d144      	bne.n	8004ae0 <HAL_GPIO_EXTI_Callback+0x3290>
		  		  		  strncpy(byeSub, byeTemp, inputHi-1);
 8004a56:	4b71      	ldr	r3, [pc, #452]	; (8004c1c <HAL_GPIO_EXTI_Callback+0x33cc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4970      	ldr	r1, [pc, #448]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 8004a60:	4870      	ldr	r0, [pc, #448]	; (8004c24 <HAL_GPIO_EXTI_Callback+0x33d4>)
 8004a62:	f008 ff43 	bl	800d8ec <strncpy>
		  		  		  for (int i=0; i<strlen(byeTemp); i++) {
 8004a66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e013      	b.n	8004a9c <HAL_GPIO_EXTI_Callback+0x324c>
		  		  			byeTemp[i] = '\0';
 8004a74:	4a6a      	ldr	r2, [pc, #424]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 8004a76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4413      	add	r3, r2
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
		  		  		  for (int i=0; i<strlen(byeTemp); i++) {
 8004a86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a8e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004a92:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	3201      	adds	r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	4860      	ldr	r0, [pc, #384]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 8004a9e:	f7fb fb97 	bl	80001d0 <strlen>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004aa8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d8e0      	bhi.n	8004a74 <HAL_GPIO_EXTI_Callback+0x3224>
		  		  		  concatenate(byeTemp, byeSub);
 8004ab2:	495c      	ldr	r1, [pc, #368]	; (8004c24 <HAL_GPIO_EXTI_Callback+0x33d4>)
 8004ab4:	485a      	ldr	r0, [pc, #360]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 8004ab6:	f7fc fe97 	bl	80017e8 <concatenate>
		  		  		if (isBigger == 0) {
 8004aba:	4b5b      	ldr	r3, [pc, #364]	; (8004c28 <HAL_GPIO_EXTI_Callback+0x33d8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d104      	bne.n	8004acc <HAL_GPIO_EXTI_Callback+0x327c>
		  		  					  		  concatenate(byeTemp, "y");
 8004ac2:	495c      	ldr	r1, [pc, #368]	; (8004c34 <HAL_GPIO_EXTI_Callback+0x33e4>)
 8004ac4:	4856      	ldr	r0, [pc, #344]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 8004ac6:	f7fc fe8f 	bl	80017e8 <concatenate>
 8004aca:	e003      	b.n	8004ad4 <HAL_GPIO_EXTI_Callback+0x3284>
		  		  					  		concatenate(byeTemp, "Y");
 8004acc:	495a      	ldr	r1, [pc, #360]	; (8004c38 <HAL_GPIO_EXTI_Callback+0x33e8>)
 8004ace:	4854      	ldr	r0, [pc, #336]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 8004ad0:	f7fc fe8a 	bl	80017e8 <concatenate>
		  		  		  hiPressed++;
 8004ad4:	4b50      	ldr	r3, [pc, #320]	; (8004c18 <HAL_GPIO_EXTI_Callback+0x33c8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	4a4f      	ldr	r2, [pc, #316]	; (8004c18 <HAL_GPIO_EXTI_Callback+0x33c8>)
 8004adc:	6013      	str	r3, [r2, #0]
    break;
 8004ade:	e229      	b.n	8004f34 <HAL_GPIO_EXTI_Callback+0x36e4>
		  		  	  } else if (hiPressed == 3) {
 8004ae0:	4b4d      	ldr	r3, [pc, #308]	; (8004c18 <HAL_GPIO_EXTI_Callback+0x33c8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	f040 8225 	bne.w	8004f34 <HAL_GPIO_EXTI_Callback+0x36e4>
		  		  		strncpy(byeSub, byeTemp, inputHi-1);
 8004aea:	4b4c      	ldr	r3, [pc, #304]	; (8004c1c <HAL_GPIO_EXTI_Callback+0x33cc>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	461a      	mov	r2, r3
 8004af2:	494b      	ldr	r1, [pc, #300]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 8004af4:	484b      	ldr	r0, [pc, #300]	; (8004c24 <HAL_GPIO_EXTI_Callback+0x33d4>)
 8004af6:	f008 fef9 	bl	800d8ec <strncpy>
		  		  		for (int i=0; i<strlen(byeTemp); i++) {
 8004afa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004afe:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e013      	b.n	8004b30 <HAL_GPIO_EXTI_Callback+0x32e0>
		  		  		byeTemp[i] = '\0';
 8004b08:	4a45      	ldr	r2, [pc, #276]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 8004b0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004b0e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4413      	add	r3, r2
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]
		  		  		for (int i=0; i<strlen(byeTemp); i++) {
 8004b1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004b1e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004b22:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004b26:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	3201      	adds	r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	483b      	ldr	r0, [pc, #236]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 8004b32:	f7fb fb4d 	bl	80001d0 <strlen>
 8004b36:	4602      	mov	r2, r0
 8004b38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004b3c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d8e0      	bhi.n	8004b08 <HAL_GPIO_EXTI_Callback+0x32b8>
		  		  		concatenate(byeTemp, byeSub);
 8004b46:	4937      	ldr	r1, [pc, #220]	; (8004c24 <HAL_GPIO_EXTI_Callback+0x33d4>)
 8004b48:	4835      	ldr	r0, [pc, #212]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 8004b4a:	f7fc fe4d 	bl	80017e8 <concatenate>
		  		  	if (isBigger == 0) {
 8004b4e:	4b36      	ldr	r3, [pc, #216]	; (8004c28 <HAL_GPIO_EXTI_Callback+0x33d8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d104      	bne.n	8004b60 <HAL_GPIO_EXTI_Callback+0x3310>
		  		  				  		  concatenate(byeTemp, "z");
 8004b56:	4939      	ldr	r1, [pc, #228]	; (8004c3c <HAL_GPIO_EXTI_Callback+0x33ec>)
 8004b58:	4831      	ldr	r0, [pc, #196]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 8004b5a:	f7fc fe45 	bl	80017e8 <concatenate>
 8004b5e:	e003      	b.n	8004b68 <HAL_GPIO_EXTI_Callback+0x3318>
		  		  				  		concatenate(byeTemp, "Z");
 8004b60:	4937      	ldr	r1, [pc, #220]	; (8004c40 <HAL_GPIO_EXTI_Callback+0x33f0>)
 8004b62:	482f      	ldr	r0, [pc, #188]	; (8004c20 <HAL_GPIO_EXTI_Callback+0x33d0>)
 8004b64:	f7fc fe40 	bl	80017e8 <concatenate>
		  		  		hiPressed=0;
 8004b68:	4b2b      	ldr	r3, [pc, #172]	; (8004c18 <HAL_GPIO_EXTI_Callback+0x33c8>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
    break;
 8004b6e:	e1e1      	b.n	8004f34 <HAL_GPIO_EXTI_Callback+0x36e4>
 8004b70:	e1e0      	b.n	8004f34 <HAL_GPIO_EXTI_Callback+0x36e4>
  case 15:
    /* code */
	  //12
	  if (menuState != -3) {
 8004b72:	4b34      	ldr	r3, [pc, #208]	; (8004c44 <HAL_GPIO_EXTI_Callback+0x33f4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f113 0f03 	cmn.w	r3, #3
 8004b7a:	d002      	beq.n	8004b82 <HAL_GPIO_EXTI_Callback+0x3332>
		  count = 0;
 8004b7c:	4b32      	ldr	r3, [pc, #200]	; (8004c48 <HAL_GPIO_EXTI_Callback+0x33f8>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
	  }
	  if (menuState != -2) {
 8004b82:	4b30      	ldr	r3, [pc, #192]	; (8004c44 <HAL_GPIO_EXTI_Callback+0x33f4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f113 0f02 	cmn.w	r3, #2
 8004b8a:	d003      	beq.n	8004b94 <HAL_GPIO_EXTI_Callback+0x3344>
		  count=0;
 8004b8c:	4b2e      	ldr	r3, [pc, #184]	; (8004c48 <HAL_GPIO_EXTI_Callback+0x33f8>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	e004      	b.n	8004b9e <HAL_GPIO_EXTI_Callback+0x334e>
	  } else {
		  tempTresh--;
 8004b94:	4b2d      	ldr	r3, [pc, #180]	; (8004c4c <HAL_GPIO_EXTI_Callback+0x33fc>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	4a2c      	ldr	r2, [pc, #176]	; (8004c4c <HAL_GPIO_EXTI_Callback+0x33fc>)
 8004b9c:	6013      	str	r3, [r2, #0]
	  } if (menuState == 2 && input == 0) {
 8004b9e:	4b29      	ldr	r3, [pc, #164]	; (8004c44 <HAL_GPIO_EXTI_Callback+0x33f4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d10a      	bne.n	8004bbc <HAL_GPIO_EXTI_Callback+0x336c>
 8004ba6:	4b2a      	ldr	r3, [pc, #168]	; (8004c50 <HAL_GPIO_EXTI_Callback+0x3400>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_GPIO_EXTI_Callback+0x336c>
		tens = 0;
 8004bae:	4b29      	ldr	r3, [pc, #164]	; (8004c54 <HAL_GPIO_EXTI_Callback+0x3404>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
		input = 1;
 8004bb4:	4b26      	ldr	r3, [pc, #152]	; (8004c50 <HAL_GPIO_EXTI_Callback+0x3400>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	e00d      	b.n	8004bd8 <HAL_GPIO_EXTI_Callback+0x3388>
	  } else if (menuState == 2 && input == 1) {
 8004bbc:	4b21      	ldr	r3, [pc, #132]	; (8004c44 <HAL_GPIO_EXTI_Callback+0x33f4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d109      	bne.n	8004bd8 <HAL_GPIO_EXTI_Callback+0x3388>
 8004bc4:	4b22      	ldr	r3, [pc, #136]	; (8004c50 <HAL_GPIO_EXTI_Callback+0x3400>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d105      	bne.n	8004bd8 <HAL_GPIO_EXTI_Callback+0x3388>
		  ones = 0;
 8004bcc:	4b22      	ldr	r3, [pc, #136]	; (8004c58 <HAL_GPIO_EXTI_Callback+0x3408>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
		  input = 0;
 8004bd2:	4b1f      	ldr	r3, [pc, #124]	; (8004c50 <HAL_GPIO_EXTI_Callback+0x3400>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]
	  } if (menuState == 20 && input == 0) {
 8004bd8:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <HAL_GPIO_EXTI_Callback+0x33f4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b14      	cmp	r3, #20
 8004bde:	d10a      	bne.n	8004bf6 <HAL_GPIO_EXTI_Callback+0x33a6>
 8004be0:	4b1b      	ldr	r3, [pc, #108]	; (8004c50 <HAL_GPIO_EXTI_Callback+0x3400>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d106      	bne.n	8004bf6 <HAL_GPIO_EXTI_Callback+0x33a6>
			tens = 0;
 8004be8:	4b1a      	ldr	r3, [pc, #104]	; (8004c54 <HAL_GPIO_EXTI_Callback+0x3404>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
			input = 1;
 8004bee:	4b18      	ldr	r3, [pc, #96]	; (8004c50 <HAL_GPIO_EXTI_Callback+0x3400>)
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]
		  } else if (menuState == 20 && input == 1) {
			  ones = 0;
			  input = 0;
		  }
    break;
 8004bf4:	e1a0      	b.n	8004f38 <HAL_GPIO_EXTI_Callback+0x36e8>
		  } else if (menuState == 20 && input == 1) {
 8004bf6:	4b13      	ldr	r3, [pc, #76]	; (8004c44 <HAL_GPIO_EXTI_Callback+0x33f4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b14      	cmp	r3, #20
 8004bfc:	f040 819c 	bne.w	8004f38 <HAL_GPIO_EXTI_Callback+0x36e8>
 8004c00:	4b13      	ldr	r3, [pc, #76]	; (8004c50 <HAL_GPIO_EXTI_Callback+0x3400>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	f040 8197 	bne.w	8004f38 <HAL_GPIO_EXTI_Callback+0x36e8>
			  ones = 0;
 8004c0a:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <HAL_GPIO_EXTI_Callback+0x3408>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
			  input = 0;
 8004c10:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <HAL_GPIO_EXTI_Callback+0x3400>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
    break;
 8004c16:	e18f      	b.n	8004f38 <HAL_GPIO_EXTI_Callback+0x36e8>
 8004c18:	20000764 	.word	0x20000764
 8004c1c:	20000760 	.word	0x20000760
 8004c20:	20000028 	.word	0x20000028
 8004c24:	20000700 	.word	0x20000700
 8004c28:	2000076c 	.word	0x2000076c
 8004c2c:	0800e4d4 	.word	0x0800e4d4
 8004c30:	0800e4d8 	.word	0x0800e4d8
 8004c34:	0800e4dc 	.word	0x0800e4dc
 8004c38:	0800e4e0 	.word	0x0800e4e0
 8004c3c:	0800e4e4 	.word	0x0800e4e4
 8004c40:	0800e4e8 	.word	0x0800e4e8
 8004c44:	2000000c 	.word	0x2000000c
 8004c48:	20000728 	.word	0x20000728
 8004c4c:	20000010 	.word	0x20000010
 8004c50:	200006a8 	.word	0x200006a8
 8004c54:	2000069c 	.word	0x2000069c
 8004c58:	20000698 	.word	0x20000698
  case 16:
	  /* code */
	  //16
	  if (menuState != -2 && menuState != -3) {
 8004c5c:	4ba0      	ldr	r3, [pc, #640]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f113 0f02 	cmn.w	r3, #2
 8004c64:	d007      	beq.n	8004c76 <HAL_GPIO_EXTI_Callback+0x3426>
 8004c66:	4b9e      	ldr	r3, [pc, #632]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f113 0f03 	cmn.w	r3, #3
 8004c6e:	d002      	beq.n	8004c76 <HAL_GPIO_EXTI_Callback+0x3426>
	  		  count=0;
 8004c70:	4b9c      	ldr	r3, [pc, #624]	; (8004ee4 <HAL_GPIO_EXTI_Callback+0x3694>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
	  	  }
	  if (menuState == 2) {
 8004c76:	4b9a      	ldr	r3, [pc, #616]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d126      	bne.n	8004ccc <HAL_GPIO_EXTI_Callback+0x347c>
		  menuState = 1;
 8004c7e:	4b98      	ldr	r3, [pc, #608]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
		  tempTresh = tens*10 + ones;
 8004c84:	4b98      	ldr	r3, [pc, #608]	; (8004ee8 <HAL_GPIO_EXTI_Callback+0x3698>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	461a      	mov	r2, r3
 8004c92:	4b96      	ldr	r3, [pc, #600]	; (8004eec <HAL_GPIO_EXTI_Callback+0x369c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4413      	add	r3, r2
 8004c98:	4a95      	ldr	r2, [pc, #596]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x36a0>)
 8004c9a:	6013      	str	r3, [r2, #0]
		  sprintf(str, "temp thresh is hanged to: %d", tempTresh);
 8004c9c:	4b94      	ldr	r3, [pc, #592]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x36a0>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	4994      	ldr	r1, [pc, #592]	; (8004ef4 <HAL_GPIO_EXTI_Callback+0x36a4>)
 8004ca4:	4894      	ldr	r0, [pc, #592]	; (8004ef8 <HAL_GPIO_EXTI_Callback+0x36a8>)
 8004ca6:	f008 fe01 	bl	800d8ac <siprintf>
		  HAL_UART_Transmit(&huart2, str, strlen(str), 100);
 8004caa:	4893      	ldr	r0, [pc, #588]	; (8004ef8 <HAL_GPIO_EXTI_Callback+0x36a8>)
 8004cac:	f7fb fa90 	bl	80001d0 <strlen>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	2364      	movs	r3, #100	; 0x64
 8004cb6:	4990      	ldr	r1, [pc, #576]	; (8004ef8 <HAL_GPIO_EXTI_Callback+0x36a8>)
 8004cb8:	4890      	ldr	r0, [pc, #576]	; (8004efc <HAL_GPIO_EXTI_Callback+0x36ac>)
 8004cba:	f007 fb25 	bl	800c308 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, "\n", 1, 100);
 8004cbe:	2364      	movs	r3, #100	; 0x64
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	498f      	ldr	r1, [pc, #572]	; (8004f00 <HAL_GPIO_EXTI_Callback+0x36b0>)
 8004cc4:	488d      	ldr	r0, [pc, #564]	; (8004efc <HAL_GPIO_EXTI_Callback+0x36ac>)
 8004cc6:	f007 fb1f 	bl	800c308 <HAL_UART_Transmit>
		  menuState = 20;
	  } else if (menuState == 20) {
		  s1.tempTresh = tens*10+ones;
		  menuState = 5;
	  }
    break;
 8004cca:	e137      	b.n	8004f3c <HAL_GPIO_EXTI_Callback+0x36ec>
	  } else if (menuState == 1) {
 8004ccc:	4b84      	ldr	r3, [pc, #528]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d103      	bne.n	8004cdc <HAL_GPIO_EXTI_Callback+0x348c>
		  menuState = 0;
 8004cd4:	4b82      	ldr	r3, [pc, #520]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
    break;
 8004cda:	e12f      	b.n	8004f3c <HAL_GPIO_EXTI_Callback+0x36ec>
	  } else if (menuState == 3) {
 8004cdc:	4b80      	ldr	r3, [pc, #512]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d103      	bne.n	8004cec <HAL_GPIO_EXTI_Callback+0x349c>
		  menuState = 0;
 8004ce4:	4b7e      	ldr	r3, [pc, #504]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
    break;
 8004cea:	e127      	b.n	8004f3c <HAL_GPIO_EXTI_Callback+0x36ec>
	  } else if (menuState == 4) {
 8004cec:	4b7c      	ldr	r3, [pc, #496]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d103      	bne.n	8004cfc <HAL_GPIO_EXTI_Callback+0x34ac>
		  menuState = 0;
 8004cf4:	4b7a      	ldr	r3, [pc, #488]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
    break;
 8004cfa:	e11f      	b.n	8004f3c <HAL_GPIO_EXTI_Callback+0x36ec>
	  } else if (menuState == 5) {
 8004cfc:	4b78      	ldr	r3, [pc, #480]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b05      	cmp	r3, #5
 8004d02:	d103      	bne.n	8004d0c <HAL_GPIO_EXTI_Callback+0x34bc>
		  menuState = 0;
 8004d04:	4b76      	ldr	r3, [pc, #472]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
    break;
 8004d0a:	e117      	b.n	8004f3c <HAL_GPIO_EXTI_Callback+0x36ec>
	  } else if (menuState == -2) {
 8004d0c:	4b74      	ldr	r3, [pc, #464]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f113 0f02 	cmn.w	r3, #2
 8004d14:	d105      	bne.n	8004d22 <HAL_GPIO_EXTI_Callback+0x34d2>
		  tempTresh++;
 8004d16:	4b76      	ldr	r3, [pc, #472]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x36a0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	4a74      	ldr	r2, [pc, #464]	; (8004ef0 <HAL_GPIO_EXTI_Callback+0x36a0>)
 8004d1e:	6013      	str	r3, [r2, #0]
    break;
 8004d20:	e10c      	b.n	8004f3c <HAL_GPIO_EXTI_Callback+0x36ec>
	  } else if (menuState == 8) {
 8004d22:	4b6f      	ldr	r3, [pc, #444]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d103      	bne.n	8004d32 <HAL_GPIO_EXTI_Callback+0x34e2>
		  menuState = 0;
 8004d2a:	4b6d      	ldr	r3, [pc, #436]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	601a      	str	r2, [r3, #0]
    break;
 8004d30:	e104      	b.n	8004f3c <HAL_GPIO_EXTI_Callback+0x36ec>
	  } else if (menuState == 12) {
 8004d32:	4b6b      	ldr	r3, [pc, #428]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b0c      	cmp	r3, #12
 8004d38:	d146      	bne.n	8004dc8 <HAL_GPIO_EXTI_Callback+0x3578>
		  keyState = 0;
 8004d3a:	4b72      	ldr	r3, [pc, #456]	; (8004f04 <HAL_GPIO_EXTI_Callback+0x36b4>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
		  hiPressed = 0;
 8004d40:	4b71      	ldr	r3, [pc, #452]	; (8004f08 <HAL_GPIO_EXTI_Callback+0x36b8>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
		  inputHi = 0;
 8004d46:	4b71      	ldr	r3, [pc, #452]	; (8004f0c <HAL_GPIO_EXTI_Callback+0x36bc>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
		  isBigger = 0;
 8004d4c:	4b70      	ldr	r3, [pc, #448]	; (8004f10 <HAL_GPIO_EXTI_Callback+0x36c0>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
		  sprintf(str, "hi message changed to: %s", hiTemp);
 8004d52:	4a70      	ldr	r2, [pc, #448]	; (8004f14 <HAL_GPIO_EXTI_Callback+0x36c4>)
 8004d54:	4970      	ldr	r1, [pc, #448]	; (8004f18 <HAL_GPIO_EXTI_Callback+0x36c8>)
 8004d56:	4868      	ldr	r0, [pc, #416]	; (8004ef8 <HAL_GPIO_EXTI_Callback+0x36a8>)
 8004d58:	f008 fda8 	bl	800d8ac <siprintf>
		  HAL_UART_Transmit(&huart2, str, strlen(str), 100);
 8004d5c:	4866      	ldr	r0, [pc, #408]	; (8004ef8 <HAL_GPIO_EXTI_Callback+0x36a8>)
 8004d5e:	f7fb fa37 	bl	80001d0 <strlen>
 8004d62:	4603      	mov	r3, r0
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	2364      	movs	r3, #100	; 0x64
 8004d68:	4963      	ldr	r1, [pc, #396]	; (8004ef8 <HAL_GPIO_EXTI_Callback+0x36a8>)
 8004d6a:	4864      	ldr	r0, [pc, #400]	; (8004efc <HAL_GPIO_EXTI_Callback+0x36ac>)
 8004d6c:	f007 facc 	bl	800c308 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, "\n", 1, 100);
 8004d70:	2364      	movs	r3, #100	; 0x64
 8004d72:	2201      	movs	r2, #1
 8004d74:	4962      	ldr	r1, [pc, #392]	; (8004f00 <HAL_GPIO_EXTI_Callback+0x36b0>)
 8004d76:	4861      	ldr	r0, [pc, #388]	; (8004efc <HAL_GPIO_EXTI_Callback+0x36ac>)
 8004d78:	f007 fac6 	bl	800c308 <HAL_UART_Transmit>
		  for (int i=0; i<20; i++) {
 8004d7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004d80:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e013      	b.n	8004db2 <HAL_GPIO_EXTI_Callback+0x3562>
		  	  substring[i] = '\0';
 8004d8a:	4a64      	ldr	r2, [pc, #400]	; (8004f1c <HAL_GPIO_EXTI_Callback+0x36cc>)
 8004d8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004d90:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4413      	add	r3, r2
 8004d98:	2200      	movs	r2, #0
 8004d9a:	701a      	strb	r2, [r3, #0]
		  for (int i=0; i<20; i++) {
 8004d9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004da0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004da4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004da8:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	3201      	adds	r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004db6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b13      	cmp	r3, #19
 8004dbe:	dde4      	ble.n	8004d8a <HAL_GPIO_EXTI_Callback+0x353a>
		  menuState = 11;
 8004dc0:	4b47      	ldr	r3, [pc, #284]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004dc2:	220b      	movs	r2, #11
 8004dc4:	601a      	str	r2, [r3, #0]
    break;
 8004dc6:	e0b9      	b.n	8004f3c <HAL_GPIO_EXTI_Callback+0x36ec>
	  } else if (menuState == 11) {
 8004dc8:	4b45      	ldr	r3, [pc, #276]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b0b      	cmp	r3, #11
 8004dce:	d103      	bne.n	8004dd8 <HAL_GPIO_EXTI_Callback+0x3588>
		  menuState = 0;
 8004dd0:	4b43      	ldr	r3, [pc, #268]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
    break;
 8004dd6:	e0b1      	b.n	8004f3c <HAL_GPIO_EXTI_Callback+0x36ec>
	  } else if (menuState == 13) {
 8004dd8:	4b41      	ldr	r3, [pc, #260]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b0d      	cmp	r3, #13
 8004dde:	d146      	bne.n	8004e6e <HAL_GPIO_EXTI_Callback+0x361e>
		  keyState = 0;
 8004de0:	4b48      	ldr	r3, [pc, #288]	; (8004f04 <HAL_GPIO_EXTI_Callback+0x36b4>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
		  hiPressed=0;
 8004de6:	4b48      	ldr	r3, [pc, #288]	; (8004f08 <HAL_GPIO_EXTI_Callback+0x36b8>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]
		  inputHi=0;
 8004dec:	4b47      	ldr	r3, [pc, #284]	; (8004f0c <HAL_GPIO_EXTI_Callback+0x36bc>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
		  isBigger=0;
 8004df2:	4b47      	ldr	r3, [pc, #284]	; (8004f10 <HAL_GPIO_EXTI_Callback+0x36c0>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
		  sprintf(str, "bye message changed to: %s", byeTemp);
 8004df8:	4a49      	ldr	r2, [pc, #292]	; (8004f20 <HAL_GPIO_EXTI_Callback+0x36d0>)
 8004dfa:	494a      	ldr	r1, [pc, #296]	; (8004f24 <HAL_GPIO_EXTI_Callback+0x36d4>)
 8004dfc:	483e      	ldr	r0, [pc, #248]	; (8004ef8 <HAL_GPIO_EXTI_Callback+0x36a8>)
 8004dfe:	f008 fd55 	bl	800d8ac <siprintf>
		  HAL_UART_Transmit(&huart2, str, strlen(str), 100);
 8004e02:	483d      	ldr	r0, [pc, #244]	; (8004ef8 <HAL_GPIO_EXTI_Callback+0x36a8>)
 8004e04:	f7fb f9e4 	bl	80001d0 <strlen>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	2364      	movs	r3, #100	; 0x64
 8004e0e:	493a      	ldr	r1, [pc, #232]	; (8004ef8 <HAL_GPIO_EXTI_Callback+0x36a8>)
 8004e10:	483a      	ldr	r0, [pc, #232]	; (8004efc <HAL_GPIO_EXTI_Callback+0x36ac>)
 8004e12:	f007 fa79 	bl	800c308 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, "\n", 1, 100);
 8004e16:	2364      	movs	r3, #100	; 0x64
 8004e18:	2201      	movs	r2, #1
 8004e1a:	4939      	ldr	r1, [pc, #228]	; (8004f00 <HAL_GPIO_EXTI_Callback+0x36b0>)
 8004e1c:	4837      	ldr	r0, [pc, #220]	; (8004efc <HAL_GPIO_EXTI_Callback+0x36ac>)
 8004e1e:	f007 fa73 	bl	800c308 <HAL_UART_Transmit>
		  for (int i=0; i<20; i++) {
 8004e22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004e26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	e013      	b.n	8004e58 <HAL_GPIO_EXTI_Callback+0x3608>
			  byeSub[i] = '\0';
 8004e30:	4a3d      	ldr	r2, [pc, #244]	; (8004f28 <HAL_GPIO_EXTI_Callback+0x36d8>)
 8004e32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004e36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	2200      	movs	r2, #0
 8004e40:	701a      	strb	r2, [r3, #0]
		  for (int i=0; i<20; i++) {
 8004e42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004e46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e4a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004e4e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	3201      	adds	r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004e5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b13      	cmp	r3, #19
 8004e64:	dde4      	ble.n	8004e30 <HAL_GPIO_EXTI_Callback+0x35e0>
		  menuState = 11;
 8004e66:	4b1e      	ldr	r3, [pc, #120]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004e68:	220b      	movs	r2, #11
 8004e6a:	601a      	str	r2, [r3, #0]
    break;
 8004e6c:	e066      	b.n	8004f3c <HAL_GPIO_EXTI_Callback+0x36ec>
	  } else if (menuState == 18) {
 8004e6e:	4b1c      	ldr	r3, [pc, #112]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b12      	cmp	r3, #18
 8004e74:	d109      	bne.n	8004e8a <HAL_GPIO_EXTI_Callback+0x363a>
		  tens = 0;
 8004e76:	4b1c      	ldr	r3, [pc, #112]	; (8004ee8 <HAL_GPIO_EXTI_Callback+0x3698>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
		  ones = 0;
 8004e7c:	4b1b      	ldr	r3, [pc, #108]	; (8004eec <HAL_GPIO_EXTI_Callback+0x369c>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
		  menuState = 20;
 8004e82:	4b17      	ldr	r3, [pc, #92]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004e84:	2214      	movs	r2, #20
 8004e86:	601a      	str	r2, [r3, #0]
    break;
 8004e88:	e058      	b.n	8004f3c <HAL_GPIO_EXTI_Callback+0x36ec>
	  } else if (menuState == 20) {
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b14      	cmp	r3, #20
 8004e90:	d154      	bne.n	8004f3c <HAL_GPIO_EXTI_Callback+0x36ec>
		  s1.tempTresh = tens*10+ones;
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <HAL_GPIO_EXTI_Callback+0x3698>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4613      	mov	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	4b12      	ldr	r3, [pc, #72]	; (8004eec <HAL_GPIO_EXTI_Callback+0x369c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	4a21      	ldr	r2, [pc, #132]	; (8004f2c <HAL_GPIO_EXTI_Callback+0x36dc>)
 8004ea8:	6213      	str	r3, [r2, #32]
		  menuState = 5;
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <HAL_GPIO_EXTI_Callback+0x3690>)
 8004eac:	2205      	movs	r2, #5
 8004eae:	601a      	str	r2, [r3, #0]
    break;
 8004eb0:	e044      	b.n	8004f3c <HAL_GPIO_EXTI_Callback+0x36ec>
    return;
 8004eb2:	bf00      	nop
 8004eb4:	e043      	b.n	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
    return;
 8004eb6:	bf00      	nop
 8004eb8:	e041      	b.n	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
      return;
 8004eba:	bf00      	nop
 8004ebc:	e03f      	b.n	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
    return; // Reject invalid scan
 8004ebe:	bf00      	nop
 8004ec0:	e03d      	b.n	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
    break;
 8004ec2:	bf00      	nop
 8004ec4:	e03b      	b.n	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
    break;
 8004ec6:	bf00      	nop
 8004ec8:	e039      	b.n	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
    break;
 8004eca:	bf00      	nop
 8004ecc:	e037      	b.n	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
    break;
 8004ece:	bf00      	nop
 8004ed0:	e035      	b.n	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
    break;
 8004ed2:	bf00      	nop
 8004ed4:	e033      	b.n	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
    break;
 8004ed6:	bf00      	nop
 8004ed8:	e031      	b.n	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
    break;
 8004eda:	bf00      	nop
 8004edc:	e02f      	b.n	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
 8004ede:	bf00      	nop
 8004ee0:	2000000c 	.word	0x2000000c
 8004ee4:	20000728 	.word	0x20000728
 8004ee8:	2000069c 	.word	0x2000069c
 8004eec:	20000698 	.word	0x20000698
 8004ef0:	20000010 	.word	0x20000010
 8004ef4:	0800e4ec 	.word	0x0800e4ec
 8004ef8:	200006c4 	.word	0x200006c4
 8004efc:	20000304 	.word	0x20000304
 8004f00:	0800e50c 	.word	0x0800e50c
 8004f04:	20000768 	.word	0x20000768
 8004f08:	20000764 	.word	0x20000764
 8004f0c:	20000760 	.word	0x20000760
 8004f10:	2000076c 	.word	0x2000076c
 8004f14:	20000014 	.word	0x20000014
 8004f18:	0800e510 	.word	0x0800e510
 8004f1c:	200006ec 	.word	0x200006ec
 8004f20:	20000028 	.word	0x20000028
 8004f24:	0800e52c 	.word	0x0800e52c
 8004f28:	20000700 	.word	0x20000700
 8004f2c:	200007a4 	.word	0x200007a4
    break;
 8004f30:	bf00      	nop
 8004f32:	e004      	b.n	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
    break;
 8004f34:	bf00      	nop
 8004f36:	e002      	b.n	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
    break;
 8004f38:	bf00      	nop
 8004f3a:	e000      	b.n	8004f3e <HAL_GPIO_EXTI_Callback+0x36ee>
    break;
 8004f3c:	bf00      	nop
  }
}
 8004f3e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd90      	pop	{r4, r7, pc}
 8004f46:	bf00      	nop

08004f48 <buzzerInit>:

void buzzerInit() {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
    buzzerPwmTimer = &htim2;
 8004f4c:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <buzzerInit+0x24>)
 8004f4e:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <buzzerInit+0x28>)
 8004f50:	601a      	str	r2, [r3, #0]
    buzzerPwmChannel = TIM_CHANNEL_1;
 8004f52:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <buzzerInit+0x2c>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Start(buzzerPwmTimer, buzzerPwmChannel);
 8004f58:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <buzzerInit+0x24>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a05      	ldr	r2, [pc, #20]	; (8004f74 <buzzerInit+0x2c>)
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	4611      	mov	r1, r2
 8004f62:	4618      	mov	r0, r3
 8004f64:	f006 f898 	bl	800b098 <HAL_TIM_PWM_Start>
}
 8004f68:	bf00      	nop
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20000688 	.word	0x20000688
 8004f70:	2000026c 	.word	0x2000026c
 8004f74:	2000068c 	.word	0x2000068c

08004f78 <buzzerChangeTone>:

void buzzerChangeTone(uint16_t freq, uint16_t volume) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	460a      	mov	r2, r1
 8004f82:	80fb      	strh	r3, [r7, #6]
 8004f84:	4613      	mov	r3, r2
 8004f86:	80bb      	strh	r3, [r7, #4]
    if (freq == 0 || freq > 20000) {
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d004      	beq.n	8004f98 <buzzerChangeTone+0x20>
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d937      	bls.n	8005008 <buzzerChangeTone+0x90>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, 0);
 8004f98:	4b52      	ldr	r3, [pc, #328]	; (80050e4 <buzzerChangeTone+0x16c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d105      	bne.n	8004fac <buzzerChangeTone+0x34>
 8004fa0:	4b51      	ldr	r3, [pc, #324]	; (80050e8 <buzzerChangeTone+0x170>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	635a      	str	r2, [r3, #52]	; 0x34
 8004faa:	e096      	b.n	80050da <buzzerChangeTone+0x162>
 8004fac:	4b4d      	ldr	r3, [pc, #308]	; (80050e4 <buzzerChangeTone+0x16c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d105      	bne.n	8004fc0 <buzzerChangeTone+0x48>
 8004fb4:	4b4c      	ldr	r3, [pc, #304]	; (80050e8 <buzzerChangeTone+0x170>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	6393      	str	r3, [r2, #56]	; 0x38
 8004fbe:	e08c      	b.n	80050da <buzzerChangeTone+0x162>
 8004fc0:	4b48      	ldr	r3, [pc, #288]	; (80050e4 <buzzerChangeTone+0x16c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d105      	bne.n	8004fd4 <buzzerChangeTone+0x5c>
 8004fc8:	4b47      	ldr	r3, [pc, #284]	; (80050e8 <buzzerChangeTone+0x170>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004fd2:	e082      	b.n	80050da <buzzerChangeTone+0x162>
 8004fd4:	4b43      	ldr	r3, [pc, #268]	; (80050e4 <buzzerChangeTone+0x16c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b0c      	cmp	r3, #12
 8004fda:	d105      	bne.n	8004fe8 <buzzerChangeTone+0x70>
 8004fdc:	4b42      	ldr	r3, [pc, #264]	; (80050e8 <buzzerChangeTone+0x170>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fe6:	e078      	b.n	80050da <buzzerChangeTone+0x162>
 8004fe8:	4b3e      	ldr	r3, [pc, #248]	; (80050e4 <buzzerChangeTone+0x16c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b10      	cmp	r3, #16
 8004fee:	d105      	bne.n	8004ffc <buzzerChangeTone+0x84>
 8004ff0:	4b3d      	ldr	r3, [pc, #244]	; (80050e8 <buzzerChangeTone+0x170>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8004ffa:	e06e      	b.n	80050da <buzzerChangeTone+0x162>
 8004ffc:	4b3a      	ldr	r3, [pc, #232]	; (80050e8 <buzzerChangeTone+0x170>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	2300      	movs	r3, #0
 8005004:	65d3      	str	r3, [r2, #92]	; 0x5c
 8005006:	e068      	b.n	80050da <buzzerChangeTone+0x162>
    } else {
        const uint32_t internalClockFreq = HAL_RCC_GetSysClockFreq();
 8005008:	f005 fc0e 	bl	800a828 <HAL_RCC_GetSysClockFreq>
 800500c:	61f8      	str	r0, [r7, #28]
        const uint32_t prescaler = 1 + internalClockFreq / freq / 60000;
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	fbb2 f3f3 	udiv	r3, r2, r3
 8005016:	4a35      	ldr	r2, [pc, #212]	; (80050ec <buzzerChangeTone+0x174>)
 8005018:	fba2 2303 	umull	r2, r3, r2, r3
 800501c:	0b9b      	lsrs	r3, r3, #14
 800501e:	3301      	adds	r3, #1
 8005020:	61bb      	str	r3, [r7, #24]
        const uint32_t timerClock = internalClockFreq / prescaler;
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	fbb2 f3f3 	udiv	r3, r2, r3
 800502a:	617b      	str	r3, [r7, #20]
        const uint32_t periodCycles = timerClock / freq;
 800502c:	88fb      	ldrh	r3, [r7, #6]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	fbb2 f3f3 	udiv	r3, r2, r3
 8005034:	613b      	str	r3, [r7, #16]
        const uint32_t pulseWidth = volume * periodCycles / 1000 / 2;
 8005036:	88bb      	ldrh	r3, [r7, #4]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	fb02 f303 	mul.w	r3, r2, r3
 800503e:	4a2c      	ldr	r2, [pc, #176]	; (80050f0 <buzzerChangeTone+0x178>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	09db      	lsrs	r3, r3, #7
 8005046:	60fb      	str	r3, [r7, #12]

        buzzerPwmTimer->Instance->PSC = prescaler - 1;
 8005048:	4b27      	ldr	r3, [pc, #156]	; (80050e8 <buzzerChangeTone+0x170>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	3a01      	subs	r2, #1
 8005052:	629a      	str	r2, [r3, #40]	; 0x28
        buzzerPwmTimer->Instance->ARR = periodCycles - 1;
 8005054:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <buzzerChangeTone+0x170>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	3a01      	subs	r2, #1
 800505e:	62da      	str	r2, [r3, #44]	; 0x2c
        buzzerPwmTimer->Instance->EGR = TIM_EGR_UG;
 8005060:	4b21      	ldr	r3, [pc, #132]	; (80050e8 <buzzerChangeTone+0x170>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2201      	movs	r2, #1
 8005068:	615a      	str	r2, [r3, #20]

        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 800506a:	4b1e      	ldr	r3, [pc, #120]	; (80050e4 <buzzerChangeTone+0x16c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d105      	bne.n	800507e <buzzerChangeTone+0x106>
 8005072:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <buzzerChangeTone+0x170>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 800507c:	e02d      	b.n	80050da <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 800507e:	4b19      	ldr	r3, [pc, #100]	; (80050e4 <buzzerChangeTone+0x16c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b04      	cmp	r3, #4
 8005084:	d105      	bne.n	8005092 <buzzerChangeTone+0x11a>
 8005086:	4b18      	ldr	r3, [pc, #96]	; (80050e8 <buzzerChangeTone+0x170>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005090:	e023      	b.n	80050da <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 8005092:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <buzzerChangeTone+0x16c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b08      	cmp	r3, #8
 8005098:	d105      	bne.n	80050a6 <buzzerChangeTone+0x12e>
 800509a:	4b13      	ldr	r3, [pc, #76]	; (80050e8 <buzzerChangeTone+0x170>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80050a4:	e019      	b.n	80050da <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 80050a6:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <buzzerChangeTone+0x16c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b0c      	cmp	r3, #12
 80050ac:	d105      	bne.n	80050ba <buzzerChangeTone+0x142>
 80050ae:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <buzzerChangeTone+0x170>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80050b8:	e00f      	b.n	80050da <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 80050ba:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <buzzerChangeTone+0x16c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b10      	cmp	r3, #16
 80050c0:	d105      	bne.n	80050ce <buzzerChangeTone+0x156>
 80050c2:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <buzzerChangeTone+0x170>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6593      	str	r3, [r2, #88]	; 0x58
}
 80050cc:	e005      	b.n	80050da <buzzerChangeTone+0x162>
        __HAL_TIM_SET_COMPARE(buzzerPwmTimer, buzzerPwmChannel, pulseWidth);
 80050ce:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <buzzerChangeTone+0x170>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80050d8:	e7ff      	b.n	80050da <buzzerChangeTone+0x162>
 80050da:	bf00      	nop
 80050dc:	3720      	adds	r7, #32
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	2000068c 	.word	0x2000068c
 80050e8:	20000688 	.word	0x20000688
 80050ec:	45e7b273 	.word	0x45e7b273
 80050f0:	10624dd3 	.word	0x10624dd3

080050f4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005104:	d11d      	bne.n	8005142 <HAL_ADC_ConvCpltCallback+0x4e>
    	uint32_t y = HAL_ADC_GetValue(&hadc1);
 8005106:	4818      	ldr	r0, [pc, #96]	; (8005168 <HAL_ADC_ConvCpltCallback+0x74>)
 8005108:	f002 fcb4 	bl	8007a74 <HAL_ADC_GetValue>
 800510c:	60f8      	str	r0, [r7, #12]
    	temp = (y*3300/40950)/3.5;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f640 42e4 	movw	r2, #3300	; 0xce4
 8005114:	fb02 f303 	mul.w	r3, r2, r3
 8005118:	4a14      	ldr	r2, [pc, #80]	; (800516c <HAL_ADC_ConvCpltCallback+0x78>)
 800511a:	fba2 2303 	umull	r2, r3, r2, r3
 800511e:	0bdb      	lsrs	r3, r3, #15
 8005120:	4618      	mov	r0, r3
 8005122:	f7fb f9ef 	bl	8000504 <__aeabi_ui2d>
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	4b11      	ldr	r3, [pc, #68]	; (8005170 <HAL_ADC_ConvCpltCallback+0x7c>)
 800512c:	f7fb fb8e 	bl	800084c <__aeabi_ddiv>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4610      	mov	r0, r2
 8005136:	4619      	mov	r1, r3
 8005138:	f7fb fc70 	bl	8000a1c <__aeabi_d2iz>
 800513c:	4603      	mov	r3, r0
 800513e:	4a0d      	ldr	r2, [pc, #52]	; (8005174 <HAL_ADC_ConvCpltCallback+0x80>)
 8005140:	6013      	str	r3, [r2, #0]

    } if (hadc->Instance == ADC2) {
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a0c      	ldr	r2, [pc, #48]	; (8005178 <HAL_ADC_ConvCpltCallback+0x84>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d109      	bne.n	8005160 <HAL_ADC_ConvCpltCallback+0x6c>
    	uint32_t x = HAL_ADC_GetValue(&hadc2);
 800514c:	480b      	ldr	r0, [pc, #44]	; (800517c <HAL_ADC_ConvCpltCallback+0x88>)
 800514e:	f002 fc91 	bl	8007a74 <HAL_ADC_GetValue>
 8005152:	60b8      	str	r0, [r7, #8]
    	v = x/4 - 100;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	089b      	lsrs	r3, r3, #2
 8005158:	3b64      	subs	r3, #100	; 0x64
 800515a:	461a      	mov	r2, r3
 800515c:	4b08      	ldr	r3, [pc, #32]	; (8005180 <HAL_ADC_ConvCpltCallback+0x8c>)
 800515e:	601a      	str	r2, [r3, #0]
    }
}
 8005160:	bf00      	nop
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20000114 	.word	0x20000114
 800516c:	ccd99a67 	.word	0xccd99a67
 8005170:	400c0000 	.word	0x400c0000
 8005174:	2000072c 	.word	0x2000072c
 8005178:	50000100 	.word	0x50000100
 800517c:	20000164 	.word	0x20000164
 8005180:	20000794 	.word	0x20000794

08005184 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4aa5      	ldr	r2, [pc, #660]	; (8005428 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	f041 8108 	bne.w	80063a8 <HAL_TIM_PeriodElapsedCallback+0x1224>
    	count = count+1;
 8005198:	4ba4      	ldr	r3, [pc, #656]	; (800542c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3301      	adds	r3, #1
 800519e:	4aa3      	ldr	r2, [pc, #652]	; (800542c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80051a0:	6013      	str	r3, [r2, #0]
    	HAL_ADC_Start_IT(&hadc1);
 80051a2:	48a3      	ldr	r0, [pc, #652]	; (8005430 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80051a4:	f002 fb26 	bl	80077f4 <HAL_ADC_Start_IT>
    	HAL_ADC_Start_IT(&hadc2);
 80051a8:	48a2      	ldr	r0, [pc, #648]	; (8005434 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80051aa:	f002 fb23 	bl	80077f4 <HAL_ADC_Start_IT>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, LED1);
 80051ae:	4ba2      	ldr	r3, [pc, #648]	; (8005438 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	2110      	movs	r1, #16
 80051b8:	48a0      	ldr	r0, [pc, #640]	; (800543c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80051ba:	f003 ff39 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, LED2);
 80051be:	4ba0      	ldr	r3, [pc, #640]	; (8005440 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	2120      	movs	r1, #32
 80051c8:	489c      	ldr	r0, [pc, #624]	; (800543c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80051ca:	f003 ff31 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, LED3);
 80051ce:	4b9d      	ldr	r3, [pc, #628]	; (8005444 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	461a      	mov	r2, r3
 80051d6:	2101      	movs	r1, #1
 80051d8:	489b      	ldr	r0, [pc, #620]	; (8005448 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80051da:	f003 ff29 	bl	8009030 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, LED4);
 80051de:	4b9b      	ldr	r3, [pc, #620]	; (800544c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	461a      	mov	r2, r3
 80051e6:	2102      	movs	r1, #2
 80051e8:	4897      	ldr	r0, [pc, #604]	; (8005448 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80051ea:	f003 ff21 	bl	8009030 <HAL_GPIO_WritePin>
    	if (menuState == -1) {
 80051ee:	4b98      	ldr	r3, [pc, #608]	; (8005450 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d130      	bne.n	800525a <HAL_TIM_PeriodElapsedCallback+0xd6>
    		if (sw_1 == 0) {
 80051f8:	4b96      	ldr	r3, [pc, #600]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d11e      	bne.n	800523e <HAL_TIM_PeriodElapsedCallback+0xba>
    			setCursor(0, 0);
 8005200:	2100      	movs	r1, #0
 8005202:	2000      	movs	r0, #0
 8005204:	f7fb fe98 	bl	8000f38 <setCursor>
    			print("                    ");
 8005208:	4893      	ldr	r0, [pc, #588]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800520a:	f7fb fedd 	bl	8000fc8 <print>
    			setCursor(0, 1);
 800520e:	2101      	movs	r1, #1
 8005210:	2000      	movs	r0, #0
 8005212:	f7fb fe91 	bl	8000f38 <setCursor>
    			print("                    ");
 8005216:	4890      	ldr	r0, [pc, #576]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005218:	f7fb fed6 	bl	8000fc8 <print>
      			setCursor(0, 2);
 800521c:	2102      	movs	r1, #2
 800521e:	2000      	movs	r0, #0
 8005220:	f7fb fe8a 	bl	8000f38 <setCursor>
    			print("                    ");
 8005224:	488c      	ldr	r0, [pc, #560]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005226:	f7fb fecf 	bl	8000fc8 <print>
    			setCursor(0, 3);
 800522a:	2103      	movs	r1, #3
 800522c:	2000      	movs	r0, #0
 800522e:	f7fb fe83 	bl	8000f38 <setCursor>
    			print("                    ");
 8005232:	4889      	ldr	r0, [pc, #548]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005234:	f7fb fec8 	bl	8000fc8 <print>
    			sw_1 = 1;
 8005238:	4b86      	ldr	r3, [pc, #536]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800523a:	2201      	movs	r2, #1
 800523c:	601a      	str	r2, [r3, #0]
    		}
//    		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
    		setCursor(0, 0);
 800523e:	2100      	movs	r1, #0
 8005240:	2000      	movs	r0, #0
 8005242:	f7fb fe79 	bl	8000f38 <setCursor>
    		print("      sleeping   ");
 8005246:	4885      	ldr	r0, [pc, #532]	; (800545c <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005248:	f7fb febe 	bl	8000fc8 <print>
//    		setCursor(0, 1);
//    		sprintf(str, "volume = %d", v);
    		print(str);
 800524c:	4884      	ldr	r0, [pc, #528]	; (8005460 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800524e:	f7fb febb 	bl	8000fc8 <print>
    		//    		scrollDisplayRight();
    		sw1 = 0;
 8005252:	4b84      	ldr	r3, [pc, #528]	; (8005464 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	e002      	b.n	8005260 <HAL_TIM_PeriodElapsedCallback+0xdc>
    	} else {
    		sw_1 = 0;
 800525a:	4b7e      	ldr	r3, [pc, #504]	; (8005454 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
    	}
    	if (menuState == 0) {
 8005260:	4b7b      	ldr	r3, [pc, #492]	; (8005450 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d142      	bne.n	80052ee <HAL_TIM_PeriodElapsedCallback+0x16a>
//    		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
    		if (sw0 == 0) {
 8005268:	4b7f      	ldr	r3, [pc, #508]	; (8005468 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d11e      	bne.n	80052ae <HAL_TIM_PeriodElapsedCallback+0x12a>
    			setCursor(0, 0);
 8005270:	2100      	movs	r1, #0
 8005272:	2000      	movs	r0, #0
 8005274:	f7fb fe60 	bl	8000f38 <setCursor>
    			print("                    ");
 8005278:	4877      	ldr	r0, [pc, #476]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800527a:	f7fb fea5 	bl	8000fc8 <print>
    			setCursor(0, 1);
 800527e:	2101      	movs	r1, #1
 8005280:	2000      	movs	r0, #0
 8005282:	f7fb fe59 	bl	8000f38 <setCursor>
    			print("                    ");
 8005286:	4874      	ldr	r0, [pc, #464]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005288:	f7fb fe9e 	bl	8000fc8 <print>
      			setCursor(0, 2);
 800528c:	2102      	movs	r1, #2
 800528e:	2000      	movs	r0, #0
 8005290:	f7fb fe52 	bl	8000f38 <setCursor>
    			print("                    ");
 8005294:	4870      	ldr	r0, [pc, #448]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005296:	f7fb fe97 	bl	8000fc8 <print>
    			setCursor(0, 3);
 800529a:	2103      	movs	r1, #3
 800529c:	2000      	movs	r0, #0
 800529e:	f7fb fe4b 	bl	8000f38 <setCursor>
    			print("                    ");
 80052a2:	486d      	ldr	r0, [pc, #436]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80052a4:	f7fb fe90 	bl	8000fc8 <print>
    			sw0 = 1;
 80052a8:	4b6f      	ldr	r3, [pc, #444]	; (8005468 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
    		}
    		setCursor(0, 0);
 80052ae:	2100      	movs	r1, #0
 80052b0:	2000      	movs	r0, #0
 80052b2:	f7fb fe41 	bl	8000f38 <setCursor>
    		print ("1-temp    4-scenario");
 80052b6:	486d      	ldr	r0, [pc, #436]	; (800546c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80052b8:	f7fb fe86 	bl	8000fc8 <print>
    		setCursor(0, 1);
 80052bc:	2101      	movs	r1, #1
 80052be:	2000      	movs	r0, #0
 80052c0:	f7fb fe3a 	bl	8000f38 <setCursor>
    		print ("2-security   5-sleep");
 80052c4:	486a      	ldr	r0, [pc, #424]	; (8005470 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80052c6:	f7fb fe7f 	bl	8000fc8 <print>
    		setCursor(0, 2);
 80052ca:	2102      	movs	r1, #2
 80052cc:	2000      	movs	r0, #0
 80052ce:	f7fb fe33 	bl	8000f38 <setCursor>
    		print ("3-LED        6-exit ");
 80052d2:	4868      	ldr	r0, [pc, #416]	; (8005474 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80052d4:	f7fb fe78 	bl	8000fc8 <print>
    		setCursor(0, 3);
 80052d8:	2103      	movs	r1, #3
 80052da:	2000      	movs	r0, #0
 80052dc:	f7fb fe2c 	bl	8000f38 <setCursor>
    		print("7- change messages");
 80052e0:	4865      	ldr	r0, [pc, #404]	; (8005478 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80052e2:	f7fb fe71 	bl	8000fc8 <print>
    		sw1 = 0;
 80052e6:	4b5f      	ldr	r3, [pc, #380]	; (8005464 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	e002      	b.n	80052f4 <HAL_TIM_PeriodElapsedCallback+0x170>
    	} else {
    		sw0 = 0;
 80052ee:	4b5e      	ldr	r3, [pc, #376]	; (8005468 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
    	}
    	if (menuState == 1) {
 80052f4:	4b56      	ldr	r3, [pc, #344]	; (8005450 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d157      	bne.n	80053ac <HAL_TIM_PeriodElapsedCallback+0x228>
//    		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
    		if (sw1 == 0) {
 80052fc:	4b59      	ldr	r3, [pc, #356]	; (8005464 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d11e      	bne.n	8005342 <HAL_TIM_PeriodElapsedCallback+0x1be>
    			setCursor(0, 0);
 8005304:	2100      	movs	r1, #0
 8005306:	2000      	movs	r0, #0
 8005308:	f7fb fe16 	bl	8000f38 <setCursor>
    			print("                    ");
 800530c:	4852      	ldr	r0, [pc, #328]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800530e:	f7fb fe5b 	bl	8000fc8 <print>
    			setCursor(0, 1);
 8005312:	2101      	movs	r1, #1
 8005314:	2000      	movs	r0, #0
 8005316:	f7fb fe0f 	bl	8000f38 <setCursor>
    			print("                    ");
 800531a:	484f      	ldr	r0, [pc, #316]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800531c:	f7fb fe54 	bl	8000fc8 <print>
      			setCursor(0, 2);
 8005320:	2102      	movs	r1, #2
 8005322:	2000      	movs	r0, #0
 8005324:	f7fb fe08 	bl	8000f38 <setCursor>
    			print("                    ");
 8005328:	484b      	ldr	r0, [pc, #300]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800532a:	f7fb fe4d 	bl	8000fc8 <print>
    			setCursor(0, 3);
 800532e:	2103      	movs	r1, #3
 8005330:	2000      	movs	r0, #0
 8005332:	f7fb fe01 	bl	8000f38 <setCursor>
    			print("                    ");
 8005336:	4848      	ldr	r0, [pc, #288]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005338:	f7fb fe46 	bl	8000fc8 <print>
    			sw1 = 1;
 800533c:	4b49      	ldr	r3, [pc, #292]	; (8005464 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]
    		}
    		setCursor(0, 0);
 8005342:	2100      	movs	r1, #0
 8005344:	2000      	movs	r0, #0
 8005346:	f7fb fdf7 	bl	8000f38 <setCursor>
    		sprintf(str , "Thresh= %d temp= %d", tempTresh, temp);
 800534a:	4b4c      	ldr	r3, [pc, #304]	; (800547c <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4b4c      	ldr	r3, [pc, #304]	; (8005480 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	494c      	ldr	r1, [pc, #304]	; (8005484 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8005354:	4842      	ldr	r0, [pc, #264]	; (8005460 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005356:	f008 faa9 	bl	800d8ac <siprintf>
    		print(str);
 800535a:	4841      	ldr	r0, [pc, #260]	; (8005460 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800535c:	f7fb fe34 	bl	8000fc8 <print>
    		setCursor(0, 1);
 8005360:	2101      	movs	r1, #1
 8005362:	2000      	movs	r0, #0
 8005364:	f7fb fde8 	bl	8000f38 <setCursor>
    		if (buzzerForTemp == 0) {
 8005368:	4b47      	ldr	r3, [pc, #284]	; (8005488 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d103      	bne.n	8005378 <HAL_TIM_PeriodElapsedCallback+0x1f4>
    			print("buzzer = on ");
 8005370:	4846      	ldr	r0, [pc, #280]	; (800548c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8005372:	f7fb fe29 	bl	8000fc8 <print>
 8005376:	e002      	b.n	800537e <HAL_TIM_PeriodElapsedCallback+0x1fa>
    		} else {
    			print("buzzer = off");
 8005378:	4845      	ldr	r0, [pc, #276]	; (8005490 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800537a:	f7fb fe25 	bl	8000fc8 <print>
    		}
    		setCursor(0, 2);
 800537e:	2102      	movs	r1, #2
 8005380:	2000      	movs	r0, #0
 8005382:	f7fb fdd9 	bl	8000f38 <setCursor>
    		if (buzzerForTemp == 0) {
 8005386:	4b40      	ldr	r3, [pc, #256]	; (8005488 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d103      	bne.n	8005396 <HAL_TIM_PeriodElapsedCallback+0x212>
    			print("1- set buzzer off");
 800538e:	4841      	ldr	r0, [pc, #260]	; (8005494 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8005390:	f7fb fe1a 	bl	8000fc8 <print>
 8005394:	e002      	b.n	800539c <HAL_TIM_PeriodElapsedCallback+0x218>
    		} else {
    			print("1- set buzzer on ");
 8005396:	4840      	ldr	r0, [pc, #256]	; (8005498 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8005398:	f7fb fe16 	bl	8000fc8 <print>
    		}
    		setCursor(0, 3);
 800539c:	2103      	movs	r1, #3
 800539e:	2000      	movs	r0, #0
 80053a0:	f7fb fdca 	bl	8000f38 <setCursor>
    		print("2 - change threshold");
 80053a4:	483d      	ldr	r0, [pc, #244]	; (800549c <HAL_TIM_PeriodElapsedCallback+0x318>)
 80053a6:	f7fb fe0f 	bl	8000fc8 <print>
 80053aa:	e002      	b.n	80053b2 <HAL_TIM_PeriodElapsedCallback+0x22e>

    	} else {
    		sw1 = 0;
 80053ac:	4b2d      	ldr	r3, [pc, #180]	; (8005464 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 2 ) {
 80053b2:	4b27      	ldr	r3, [pc, #156]	; (8005450 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d17c      	bne.n	80054b4 <HAL_TIM_PeriodElapsedCallback+0x330>

    		if (sw2 == 0) {
 80053ba:	4b39      	ldr	r3, [pc, #228]	; (80054a0 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d121      	bne.n	8005406 <HAL_TIM_PeriodElapsedCallback+0x282>
    			input = 0;
 80053c2:	4b38      	ldr	r3, [pc, #224]	; (80054a4 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
    			setCursor(0, 0);
 80053c8:	2100      	movs	r1, #0
 80053ca:	2000      	movs	r0, #0
 80053cc:	f7fb fdb4 	bl	8000f38 <setCursor>
    			print("                    ");
 80053d0:	4821      	ldr	r0, [pc, #132]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80053d2:	f7fb fdf9 	bl	8000fc8 <print>
    			setCursor(0, 1);
 80053d6:	2101      	movs	r1, #1
 80053d8:	2000      	movs	r0, #0
 80053da:	f7fb fdad 	bl	8000f38 <setCursor>
    			print("                    ");
 80053de:	481e      	ldr	r0, [pc, #120]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80053e0:	f7fb fdf2 	bl	8000fc8 <print>
      			setCursor(0, 2);
 80053e4:	2102      	movs	r1, #2
 80053e6:	2000      	movs	r0, #0
 80053e8:	f7fb fda6 	bl	8000f38 <setCursor>
    			print("                    ");
 80053ec:	481a      	ldr	r0, [pc, #104]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80053ee:	f7fb fdeb 	bl	8000fc8 <print>
    			setCursor(0, 3);
 80053f2:	2103      	movs	r1, #3
 80053f4:	2000      	movs	r0, #0
 80053f6:	f7fb fd9f 	bl	8000f38 <setCursor>
    			print("                    ");
 80053fa:	4817      	ldr	r0, [pc, #92]	; (8005458 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80053fc:	f7fb fde4 	bl	8000fc8 <print>
    			sw2 = 1;
 8005400:	4b27      	ldr	r3, [pc, #156]	; (80054a0 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8005402:	2201      	movs	r2, #1
 8005404:	601a      	str	r2, [r3, #0]
    		}

    		setCursor(0, 0);
 8005406:	2100      	movs	r1, #0
 8005408:	2000      	movs	r0, #0
 800540a:	f7fb fd95 	bl	8000f38 <setCursor>
    		sprintf(str,"tempThresh = %d%d",tens, ones);
 800540e:	4b26      	ldr	r3, [pc, #152]	; (80054a8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b26      	ldr	r3, [pc, #152]	; (80054ac <HAL_TIM_PeriodElapsedCallback+0x328>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4926      	ldr	r1, [pc, #152]	; (80054b0 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8005418:	4811      	ldr	r0, [pc, #68]	; (8005460 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800541a:	f008 fa47 	bl	800d8ac <siprintf>
    		print(str);
 800541e:	4810      	ldr	r0, [pc, #64]	; (8005460 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005420:	f7fb fdd2 	bl	8000fc8 <print>
 8005424:	e049      	b.n	80054ba <HAL_TIM_PeriodElapsedCallback+0x336>
 8005426:	bf00      	nop
 8005428:	40000400 	.word	0x40000400
 800542c:	20000728 	.word	0x20000728
 8005430:	20000114 	.word	0x20000114
 8005434:	20000164 	.word	0x20000164
 8005438:	20000714 	.word	0x20000714
 800543c:	48000800 	.word	0x48000800
 8005440:	20000718 	.word	0x20000718
 8005444:	2000071c 	.word	0x2000071c
 8005448:	48000400 	.word	0x48000400
 800544c:	20000720 	.word	0x20000720
 8005450:	2000000c 	.word	0x2000000c
 8005454:	200006b0 	.word	0x200006b0
 8005458:	0800e548 	.word	0x0800e548
 800545c:	0800e560 	.word	0x0800e560
 8005460:	200006c4 	.word	0x200006c4
 8005464:	20000694 	.word	0x20000694
 8005468:	200006ac 	.word	0x200006ac
 800546c:	0800e574 	.word	0x0800e574
 8005470:	0800e58c 	.word	0x0800e58c
 8005474:	0800e5a4 	.word	0x0800e5a4
 8005478:	0800e5bc 	.word	0x0800e5bc
 800547c:	20000010 	.word	0x20000010
 8005480:	2000072c 	.word	0x2000072c
 8005484:	0800e5d0 	.word	0x0800e5d0
 8005488:	200006a0 	.word	0x200006a0
 800548c:	0800e5e4 	.word	0x0800e5e4
 8005490:	0800e5f4 	.word	0x0800e5f4
 8005494:	0800e604 	.word	0x0800e604
 8005498:	0800e618 	.word	0x0800e618
 800549c:	0800e62c 	.word	0x0800e62c
 80054a0:	200006a4 	.word	0x200006a4
 80054a4:	200006a8 	.word	0x200006a8
 80054a8:	2000069c 	.word	0x2000069c
 80054ac:	20000698 	.word	0x20000698
 80054b0:	0800e644 	.word	0x0800e644
    	} else {
    		sw2 = 0;
 80054b4:	4bad      	ldr	r3, [pc, #692]	; (800576c <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 3) {
 80054ba:	4bad      	ldr	r3, [pc, #692]	; (8005770 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d15f      	bne.n	8005582 <HAL_TIM_PeriodElapsedCallback+0x3fe>
    		if (sw3 == 0) {
 80054c2:	4bac      	ldr	r3, [pc, #688]	; (8005774 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d11e      	bne.n	8005508 <HAL_TIM_PeriodElapsedCallback+0x384>
    			setCursor(0, 0);
 80054ca:	2100      	movs	r1, #0
 80054cc:	2000      	movs	r0, #0
 80054ce:	f7fb fd33 	bl	8000f38 <setCursor>
    			print("                    ");
 80054d2:	48a9      	ldr	r0, [pc, #676]	; (8005778 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80054d4:	f7fb fd78 	bl	8000fc8 <print>
    			setCursor(0, 1);
 80054d8:	2101      	movs	r1, #1
 80054da:	2000      	movs	r0, #0
 80054dc:	f7fb fd2c 	bl	8000f38 <setCursor>
    			print("                    ");
 80054e0:	48a5      	ldr	r0, [pc, #660]	; (8005778 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80054e2:	f7fb fd71 	bl	8000fc8 <print>
      			setCursor(0, 2);
 80054e6:	2102      	movs	r1, #2
 80054e8:	2000      	movs	r0, #0
 80054ea:	f7fb fd25 	bl	8000f38 <setCursor>
    			print("                    ");
 80054ee:	48a2      	ldr	r0, [pc, #648]	; (8005778 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80054f0:	f7fb fd6a 	bl	8000fc8 <print>
    			setCursor(0, 3);
 80054f4:	2103      	movs	r1, #3
 80054f6:	2000      	movs	r0, #0
 80054f8:	f7fb fd1e 	bl	8000f38 <setCursor>
    			print("                    ");
 80054fc:	489e      	ldr	r0, [pc, #632]	; (8005778 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80054fe:	f7fb fd63 	bl	8000fc8 <print>
    			sw3 = 1;
 8005502:	4b9c      	ldr	r3, [pc, #624]	; (8005774 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8005504:	2201      	movs	r2, #1
 8005506:	601a      	str	r2, [r3, #0]
    		}
    		setCursor(0, 0);
 8005508:	2100      	movs	r1, #0
 800550a:	2000      	movs	r0, #0
 800550c:	f7fb fd14 	bl	8000f38 <setCursor>
    		if (pirIsOn == 0) {
 8005510:	4b9a      	ldr	r3, [pc, #616]	; (800577c <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d103      	bne.n	8005520 <HAL_TIM_PeriodElapsedCallback+0x39c>
    			print("PIR = on ");
 8005518:	4899      	ldr	r0, [pc, #612]	; (8005780 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800551a:	f7fb fd55 	bl	8000fc8 <print>
 800551e:	e002      	b.n	8005526 <HAL_TIM_PeriodElapsedCallback+0x3a2>
    		} else {
    			print("PIR = off");
 8005520:	4898      	ldr	r0, [pc, #608]	; (8005784 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8005522:	f7fb fd51 	bl	8000fc8 <print>
    		}
    		setCursor(0, 1);
 8005526:	2101      	movs	r1, #1
 8005528:	2000      	movs	r0, #0
 800552a:	f7fb fd05 	bl	8000f38 <setCursor>
    		if (buzzerForPir == 0) {
 800552e:	4b96      	ldr	r3, [pc, #600]	; (8005788 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d103      	bne.n	800553e <HAL_TIM_PeriodElapsedCallback+0x3ba>
    			print("buzzer = on ");
 8005536:	4895      	ldr	r0, [pc, #596]	; (800578c <HAL_TIM_PeriodElapsedCallback+0x608>)
 8005538:	f7fb fd46 	bl	8000fc8 <print>
 800553c:	e002      	b.n	8005544 <HAL_TIM_PeriodElapsedCallback+0x3c0>
    		} else {
    			print("buzzer = off");
 800553e:	4894      	ldr	r0, [pc, #592]	; (8005790 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8005540:	f7fb fd42 	bl	8000fc8 <print>
    		}
    		setCursor(0, 2);
 8005544:	2102      	movs	r1, #2
 8005546:	2000      	movs	r0, #0
 8005548:	f7fb fcf6 	bl	8000f38 <setCursor>
    		if (pirIsOn == 0) {
 800554c:	4b8b      	ldr	r3, [pc, #556]	; (800577c <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d103      	bne.n	800555c <HAL_TIM_PeriodElapsedCallback+0x3d8>
    			print("1- set PIR off");
 8005554:	488f      	ldr	r0, [pc, #572]	; (8005794 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8005556:	f7fb fd37 	bl	8000fc8 <print>
 800555a:	e002      	b.n	8005562 <HAL_TIM_PeriodElapsedCallback+0x3de>
    		} else {
    			print("1- set PIR on ");
 800555c:	488e      	ldr	r0, [pc, #568]	; (8005798 <HAL_TIM_PeriodElapsedCallback+0x614>)
 800555e:	f7fb fd33 	bl	8000fc8 <print>
    		}
    		setCursor(0, 3);
 8005562:	2103      	movs	r1, #3
 8005564:	2000      	movs	r0, #0
 8005566:	f7fb fce7 	bl	8000f38 <setCursor>
    		if (buzzerForPir == 0) {
 800556a:	4b87      	ldr	r3, [pc, #540]	; (8005788 <HAL_TIM_PeriodElapsedCallback+0x604>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d103      	bne.n	800557a <HAL_TIM_PeriodElapsedCallback+0x3f6>
    			print("2- set buzzer off");
 8005572:	488a      	ldr	r0, [pc, #552]	; (800579c <HAL_TIM_PeriodElapsedCallback+0x618>)
 8005574:	f7fb fd28 	bl	8000fc8 <print>
 8005578:	e006      	b.n	8005588 <HAL_TIM_PeriodElapsedCallback+0x404>
    		} else {
    			print("2- set buzzer on ");
 800557a:	4889      	ldr	r0, [pc, #548]	; (80057a0 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800557c:	f7fb fd24 	bl	8000fc8 <print>
 8005580:	e002      	b.n	8005588 <HAL_TIM_PeriodElapsedCallback+0x404>
    		}
    	} else {
    		sw3 = 0;
 8005582:	4b7c      	ldr	r3, [pc, #496]	; (8005774 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 4) {
 8005588:	4b79      	ldr	r3, [pc, #484]	; (8005770 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b04      	cmp	r3, #4
 800558e:	f040 8098 	bne.w	80056c2 <HAL_TIM_PeriodElapsedCallback+0x53e>
    		if (sw4 == 0)  {
 8005592:	4b84      	ldr	r3, [pc, #528]	; (80057a4 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d11e      	bne.n	80055d8 <HAL_TIM_PeriodElapsedCallback+0x454>
    			setCursor(0, 0);
 800559a:	2100      	movs	r1, #0
 800559c:	2000      	movs	r0, #0
 800559e:	f7fb fccb 	bl	8000f38 <setCursor>
    			print("                    ");
 80055a2:	4875      	ldr	r0, [pc, #468]	; (8005778 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80055a4:	f7fb fd10 	bl	8000fc8 <print>
    			setCursor(0, 1);
 80055a8:	2101      	movs	r1, #1
 80055aa:	2000      	movs	r0, #0
 80055ac:	f7fb fcc4 	bl	8000f38 <setCursor>
    			print("                    ");
 80055b0:	4871      	ldr	r0, [pc, #452]	; (8005778 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80055b2:	f7fb fd09 	bl	8000fc8 <print>
    			setCursor(0, 2);
 80055b6:	2102      	movs	r1, #2
 80055b8:	2000      	movs	r0, #0
 80055ba:	f7fb fcbd 	bl	8000f38 <setCursor>
    			print("                    ");
 80055be:	486e      	ldr	r0, [pc, #440]	; (8005778 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80055c0:	f7fb fd02 	bl	8000fc8 <print>
    			setCursor(0, 3);
 80055c4:	2103      	movs	r1, #3
 80055c6:	2000      	movs	r0, #0
 80055c8:	f7fb fcb6 	bl	8000f38 <setCursor>
    			print("                    ");
 80055cc:	486a      	ldr	r0, [pc, #424]	; (8005778 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80055ce:	f7fb fcfb 	bl	8000fc8 <print>
    			sw4 = 1;
 80055d2:	4b74      	ldr	r3, [pc, #464]	; (80057a4 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
    		}
    		setCursor(0, 0);
 80055d8:	2100      	movs	r1, #0
 80055da:	2000      	movs	r0, #0
 80055dc:	f7fb fcac 	bl	8000f38 <setCursor>
    		print("LED 1");
 80055e0:	4871      	ldr	r0, [pc, #452]	; (80057a8 <HAL_TIM_PeriodElapsedCallback+0x624>)
 80055e2:	f7fb fcf1 	bl	8000fc8 <print>
    		if (LED1 == 0) {
 80055e6:	4b71      	ldr	r3, [pc, #452]	; (80057ac <HAL_TIM_PeriodElapsedCallback+0x628>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d103      	bne.n	80055f6 <HAL_TIM_PeriodElapsedCallback+0x472>
    			write(0);
 80055ee:	2000      	movs	r0, #0
 80055f0:	f7fb fd4c 	bl	800108c <write>
 80055f4:	e002      	b.n	80055fc <HAL_TIM_PeriodElapsedCallback+0x478>
    		} else {
    			write(1);
 80055f6:	2001      	movs	r0, #1
 80055f8:	f7fb fd48 	bl	800108c <write>
    		}
    		print("      LED 2");
 80055fc:	486c      	ldr	r0, [pc, #432]	; (80057b0 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80055fe:	f7fb fce3 	bl	8000fc8 <print>
    		if (LED2 == 0) {
 8005602:	4b6c      	ldr	r3, [pc, #432]	; (80057b4 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d103      	bne.n	8005612 <HAL_TIM_PeriodElapsedCallback+0x48e>
    		    write(0);
 800560a:	2000      	movs	r0, #0
 800560c:	f7fb fd3e 	bl	800108c <write>
 8005610:	e002      	b.n	8005618 <HAL_TIM_PeriodElapsedCallback+0x494>
    		} else {
    			write(1);
 8005612:	2001      	movs	r0, #1
 8005614:	f7fb fd3a 	bl	800108c <write>
    		}
    		setCursor(0, 1);
 8005618:	2101      	movs	r1, #1
 800561a:	2000      	movs	r0, #0
 800561c:	f7fb fc8c 	bl	8000f38 <setCursor>
    		print("LED 3");
 8005620:	4865      	ldr	r0, [pc, #404]	; (80057b8 <HAL_TIM_PeriodElapsedCallback+0x634>)
 8005622:	f7fb fcd1 	bl	8000fc8 <print>
    		if (LED3 == 0) {
 8005626:	4b65      	ldr	r3, [pc, #404]	; (80057bc <HAL_TIM_PeriodElapsedCallback+0x638>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d103      	bne.n	8005636 <HAL_TIM_PeriodElapsedCallback+0x4b2>
    			write(0);
 800562e:	2000      	movs	r0, #0
 8005630:	f7fb fd2c 	bl	800108c <write>
 8005634:	e002      	b.n	800563c <HAL_TIM_PeriodElapsedCallback+0x4b8>
    		} else {
    			write(1);
 8005636:	2001      	movs	r0, #1
 8005638:	f7fb fd28 	bl	800108c <write>
    		}
    		print("      LED 4");
 800563c:	4860      	ldr	r0, [pc, #384]	; (80057c0 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800563e:	f7fb fcc3 	bl	8000fc8 <print>
    		if (LED4 == 0) {
 8005642:	4b60      	ldr	r3, [pc, #384]	; (80057c4 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d103      	bne.n	8005652 <HAL_TIM_PeriodElapsedCallback+0x4ce>
    			write(0);
 800564a:	2000      	movs	r0, #0
 800564c:	f7fb fd1e 	bl	800108c <write>
 8005650:	e002      	b.n	8005658 <HAL_TIM_PeriodElapsedCallback+0x4d4>
    		} else {
    			write(1);
 8005652:	2001      	movs	r0, #1
 8005654:	f7fb fd1a 	bl	800108c <write>
    		}
    		setCursor(0, 2);
 8005658:	2102      	movs	r1, #2
 800565a:	2000      	movs	r0, #0
 800565c:	f7fb fc6c 	bl	8000f38 <setCursor>
    		if (LED1 == 0) {
 8005660:	4b52      	ldr	r3, [pc, #328]	; (80057ac <HAL_TIM_PeriodElapsedCallback+0x628>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d103      	bne.n	8005670 <HAL_TIM_PeriodElapsedCallback+0x4ec>
    			print("1-LED1 on ");
 8005668:	4857      	ldr	r0, [pc, #348]	; (80057c8 <HAL_TIM_PeriodElapsedCallback+0x644>)
 800566a:	f7fb fcad 	bl	8000fc8 <print>
 800566e:	e002      	b.n	8005676 <HAL_TIM_PeriodElapsedCallback+0x4f2>
    		} else {
    			print("1-LED1 off");
 8005670:	4856      	ldr	r0, [pc, #344]	; (80057cc <HAL_TIM_PeriodElapsedCallback+0x648>)
 8005672:	f7fb fca9 	bl	8000fc8 <print>
    		}

    		if (LED2 == 0) {
 8005676:	4b4f      	ldr	r3, [pc, #316]	; (80057b4 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d103      	bne.n	8005686 <HAL_TIM_PeriodElapsedCallback+0x502>
    			print("2-LED2 on ");
 800567e:	4854      	ldr	r0, [pc, #336]	; (80057d0 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8005680:	f7fb fca2 	bl	8000fc8 <print>
 8005684:	e002      	b.n	800568c <HAL_TIM_PeriodElapsedCallback+0x508>
    		} else {
    			print("2-LED2 off");
 8005686:	4853      	ldr	r0, [pc, #332]	; (80057d4 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8005688:	f7fb fc9e 	bl	8000fc8 <print>
    		}

    		setCursor(0, 3);
 800568c:	2103      	movs	r1, #3
 800568e:	2000      	movs	r0, #0
 8005690:	f7fb fc52 	bl	8000f38 <setCursor>
    		if (LED3 == 0) {
 8005694:	4b49      	ldr	r3, [pc, #292]	; (80057bc <HAL_TIM_PeriodElapsedCallback+0x638>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d103      	bne.n	80056a4 <HAL_TIM_PeriodElapsedCallback+0x520>
    		    print("3-LED3 on ");
 800569c:	484e      	ldr	r0, [pc, #312]	; (80057d8 <HAL_TIM_PeriodElapsedCallback+0x654>)
 800569e:	f7fb fc93 	bl	8000fc8 <print>
 80056a2:	e002      	b.n	80056aa <HAL_TIM_PeriodElapsedCallback+0x526>
    		} else {
    			print("3-LED3 off");
 80056a4:	484d      	ldr	r0, [pc, #308]	; (80057dc <HAL_TIM_PeriodElapsedCallback+0x658>)
 80056a6:	f7fb fc8f 	bl	8000fc8 <print>
    		}

    		if (LED4 == 0) {
 80056aa:	4b46      	ldr	r3, [pc, #280]	; (80057c4 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d103      	bne.n	80056ba <HAL_TIM_PeriodElapsedCallback+0x536>
    		    print("4-LED4 on ");
 80056b2:	484b      	ldr	r0, [pc, #300]	; (80057e0 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 80056b4:	f7fb fc88 	bl	8000fc8 <print>
 80056b8:	e006      	b.n	80056c8 <HAL_TIM_PeriodElapsedCallback+0x544>
    		} else {
    			print("4-LED4 off");
 80056ba:	484a      	ldr	r0, [pc, #296]	; (80057e4 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80056bc:	f7fb fc84 	bl	8000fc8 <print>
 80056c0:	e002      	b.n	80056c8 <HAL_TIM_PeriodElapsedCallback+0x544>
    		}
    	} else {
    		sw4 = 0;
 80056c2:	4b38      	ldr	r3, [pc, #224]	; (80057a4 <HAL_TIM_PeriodElapsedCallback+0x620>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 5) {
 80056c8:	4b29      	ldr	r3, [pc, #164]	; (8005770 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b05      	cmp	r3, #5
 80056ce:	f040 8099 	bne.w	8005804 <HAL_TIM_PeriodElapsedCallback+0x680>
    		if (sw5 == 0)  {
 80056d2:	4b45      	ldr	r3, [pc, #276]	; (80057e8 <HAL_TIM_PeriodElapsedCallback+0x664>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d11e      	bne.n	8005718 <HAL_TIM_PeriodElapsedCallback+0x594>
    		    setCursor(0, 0);
 80056da:	2100      	movs	r1, #0
 80056dc:	2000      	movs	r0, #0
 80056de:	f7fb fc2b 	bl	8000f38 <setCursor>
    		    print("                    ");
 80056e2:	4825      	ldr	r0, [pc, #148]	; (8005778 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80056e4:	f7fb fc70 	bl	8000fc8 <print>
    		    setCursor(0, 1);
 80056e8:	2101      	movs	r1, #1
 80056ea:	2000      	movs	r0, #0
 80056ec:	f7fb fc24 	bl	8000f38 <setCursor>
    		    print("                    ");
 80056f0:	4821      	ldr	r0, [pc, #132]	; (8005778 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80056f2:	f7fb fc69 	bl	8000fc8 <print>
    		    setCursor(0, 2);
 80056f6:	2102      	movs	r1, #2
 80056f8:	2000      	movs	r0, #0
 80056fa:	f7fb fc1d 	bl	8000f38 <setCursor>
    		    print("                    ");
 80056fe:	481e      	ldr	r0, [pc, #120]	; (8005778 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8005700:	f7fb fc62 	bl	8000fc8 <print>
    		    setCursor(0, 3);
 8005704:	2103      	movs	r1, #3
 8005706:	2000      	movs	r0, #0
 8005708:	f7fb fc16 	bl	8000f38 <setCursor>
    		    print("                    ");
 800570c:	481a      	ldr	r0, [pc, #104]	; (8005778 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800570e:	f7fb fc5b 	bl	8000fc8 <print>
    		    sw5 = 1;
 8005712:	4b35      	ldr	r3, [pc, #212]	; (80057e8 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]
    		 }

    		setCursor(0, 0);
 8005718:	2100      	movs	r1, #0
 800571a:	2000      	movs	r0, #0
 800571c:	f7fb fc0c 	bl	8000f38 <setCursor>
    		if (isNewScenario == 0) {
 8005720:	4b32      	ldr	r3, [pc, #200]	; (80057ec <HAL_TIM_PeriodElapsedCallback+0x668>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d103      	bne.n	8005730 <HAL_TIM_PeriodElapsedCallback+0x5ac>
    			print("1- new scenario     ");
 8005728:	4831      	ldr	r0, [pc, #196]	; (80057f0 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800572a:	f7fb fc4d 	bl	8000fc8 <print>
 800572e:	e002      	b.n	8005736 <HAL_TIM_PeriodElapsedCallback+0x5b2>
    		} else {
    			print("1- change scenario");
 8005730:	4830      	ldr	r0, [pc, #192]	; (80057f4 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8005732:	f7fb fc49 	bl	8000fc8 <print>
    		}
    		setCursor(0, 1);
 8005736:	2101      	movs	r1, #1
 8005738:	2000      	movs	r0, #0
 800573a:	f7fb fbfd 	bl	8000f38 <setCursor>
    		print("2- enter scenario");
 800573e:	482e      	ldr	r0, [pc, #184]	; (80057f8 <HAL_TIM_PeriodElapsedCallback+0x674>)
 8005740:	f7fb fc42 	bl	8000fc8 <print>
    		setCursor(0, 2);
 8005744:	2102      	movs	r1, #2
 8005746:	2000      	movs	r0, #0
 8005748:	f7fb fbf6 	bl	8000f38 <setCursor>
    		print("3- exit scenario");
 800574c:	482b      	ldr	r0, [pc, #172]	; (80057fc <HAL_TIM_PeriodElapsedCallback+0x678>)
 800574e:	f7fb fc3b 	bl	8000fc8 <print>
    		if (isNewScenario ==  1) {
 8005752:	4b26      	ldr	r3, [pc, #152]	; (80057ec <HAL_TIM_PeriodElapsedCallback+0x668>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d157      	bne.n	800580a <HAL_TIM_PeriodElapsedCallback+0x686>
    			setCursor(0, 3);
 800575a:	2103      	movs	r1, #3
 800575c:	2000      	movs	r0, #0
 800575e:	f7fb fbeb 	bl	8000f38 <setCursor>
    			print("4- new scenario");
 8005762:	4827      	ldr	r0, [pc, #156]	; (8005800 <HAL_TIM_PeriodElapsedCallback+0x67c>)
 8005764:	f7fb fc30 	bl	8000fc8 <print>
 8005768:	e04f      	b.n	800580a <HAL_TIM_PeriodElapsedCallback+0x686>
 800576a:	bf00      	nop
 800576c:	200006a4 	.word	0x200006a4
 8005770:	2000000c 	.word	0x2000000c
 8005774:	200006bc 	.word	0x200006bc
 8005778:	0800e548 	.word	0x0800e548
 800577c:	200006b4 	.word	0x200006b4
 8005780:	0800e658 	.word	0x0800e658
 8005784:	0800e664 	.word	0x0800e664
 8005788:	200006b8 	.word	0x200006b8
 800578c:	0800e5e4 	.word	0x0800e5e4
 8005790:	0800e5f4 	.word	0x0800e5f4
 8005794:	0800e670 	.word	0x0800e670
 8005798:	0800e680 	.word	0x0800e680
 800579c:	0800e690 	.word	0x0800e690
 80057a0:	0800e6a4 	.word	0x0800e6a4
 80057a4:	200006c0 	.word	0x200006c0
 80057a8:	0800e6b8 	.word	0x0800e6b8
 80057ac:	20000714 	.word	0x20000714
 80057b0:	0800e6c0 	.word	0x0800e6c0
 80057b4:	20000718 	.word	0x20000718
 80057b8:	0800e6cc 	.word	0x0800e6cc
 80057bc:	2000071c 	.word	0x2000071c
 80057c0:	0800e6d4 	.word	0x0800e6d4
 80057c4:	20000720 	.word	0x20000720
 80057c8:	0800e6e0 	.word	0x0800e6e0
 80057cc:	0800e6ec 	.word	0x0800e6ec
 80057d0:	0800e6f8 	.word	0x0800e6f8
 80057d4:	0800e704 	.word	0x0800e704
 80057d8:	0800e710 	.word	0x0800e710
 80057dc:	0800e71c 	.word	0x0800e71c
 80057e0:	0800e728 	.word	0x0800e728
 80057e4:	0800e734 	.word	0x0800e734
 80057e8:	20000724 	.word	0x20000724
 80057ec:	20000770 	.word	0x20000770
 80057f0:	0800e740 	.word	0x0800e740
 80057f4:	0800e758 	.word	0x0800e758
 80057f8:	0800e76c 	.word	0x0800e76c
 80057fc:	0800e780 	.word	0x0800e780
 8005800:	0800e794 	.word	0x0800e794
    		}
    	} else {
    		sw5 = 0;
 8005804:	4b79      	ldr	r3, [pc, #484]	; (80059ec <HAL_TIM_PeriodElapsedCallback+0x868>)
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 6) {
 800580a:	4b79      	ldr	r3, [pc, #484]	; (80059f0 <HAL_TIM_PeriodElapsedCallback+0x86c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b06      	cmp	r3, #6
 8005810:	d14c      	bne.n	80058ac <HAL_TIM_PeriodElapsedCallback+0x728>
    		if (sw6 == 0)  {
 8005812:	4b78      	ldr	r3, [pc, #480]	; (80059f4 <HAL_TIM_PeriodElapsedCallback+0x870>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d122      	bne.n	8005860 <HAL_TIM_PeriodElapsedCallback+0x6dc>
    			Change_Melody(pink_panther, ARRAY_LENGTH(pink_panther));
 800581a:	2159      	movs	r1, #89	; 0x59
 800581c:	4876      	ldr	r0, [pc, #472]	; (80059f8 <HAL_TIM_PeriodElapsedCallback+0x874>)
 800581e:	f7fb fdcf 	bl	80013c0 <Change_Melody>
    		    setCursor(0, 0);
 8005822:	2100      	movs	r1, #0
 8005824:	2000      	movs	r0, #0
 8005826:	f7fb fb87 	bl	8000f38 <setCursor>
    		    print("                    ");
 800582a:	4874      	ldr	r0, [pc, #464]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 800582c:	f7fb fbcc 	bl	8000fc8 <print>
    		    setCursor(0, 1);
 8005830:	2101      	movs	r1, #1
 8005832:	2000      	movs	r0, #0
 8005834:	f7fb fb80 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005838:	4870      	ldr	r0, [pc, #448]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 800583a:	f7fb fbc5 	bl	8000fc8 <print>
    		    setCursor(0, 2);
 800583e:	2102      	movs	r1, #2
 8005840:	2000      	movs	r0, #0
 8005842:	f7fb fb79 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005846:	486d      	ldr	r0, [pc, #436]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 8005848:	f7fb fbbe 	bl	8000fc8 <print>
    		    setCursor(0, 3);
 800584c:	2103      	movs	r1, #3
 800584e:	2000      	movs	r0, #0
 8005850:	f7fb fb72 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005854:	4869      	ldr	r0, [pc, #420]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 8005856:	f7fb fbb7 	bl	8000fc8 <print>
    		    sw6 = 1;
 800585a:	4b66      	ldr	r3, [pc, #408]	; (80059f4 <HAL_TIM_PeriodElapsedCallback+0x870>)
 800585c:	2201      	movs	r2, #1
 800585e:	601a      	str	r2, [r3, #0]
    		 }
    		setCursor(0, 0);
 8005860:	2100      	movs	r1, #0
 8005862:	2000      	movs	r0, #0
 8005864:	f7fb fb68 	bl	8000f38 <setCursor>
    		sprintf(str, "      bye %s", byeTemp);
 8005868:	4a65      	ldr	r2, [pc, #404]	; (8005a00 <HAL_TIM_PeriodElapsedCallback+0x87c>)
 800586a:	4966      	ldr	r1, [pc, #408]	; (8005a04 <HAL_TIM_PeriodElapsedCallback+0x880>)
 800586c:	4866      	ldr	r0, [pc, #408]	; (8005a08 <HAL_TIM_PeriodElapsedCallback+0x884>)
 800586e:	f008 f81d 	bl	800d8ac <siprintf>
    		print(str);
 8005872:	4865      	ldr	r0, [pc, #404]	; (8005a08 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8005874:	f7fb fba8 	bl	8000fc8 <print>
    		setCursor(0, 1);
 8005878:	2101      	movs	r1, #1
 800587a:	2000      	movs	r0, #0
 800587c:	f7fb fb5c 	bl	8000f38 <setCursor>
    		print("                    ");
 8005880:	485e      	ldr	r0, [pc, #376]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 8005882:	f7fb fba1 	bl	8000fc8 <print>
    		setCursor(0, 2);
 8005886:	2102      	movs	r1, #2
 8005888:	2000      	movs	r0, #0
 800588a:	f7fb fb55 	bl	8000f38 <setCursor>
    		print("                    ");
 800588e:	485b      	ldr	r0, [pc, #364]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 8005890:	f7fb fb9a 	bl	8000fc8 <print>
    		setCursor(0, 3);
 8005894:	2103      	movs	r1, #3
 8005896:	2000      	movs	r0, #0
 8005898:	f7fb fb4e 	bl	8000f38 <setCursor>
    		print("                    ");
 800589c:	4857      	ldr	r0, [pc, #348]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 800589e:	f7fb fb93 	bl	8000fc8 <print>
    		menuState = -1;
 80058a2:	4b53      	ldr	r3, [pc, #332]	; (80059f0 <HAL_TIM_PeriodElapsedCallback+0x86c>)
 80058a4:	f04f 32ff 	mov.w	r2, #4294967295
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	e002      	b.n	80058b2 <HAL_TIM_PeriodElapsedCallback+0x72e>
    	} else {
    		sw6 = 0;
 80058ac:	4b51      	ldr	r3, [pc, #324]	; (80059f4 <HAL_TIM_PeriodElapsedCallback+0x870>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 7) {
 80058b2:	4b4f      	ldr	r3, [pc, #316]	; (80059f0 <HAL_TIM_PeriodElapsedCallback+0x86c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b07      	cmp	r3, #7
 80058b8:	d14c      	bne.n	8005954 <HAL_TIM_PeriodElapsedCallback+0x7d0>
    		if (sw7 == 0)  {
 80058ba:	4b54      	ldr	r3, [pc, #336]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x888>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d122      	bne.n	8005908 <HAL_TIM_PeriodElapsedCallback+0x784>
    			Change_Melody(pacman, ARRAY_LENGTH(pacman));
 80058c2:	2120      	movs	r1, #32
 80058c4:	4852      	ldr	r0, [pc, #328]	; (8005a10 <HAL_TIM_PeriodElapsedCallback+0x88c>)
 80058c6:	f7fb fd7b 	bl	80013c0 <Change_Melody>
    		    setCursor(0, 0);
 80058ca:	2100      	movs	r1, #0
 80058cc:	2000      	movs	r0, #0
 80058ce:	f7fb fb33 	bl	8000f38 <setCursor>
    		    print("                    ");
 80058d2:	484a      	ldr	r0, [pc, #296]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 80058d4:	f7fb fb78 	bl	8000fc8 <print>
    		    setCursor(0, 1);
 80058d8:	2101      	movs	r1, #1
 80058da:	2000      	movs	r0, #0
 80058dc:	f7fb fb2c 	bl	8000f38 <setCursor>
    		    print("                    ");
 80058e0:	4846      	ldr	r0, [pc, #280]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 80058e2:	f7fb fb71 	bl	8000fc8 <print>
    		    setCursor(0, 2);
 80058e6:	2102      	movs	r1, #2
 80058e8:	2000      	movs	r0, #0
 80058ea:	f7fb fb25 	bl	8000f38 <setCursor>
    		    print("                    ");
 80058ee:	4843      	ldr	r0, [pc, #268]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 80058f0:	f7fb fb6a 	bl	8000fc8 <print>
    		    setCursor(0, 3);
 80058f4:	2103      	movs	r1, #3
 80058f6:	2000      	movs	r0, #0
 80058f8:	f7fb fb1e 	bl	8000f38 <setCursor>
    		    print("                    ");
 80058fc:	483f      	ldr	r0, [pc, #252]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 80058fe:	f7fb fb63 	bl	8000fc8 <print>
    		    sw7 = 1;
 8005902:	4b42      	ldr	r3, [pc, #264]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x888>)
 8005904:	2201      	movs	r2, #1
 8005906:	601a      	str	r2, [r3, #0]
    		 }
    		setCursor(0, 0);
 8005908:	2100      	movs	r1, #0
 800590a:	2000      	movs	r0, #0
 800590c:	f7fb fb14 	bl	8000f38 <setCursor>
    		sprintf(str, "      hi %s", hiTemp);
 8005910:	4a40      	ldr	r2, [pc, #256]	; (8005a14 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8005912:	4941      	ldr	r1, [pc, #260]	; (8005a18 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8005914:	483c      	ldr	r0, [pc, #240]	; (8005a08 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8005916:	f007 ffc9 	bl	800d8ac <siprintf>
    		print(str);
 800591a:	483b      	ldr	r0, [pc, #236]	; (8005a08 <HAL_TIM_PeriodElapsedCallback+0x884>)
 800591c:	f7fb fb54 	bl	8000fc8 <print>
    		setCursor(0, 1);
 8005920:	2101      	movs	r1, #1
 8005922:	2000      	movs	r0, #0
 8005924:	f7fb fb08 	bl	8000f38 <setCursor>
//    		sprintf(str, "      hi %s", hiTemp);
//    		print(str);
    		print("                    ");
 8005928:	4834      	ldr	r0, [pc, #208]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 800592a:	f7fb fb4d 	bl	8000fc8 <print>
    		setCursor(0, 2);
 800592e:	2102      	movs	r1, #2
 8005930:	2000      	movs	r0, #0
 8005932:	f7fb fb01 	bl	8000f38 <setCursor>
    		print("                    ");
 8005936:	4831      	ldr	r0, [pc, #196]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 8005938:	f7fb fb46 	bl	8000fc8 <print>
    		setCursor(0, 3);
 800593c:	2103      	movs	r1, #3
 800593e:	2000      	movs	r0, #0
 8005940:	f7fb fafa 	bl	8000f38 <setCursor>
    		print("                    ");
 8005944:	482d      	ldr	r0, [pc, #180]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 8005946:	f7fb fb3f 	bl	8000fc8 <print>
    		menuState = currentState;
 800594a:	4b34      	ldr	r3, [pc, #208]	; (8005a1c <HAL_TIM_PeriodElapsedCallback+0x898>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a28      	ldr	r2, [pc, #160]	; (80059f0 <HAL_TIM_PeriodElapsedCallback+0x86c>)
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	e002      	b.n	800595a <HAL_TIM_PeriodElapsedCallback+0x7d6>
    	} else {
    		sw7 = 0;
 8005954:	4b2d      	ldr	r3, [pc, #180]	; (8005a0c <HAL_TIM_PeriodElapsedCallback+0x888>)
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 8) {
 800595a:	4b25      	ldr	r3, [pc, #148]	; (80059f0 <HAL_TIM_PeriodElapsedCallback+0x86c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b08      	cmp	r3, #8
 8005960:	d16a      	bne.n	8005a38 <HAL_TIM_PeriodElapsedCallback+0x8b4>
    		if (sw9 == 0)  {
 8005962:	4b2f      	ldr	r3, [pc, #188]	; (8005a20 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d11e      	bne.n	80059a8 <HAL_TIM_PeriodElapsedCallback+0x824>
    		    setCursor(0, 0);
 800596a:	2100      	movs	r1, #0
 800596c:	2000      	movs	r0, #0
 800596e:	f7fb fae3 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005972:	4822      	ldr	r0, [pc, #136]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 8005974:	f7fb fb28 	bl	8000fc8 <print>
    		    setCursor(0, 1);
 8005978:	2101      	movs	r1, #1
 800597a:	2000      	movs	r0, #0
 800597c:	f7fb fadc 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005980:	481e      	ldr	r0, [pc, #120]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 8005982:	f7fb fb21 	bl	8000fc8 <print>
    		    setCursor(0, 2);
 8005986:	2102      	movs	r1, #2
 8005988:	2000      	movs	r0, #0
 800598a:	f7fb fad5 	bl	8000f38 <setCursor>
    		    print("                    ");
 800598e:	481b      	ldr	r0, [pc, #108]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 8005990:	f7fb fb1a 	bl	8000fc8 <print>
    		    setCursor(0, 3);
 8005994:	2103      	movs	r1, #3
 8005996:	2000      	movs	r0, #0
 8005998:	f7fb face 	bl	8000f38 <setCursor>
    		    print("                    ");
 800599c:	4817      	ldr	r0, [pc, #92]	; (80059fc <HAL_TIM_PeriodElapsedCallback+0x878>)
 800599e:	f7fb fb13 	bl	8000fc8 <print>
    		    sw9 = 1;
 80059a2:	4b1f      	ldr	r3, [pc, #124]	; (8005a20 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	601a      	str	r2, [r3, #0]
    		 }
    		setCursor(0, 0);
 80059a8:	2100      	movs	r1, #0
 80059aa:	2000      	movs	r0, #0
 80059ac:	f7fb fac4 	bl	8000f38 <setCursor>
    		if (sleepIsOn == 0) {
 80059b0:	4b1c      	ldr	r3, [pc, #112]	; (8005a24 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d103      	bne.n	80059c0 <HAL_TIM_PeriodElapsedCallback+0x83c>
    			print("sleep = on ");
 80059b8:	481b      	ldr	r0, [pc, #108]	; (8005a28 <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 80059ba:	f7fb fb05 	bl	8000fc8 <print>
 80059be:	e002      	b.n	80059c6 <HAL_TIM_PeriodElapsedCallback+0x842>
    		} else {
    			print("sleep = off");
 80059c0:	481a      	ldr	r0, [pc, #104]	; (8005a2c <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 80059c2:	f7fb fb01 	bl	8000fc8 <print>
    		}
    		write(4);
 80059c6:	2004      	movs	r0, #4
 80059c8:	f7fb fb60 	bl	800108c <write>
    		setCursor(0, 1);
 80059cc:	2101      	movs	r1, #1
 80059ce:	2000      	movs	r0, #0
 80059d0:	f7fb fab2 	bl	8000f38 <setCursor>
    		if (sleepIsOn == 0) {
 80059d4:	4b13      	ldr	r3, [pc, #76]	; (8005a24 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d103      	bne.n	80059e4 <HAL_TIM_PeriodElapsedCallback+0x860>
    			print("1- set sleep off");
 80059dc:	4814      	ldr	r0, [pc, #80]	; (8005a30 <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 80059de:	f7fb faf3 	bl	8000fc8 <print>
 80059e2:	e02c      	b.n	8005a3e <HAL_TIM_PeriodElapsedCallback+0x8ba>
    		} else {
    			print("1- set sleep on ");
 80059e4:	4813      	ldr	r0, [pc, #76]	; (8005a34 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 80059e6:	f7fb faef 	bl	8000fc8 <print>
 80059ea:	e028      	b.n	8005a3e <HAL_TIM_PeriodElapsedCallback+0x8ba>
 80059ec:	20000724 	.word	0x20000724
 80059f0:	2000000c 	.word	0x2000000c
 80059f4:	20000734 	.word	0x20000734
 80059f8:	0800ea8c 	.word	0x0800ea8c
 80059fc:	0800e548 	.word	0x0800e548
 8005a00:	20000028 	.word	0x20000028
 8005a04:	0800e7a4 	.word	0x0800e7a4
 8005a08:	200006c4 	.word	0x200006c4
 8005a0c:	20000738 	.word	0x20000738
 8005a10:	0800ea0c 	.word	0x0800ea0c
 8005a14:	20000014 	.word	0x20000014
 8005a18:	0800e7b4 	.word	0x0800e7b4
 8005a1c:	2000073c 	.word	0x2000073c
 8005a20:	20000750 	.word	0x20000750
 8005a24:	2000074c 	.word	0x2000074c
 8005a28:	0800e7c0 	.word	0x0800e7c0
 8005a2c:	0800e7cc 	.word	0x0800e7cc
 8005a30:	0800e7d8 	.word	0x0800e7d8
 8005a34:	0800e7ec 	.word	0x0800e7ec
    		}
    	} else {
    		sw9 = 0;
 8005a38:	4bac      	ldr	r3, [pc, #688]	; (8005cec <HAL_TIM_PeriodElapsedCallback+0xb68>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 9) {
 8005a3e:	4bac      	ldr	r3, [pc, #688]	; (8005cf0 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b09      	cmp	r3, #9
 8005a44:	d11e      	bne.n	8005a84 <HAL_TIM_PeriodElapsedCallback+0x900>
    		setCursor(0, 0);
 8005a46:	2100      	movs	r1, #0
 8005a48:	2000      	movs	r0, #0
 8005a4a:	f7fb fa75 	bl	8000f38 <setCursor>
    		print("  runing enter sen  ");
 8005a4e:	48a9      	ldr	r0, [pc, #676]	; (8005cf4 <HAL_TIM_PeriodElapsedCallback+0xb70>)
 8005a50:	f7fb faba 	bl	8000fc8 <print>
		    setCursor(0, 1);
 8005a54:	2101      	movs	r1, #1
 8005a56:	2000      	movs	r0, #0
 8005a58:	f7fb fa6e 	bl	8000f38 <setCursor>
		    print("                    ");
 8005a5c:	48a6      	ldr	r0, [pc, #664]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005a5e:	f7fb fab3 	bl	8000fc8 <print>
		    setCursor(0, 2);
 8005a62:	2102      	movs	r1, #2
 8005a64:	2000      	movs	r0, #0
 8005a66:	f7fb fa67 	bl	8000f38 <setCursor>
		    print("                    ");
 8005a6a:	48a3      	ldr	r0, [pc, #652]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005a6c:	f7fb faac 	bl	8000fc8 <print>
		    setCursor(0, 3);
 8005a70:	2103      	movs	r1, #3
 8005a72:	2000      	movs	r0, #0
 8005a74:	f7fb fa60 	bl	8000f38 <setCursor>
		    print("                    ");
 8005a78:	489f      	ldr	r0, [pc, #636]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005a7a:	f7fb faa5 	bl	8000fc8 <print>
		    menuState = 5;
 8005a7e:	4b9c      	ldr	r3, [pc, #624]	; (8005cf0 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8005a80:	2205      	movs	r2, #5
 8005a82:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 10) {
 8005a84:	4b9a      	ldr	r3, [pc, #616]	; (8005cf0 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b0a      	cmp	r3, #10
 8005a8a:	d11e      	bne.n	8005aca <HAL_TIM_PeriodElapsedCallback+0x946>
    		setCursor(0, 0);
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	2000      	movs	r0, #0
 8005a90:	f7fb fa52 	bl	8000f38 <setCursor>
    		print("  runing exit sen   ");
 8005a94:	4899      	ldr	r0, [pc, #612]	; (8005cfc <HAL_TIM_PeriodElapsedCallback+0xb78>)
 8005a96:	f7fb fa97 	bl	8000fc8 <print>
		    setCursor(0, 1);
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	f7fb fa4b 	bl	8000f38 <setCursor>
		    print("                    ");
 8005aa2:	4895      	ldr	r0, [pc, #596]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005aa4:	f7fb fa90 	bl	8000fc8 <print>
		    setCursor(0, 2);
 8005aa8:	2102      	movs	r1, #2
 8005aaa:	2000      	movs	r0, #0
 8005aac:	f7fb fa44 	bl	8000f38 <setCursor>
		    print("                    ");
 8005ab0:	4891      	ldr	r0, [pc, #580]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005ab2:	f7fb fa89 	bl	8000fc8 <print>
		    setCursor(0, 3);
 8005ab6:	2103      	movs	r1, #3
 8005ab8:	2000      	movs	r0, #0
 8005aba:	f7fb fa3d 	bl	8000f38 <setCursor>
		    print("                    ");
 8005abe:	488e      	ldr	r0, [pc, #568]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005ac0:	f7fb fa82 	bl	8000fc8 <print>
		    menuState = 5;
 8005ac4:	4b8a      	ldr	r3, [pc, #552]	; (8005cf0 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8005ac6:	2205      	movs	r2, #5
 8005ac8:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 11) {
 8005aca:	4b89      	ldr	r3, [pc, #548]	; (8005cf0 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b0b      	cmp	r3, #11
 8005ad0:	d149      	bne.n	8005b66 <HAL_TIM_PeriodElapsedCallback+0x9e2>
    		if (sw10 == 0)  {
 8005ad2:	4b8b      	ldr	r3, [pc, #556]	; (8005d00 <HAL_TIM_PeriodElapsedCallback+0xb7c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d11e      	bne.n	8005b18 <HAL_TIM_PeriodElapsedCallback+0x994>
    		    setCursor(0, 0);
 8005ada:	2100      	movs	r1, #0
 8005adc:	2000      	movs	r0, #0
 8005ade:	f7fb fa2b 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005ae2:	4885      	ldr	r0, [pc, #532]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005ae4:	f7fb fa70 	bl	8000fc8 <print>
    		    setCursor(0, 1);
 8005ae8:	2101      	movs	r1, #1
 8005aea:	2000      	movs	r0, #0
 8005aec:	f7fb fa24 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005af0:	4881      	ldr	r0, [pc, #516]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005af2:	f7fb fa69 	bl	8000fc8 <print>
    		    setCursor(0, 2);
 8005af6:	2102      	movs	r1, #2
 8005af8:	2000      	movs	r0, #0
 8005afa:	f7fb fa1d 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005afe:	487e      	ldr	r0, [pc, #504]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005b00:	f7fb fa62 	bl	8000fc8 <print>
    		    setCursor(0, 3);
 8005b04:	2103      	movs	r1, #3
 8005b06:	2000      	movs	r0, #0
 8005b08:	f7fb fa16 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005b0c:	487a      	ldr	r0, [pc, #488]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005b0e:	f7fb fa5b 	bl	8000fc8 <print>
    		    sw10 = 1;
 8005b12:	4b7b      	ldr	r3, [pc, #492]	; (8005d00 <HAL_TIM_PeriodElapsedCallback+0xb7c>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	601a      	str	r2, [r3, #0]
    		 }
    		setCursor(0, 0);
 8005b18:	2100      	movs	r1, #0
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	f7fb fa0c 	bl	8000f38 <setCursor>
    		sprintf(str, "hi  message: %s", hiTemp);
 8005b20:	4a78      	ldr	r2, [pc, #480]	; (8005d04 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 8005b22:	4979      	ldr	r1, [pc, #484]	; (8005d08 <HAL_TIM_PeriodElapsedCallback+0xb84>)
 8005b24:	4879      	ldr	r0, [pc, #484]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8005b26:	f007 fec1 	bl	800d8ac <siprintf>
    		print(str);
 8005b2a:	4878      	ldr	r0, [pc, #480]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8005b2c:	f7fb fa4c 	bl	8000fc8 <print>
    		setCursor(0, 1);
 8005b30:	2101      	movs	r1, #1
 8005b32:	2000      	movs	r0, #0
 8005b34:	f7fb fa00 	bl	8000f38 <setCursor>
    		sprintf(str, "bye message: %s", byeTemp);
 8005b38:	4a75      	ldr	r2, [pc, #468]	; (8005d10 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8005b3a:	4976      	ldr	r1, [pc, #472]	; (8005d14 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8005b3c:	4873      	ldr	r0, [pc, #460]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8005b3e:	f007 feb5 	bl	800d8ac <siprintf>
    		print(str);
 8005b42:	4872      	ldr	r0, [pc, #456]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8005b44:	f7fb fa40 	bl	8000fc8 <print>
    		setCursor(0, 2);
 8005b48:	2102      	movs	r1, #2
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	f7fb f9f4 	bl	8000f38 <setCursor>
    		print("1- set hi message");
 8005b50:	4871      	ldr	r0, [pc, #452]	; (8005d18 <HAL_TIM_PeriodElapsedCallback+0xb94>)
 8005b52:	f7fb fa39 	bl	8000fc8 <print>
    		setCursor(0, 3);
 8005b56:	2103      	movs	r1, #3
 8005b58:	2000      	movs	r0, #0
 8005b5a:	f7fb f9ed 	bl	8000f38 <setCursor>
    		print ("2- set bye message");
 8005b5e:	486f      	ldr	r0, [pc, #444]	; (8005d1c <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8005b60:	f7fb fa32 	bl	8000fc8 <print>
 8005b64:	e002      	b.n	8005b6c <HAL_TIM_PeriodElapsedCallback+0x9e8>
    	} else {
    		sw10 = 0;
 8005b66:	4b66      	ldr	r3, [pc, #408]	; (8005d00 <HAL_TIM_PeriodElapsedCallback+0xb7c>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 12) {
 8005b6c:	4b60      	ldr	r3, [pc, #384]	; (8005cf0 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b0c      	cmp	r3, #12
 8005b72:	d13f      	bne.n	8005bf4 <HAL_TIM_PeriodElapsedCallback+0xa70>
    		if (sw11 == 0)  {
 8005b74:	4b6a      	ldr	r3, [pc, #424]	; (8005d20 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d11e      	bne.n	8005bba <HAL_TIM_PeriodElapsedCallback+0xa36>
    		    setCursor(0, 0);
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	2000      	movs	r0, #0
 8005b80:	f7fb f9da 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005b84:	485c      	ldr	r0, [pc, #368]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005b86:	f7fb fa1f 	bl	8000fc8 <print>
    		    setCursor(0, 1);
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	f7fb f9d3 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005b92:	4859      	ldr	r0, [pc, #356]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005b94:	f7fb fa18 	bl	8000fc8 <print>
    		    setCursor(0, 2);
 8005b98:	2102      	movs	r1, #2
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f7fb f9cc 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005ba0:	4855      	ldr	r0, [pc, #340]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005ba2:	f7fb fa11 	bl	8000fc8 <print>
    		    setCursor(0, 3);
 8005ba6:	2103      	movs	r1, #3
 8005ba8:	2000      	movs	r0, #0
 8005baa:	f7fb f9c5 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005bae:	4852      	ldr	r0, [pc, #328]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005bb0:	f7fb fa0a 	bl	8000fc8 <print>
    		    sw11 = 1;
 8005bb4:	4b5a      	ldr	r3, [pc, #360]	; (8005d20 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]
    		 }
    		setCursor(0, 0);
 8005bba:	2100      	movs	r1, #0
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	f7fb f9bb 	bl	8000f38 <setCursor>
    		sprintf(str, "hi message: %s", hiTemp);
 8005bc2:	4a50      	ldr	r2, [pc, #320]	; (8005d04 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 8005bc4:	4957      	ldr	r1, [pc, #348]	; (8005d24 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8005bc6:	4851      	ldr	r0, [pc, #324]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8005bc8:	f007 fe70 	bl	800d8ac <siprintf>
    		print(str);
 8005bcc:	484f      	ldr	r0, [pc, #316]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8005bce:	f7fb f9fb 	bl	8000fc8 <print>
    		setCursor(0, 1);
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	f7fb f9af 	bl	8000f38 <setCursor>
//    		print("                    ");
    		sprintf(str, "str = %s", substring);
 8005bda:	4a53      	ldr	r2, [pc, #332]	; (8005d28 <HAL_TIM_PeriodElapsedCallback+0xba4>)
 8005bdc:	4953      	ldr	r1, [pc, #332]	; (8005d2c <HAL_TIM_PeriodElapsedCallback+0xba8>)
 8005bde:	484b      	ldr	r0, [pc, #300]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8005be0:	f007 fe64 	bl	800d8ac <siprintf>
    		print(str);
 8005be4:	4849      	ldr	r0, [pc, #292]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8005be6:	f7fb f9ef 	bl	8000fc8 <print>
    		setCursor(0, 2);
 8005bea:	2102      	movs	r1, #2
 8005bec:	2000      	movs	r0, #0
 8005bee:	f7fb f9a3 	bl	8000f38 <setCursor>
 8005bf2:	e002      	b.n	8005bfa <HAL_TIM_PeriodElapsedCallback+0xa76>
//    		print("                    ");
//    		sprintf(str, "str = %s", hiInput);
//    		print(str);
    	} else {
    		sw11 = 0;
 8005bf4:	4b4a      	ldr	r3, [pc, #296]	; (8005d20 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 13) {
 8005bfa:	4b3d      	ldr	r3, [pc, #244]	; (8005cf0 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b0d      	cmp	r3, #13
 8005c00:	d13b      	bne.n	8005c7a <HAL_TIM_PeriodElapsedCallback+0xaf6>

        		if (sw12 == 0)  {
 8005c02:	4b4b      	ldr	r3, [pc, #300]	; (8005d30 <HAL_TIM_PeriodElapsedCallback+0xbac>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d11e      	bne.n	8005c48 <HAL_TIM_PeriodElapsedCallback+0xac4>
        		    setCursor(0, 0);
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	f7fb f993 	bl	8000f38 <setCursor>
        		    print("                    ");
 8005c12:	4839      	ldr	r0, [pc, #228]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005c14:	f7fb f9d8 	bl	8000fc8 <print>
        		    setCursor(0, 1);
 8005c18:	2101      	movs	r1, #1
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	f7fb f98c 	bl	8000f38 <setCursor>
        		    print("                    ");
 8005c20:	4835      	ldr	r0, [pc, #212]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005c22:	f7fb f9d1 	bl	8000fc8 <print>
        		    setCursor(0, 2);
 8005c26:	2102      	movs	r1, #2
 8005c28:	2000      	movs	r0, #0
 8005c2a:	f7fb f985 	bl	8000f38 <setCursor>
        		    print("                    ");
 8005c2e:	4832      	ldr	r0, [pc, #200]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005c30:	f7fb f9ca 	bl	8000fc8 <print>
        		    setCursor(0, 3);
 8005c34:	2103      	movs	r1, #3
 8005c36:	2000      	movs	r0, #0
 8005c38:	f7fb f97e 	bl	8000f38 <setCursor>
        		    print("                    ");
 8005c3c:	482e      	ldr	r0, [pc, #184]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005c3e:	f7fb f9c3 	bl	8000fc8 <print>
        		    sw12 = 1;
 8005c42:	4b3b      	ldr	r3, [pc, #236]	; (8005d30 <HAL_TIM_PeriodElapsedCallback+0xbac>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
        		 }
        		setCursor(0, 0);
 8005c48:	2100      	movs	r1, #0
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	f7fb f974 	bl	8000f38 <setCursor>
        		sprintf(str, "bye message: %s", byeTemp);
 8005c50:	4a2f      	ldr	r2, [pc, #188]	; (8005d10 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8005c52:	4930      	ldr	r1, [pc, #192]	; (8005d14 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8005c54:	482d      	ldr	r0, [pc, #180]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8005c56:	f007 fe29 	bl	800d8ac <siprintf>
        		print(str);
 8005c5a:	482c      	ldr	r0, [pc, #176]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8005c5c:	f7fb f9b4 	bl	8000fc8 <print>
        		setCursor(0, 1);
 8005c60:	2101      	movs	r1, #1
 8005c62:	2000      	movs	r0, #0
 8005c64:	f7fb f968 	bl	8000f38 <setCursor>
    //    		print("                    ");
        		sprintf(str, "str = %s", byeSub);
 8005c68:	4a32      	ldr	r2, [pc, #200]	; (8005d34 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 8005c6a:	4930      	ldr	r1, [pc, #192]	; (8005d2c <HAL_TIM_PeriodElapsedCallback+0xba8>)
 8005c6c:	4827      	ldr	r0, [pc, #156]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8005c6e:	f007 fe1d 	bl	800d8ac <siprintf>
        		print(str);
 8005c72:	4826      	ldr	r0, [pc, #152]	; (8005d0c <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8005c74:	f7fb f9a8 	bl	8000fc8 <print>
 8005c78:	e002      	b.n	8005c80 <HAL_TIM_PeriodElapsedCallback+0xafc>
//        		setCursor(0, 2);
    //    		print("                    ");
    //    		sprintf(str, "str = %s", byeTemp);
    //    		print(str);
    	} else {
    		sw12 = 0;
 8005c7a:	4b2d      	ldr	r3, [pc, #180]	; (8005d30 <HAL_TIM_PeriodElapsedCallback+0xbac>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 14) {
 8005c80:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b0e      	cmp	r3, #14
 8005c86:	d15d      	bne.n	8005d44 <HAL_TIM_PeriodElapsedCallback+0xbc0>
    		if (sw13 == 0) {
 8005c88:	4b2b      	ldr	r3, [pc, #172]	; (8005d38 <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d11e      	bne.n	8005cce <HAL_TIM_PeriodElapsedCallback+0xb4a>
    			setCursor(0, 0);
 8005c90:	2100      	movs	r1, #0
 8005c92:	2000      	movs	r0, #0
 8005c94:	f7fb f950 	bl	8000f38 <setCursor>
    			print("                    ");
 8005c98:	4817      	ldr	r0, [pc, #92]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005c9a:	f7fb f995 	bl	8000fc8 <print>
    			setCursor(0, 1);
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	f7fb f949 	bl	8000f38 <setCursor>
    			print("                    ");
 8005ca6:	4814      	ldr	r0, [pc, #80]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005ca8:	f7fb f98e 	bl	8000fc8 <print>
    			setCursor(0, 2);
 8005cac:	2102      	movs	r1, #2
 8005cae:	2000      	movs	r0, #0
 8005cb0:	f7fb f942 	bl	8000f38 <setCursor>
    			print("                    ");
 8005cb4:	4810      	ldr	r0, [pc, #64]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005cb6:	f7fb f987 	bl	8000fc8 <print>
    			setCursor(0, 3);
 8005cba:	2103      	movs	r1, #3
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	f7fb f93b 	bl	8000f38 <setCursor>
    			print("                    ");
 8005cc2:	480d      	ldr	r0, [pc, #52]	; (8005cf8 <HAL_TIM_PeriodElapsedCallback+0xb74>)
 8005cc4:	f7fb f980 	bl	8000fc8 <print>
    			sw13 = 1;
 8005cc8:	4b1b      	ldr	r3, [pc, #108]	; (8005d38 <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
    		}
    		setCursor(0, 0);
 8005cce:	2100      	movs	r1, #0
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	f7fb f931 	bl	8000f38 <setCursor>
    		print ("1- set sleep on ");
 8005cd6:	4819      	ldr	r0, [pc, #100]	; (8005d3c <HAL_TIM_PeriodElapsedCallback+0xbb8>)
 8005cd8:	f7fb f976 	bl	8000fc8 <print>
    		setCursor(0, 1);
 8005cdc:	2101      	movs	r1, #1
 8005cde:	2000      	movs	r0, #0
 8005ce0:	f7fb f92a 	bl	8000f38 <setCursor>
    		print ("2- set sleep off");
 8005ce4:	4816      	ldr	r0, [pc, #88]	; (8005d40 <HAL_TIM_PeriodElapsedCallback+0xbbc>)
 8005ce6:	f7fb f96f 	bl	8000fc8 <print>
 8005cea:	e02e      	b.n	8005d4a <HAL_TIM_PeriodElapsedCallback+0xbc6>
 8005cec:	20000750 	.word	0x20000750
 8005cf0:	2000000c 	.word	0x2000000c
 8005cf4:	0800e800 	.word	0x0800e800
 8005cf8:	0800e548 	.word	0x0800e548
 8005cfc:	0800e818 	.word	0x0800e818
 8005d00:	20000754 	.word	0x20000754
 8005d04:	20000014 	.word	0x20000014
 8005d08:	0800e830 	.word	0x0800e830
 8005d0c:	200006c4 	.word	0x200006c4
 8005d10:	20000028 	.word	0x20000028
 8005d14:	0800e840 	.word	0x0800e840
 8005d18:	0800e850 	.word	0x0800e850
 8005d1c:	0800e864 	.word	0x0800e864
 8005d20:	20000758 	.word	0x20000758
 8005d24:	0800e878 	.word	0x0800e878
 8005d28:	200006ec 	.word	0x200006ec
 8005d2c:	0800e888 	.word	0x0800e888
 8005d30:	2000075c 	.word	0x2000075c
 8005d34:	20000700 	.word	0x20000700
 8005d38:	20000778 	.word	0x20000778
 8005d3c:	0800e7ec 	.word	0x0800e7ec
 8005d40:	0800e894 	.word	0x0800e894

    	} else {
    		sw13 = 0;
 8005d44:	4bb7      	ldr	r3, [pc, #732]	; (8006024 <HAL_TIM_PeriodElapsedCallback+0xea0>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 15) {
 8005d4a:	4bb7      	ldr	r3, [pc, #732]	; (8006028 <HAL_TIM_PeriodElapsedCallback+0xea4>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b0f      	cmp	r3, #15
 8005d50:	d131      	bne.n	8005db6 <HAL_TIM_PeriodElapsedCallback+0xc32>
    		if (sw14 == 0) {
 8005d52:	4bb6      	ldr	r3, [pc, #728]	; (800602c <HAL_TIM_PeriodElapsedCallback+0xea8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d11e      	bne.n	8005d98 <HAL_TIM_PeriodElapsedCallback+0xc14>
    		    setCursor(0, 0);
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	f7fb f8eb 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005d62:	48b3      	ldr	r0, [pc, #716]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005d64:	f7fb f930 	bl	8000fc8 <print>
    		    setCursor(0, 1);
 8005d68:	2101      	movs	r1, #1
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	f7fb f8e4 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005d70:	48af      	ldr	r0, [pc, #700]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005d72:	f7fb f929 	bl	8000fc8 <print>
    		    setCursor(0, 2);
 8005d76:	2102      	movs	r1, #2
 8005d78:	2000      	movs	r0, #0
 8005d7a:	f7fb f8dd 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005d7e:	48ac      	ldr	r0, [pc, #688]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005d80:	f7fb f922 	bl	8000fc8 <print>
    		    setCursor(0, 3);
 8005d84:	2103      	movs	r1, #3
 8005d86:	2000      	movs	r0, #0
 8005d88:	f7fb f8d6 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005d8c:	48a8      	ldr	r0, [pc, #672]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005d8e:	f7fb f91b 	bl	8000fc8 <print>
    		    sw14 = 1;
 8005d92:	4ba6      	ldr	r3, [pc, #664]	; (800602c <HAL_TIM_PeriodElapsedCallback+0xea8>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
    		}
    		setCursor(0, 0);
 8005d98:	2100      	movs	r1, #0
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	f7fb f8cc 	bl	8000f38 <setCursor>
    		print("1-set pir buz on");
 8005da0:	48a4      	ldr	r0, [pc, #656]	; (8006034 <HAL_TIM_PeriodElapsedCallback+0xeb0>)
 8005da2:	f7fb f911 	bl	8000fc8 <print>
    		setCursor(0, 1);
 8005da6:	2101      	movs	r1, #1
 8005da8:	2000      	movs	r0, #0
 8005daa:	f7fb f8c5 	bl	8000f38 <setCursor>
    		print("2-set pir buz off");
 8005dae:	48a2      	ldr	r0, [pc, #648]	; (8006038 <HAL_TIM_PeriodElapsedCallback+0xeb4>)
 8005db0:	f7fb f90a 	bl	8000fc8 <print>
 8005db4:	e002      	b.n	8005dbc <HAL_TIM_PeriodElapsedCallback+0xc38>

    	} else {
    		sw14 = 0;
 8005db6:	4b9d      	ldr	r3, [pc, #628]	; (800602c <HAL_TIM_PeriodElapsedCallback+0xea8>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 16) {
 8005dbc:	4b9a      	ldr	r3, [pc, #616]	; (8006028 <HAL_TIM_PeriodElapsedCallback+0xea4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b10      	cmp	r3, #16
 8005dc2:	d131      	bne.n	8005e28 <HAL_TIM_PeriodElapsedCallback+0xca4>
    		if (sw15 == 0) {
 8005dc4:	4b9d      	ldr	r3, [pc, #628]	; (800603c <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d11e      	bne.n	8005e0a <HAL_TIM_PeriodElapsedCallback+0xc86>
    			setCursor(0, 0);
 8005dcc:	2100      	movs	r1, #0
 8005dce:	2000      	movs	r0, #0
 8005dd0:	f7fb f8b2 	bl	8000f38 <setCursor>
    			print("                    ");
 8005dd4:	4896      	ldr	r0, [pc, #600]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005dd6:	f7fb f8f7 	bl	8000fc8 <print>
    			setCursor(0, 1);
 8005dda:	2101      	movs	r1, #1
 8005ddc:	2000      	movs	r0, #0
 8005dde:	f7fb f8ab 	bl	8000f38 <setCursor>
    			print("                    ");
 8005de2:	4893      	ldr	r0, [pc, #588]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005de4:	f7fb f8f0 	bl	8000fc8 <print>
    			setCursor(0, 2);
 8005de8:	2102      	movs	r1, #2
 8005dea:	2000      	movs	r0, #0
 8005dec:	f7fb f8a4 	bl	8000f38 <setCursor>
    			print("                    ");
 8005df0:	488f      	ldr	r0, [pc, #572]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005df2:	f7fb f8e9 	bl	8000fc8 <print>
    			setCursor(0, 3);
 8005df6:	2103      	movs	r1, #3
 8005df8:	2000      	movs	r0, #0
 8005dfa:	f7fb f89d 	bl	8000f38 <setCursor>
    			print("                    ");
 8005dfe:	488c      	ldr	r0, [pc, #560]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005e00:	f7fb f8e2 	bl	8000fc8 <print>
    			sw15 = 1;
 8005e04:	4b8d      	ldr	r3, [pc, #564]	; (800603c <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	601a      	str	r2, [r3, #0]
    		}
    		setCursor(0, 0);
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	f7fb f893 	bl	8000f38 <setCursor>
    		print("1-set temp buz on");
 8005e12:	488b      	ldr	r0, [pc, #556]	; (8006040 <HAL_TIM_PeriodElapsedCallback+0xebc>)
 8005e14:	f7fb f8d8 	bl	8000fc8 <print>
    		setCursor(0, 1);
 8005e18:	2101      	movs	r1, #1
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	f7fb f88c 	bl	8000f38 <setCursor>
    		print("2-set temp buz off");
 8005e20:	4888      	ldr	r0, [pc, #544]	; (8006044 <HAL_TIM_PeriodElapsedCallback+0xec0>)
 8005e22:	f7fb f8d1 	bl	8000fc8 <print>
 8005e26:	e002      	b.n	8005e2e <HAL_TIM_PeriodElapsedCallback+0xcaa>
    	} else {
    		sw15 = 1;
 8005e28:	4b84      	ldr	r3, [pc, #528]	; (800603c <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 17) {
 8005e2e:	4b7e      	ldr	r3, [pc, #504]	; (8006028 <HAL_TIM_PeriodElapsedCallback+0xea4>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b11      	cmp	r3, #17
 8005e34:	d131      	bne.n	8005e9a <HAL_TIM_PeriodElapsedCallback+0xd16>
    		if (sw16 == 0) {
 8005e36:	4b84      	ldr	r3, [pc, #528]	; (8006048 <HAL_TIM_PeriodElapsedCallback+0xec4>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d11e      	bne.n	8005e7c <HAL_TIM_PeriodElapsedCallback+0xcf8>
    		    setCursor(0, 0);
 8005e3e:	2100      	movs	r1, #0
 8005e40:	2000      	movs	r0, #0
 8005e42:	f7fb f879 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005e46:	487a      	ldr	r0, [pc, #488]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005e48:	f7fb f8be 	bl	8000fc8 <print>
    		    setCursor(0, 1);
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	2000      	movs	r0, #0
 8005e50:	f7fb f872 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005e54:	4876      	ldr	r0, [pc, #472]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005e56:	f7fb f8b7 	bl	8000fc8 <print>
    		    setCursor(0, 2);
 8005e5a:	2102      	movs	r1, #2
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	f7fb f86b 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005e62:	4873      	ldr	r0, [pc, #460]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005e64:	f7fb f8b0 	bl	8000fc8 <print>
    		    setCursor(0, 3);
 8005e68:	2103      	movs	r1, #3
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	f7fb f864 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005e70:	486f      	ldr	r0, [pc, #444]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005e72:	f7fb f8a9 	bl	8000fc8 <print>
    		    sw16 = 1;
 8005e76:	4b74      	ldr	r3, [pc, #464]	; (8006048 <HAL_TIM_PeriodElapsedCallback+0xec4>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]
    		}
    		setCursor(0, 0);
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	2000      	movs	r0, #0
 8005e80:	f7fb f85a 	bl	8000f38 <setCursor>
    		print("1-set pir on");
 8005e84:	4871      	ldr	r0, [pc, #452]	; (800604c <HAL_TIM_PeriodElapsedCallback+0xec8>)
 8005e86:	f7fb f89f 	bl	8000fc8 <print>
    		setCursor(0, 1);
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	f7fb f853 	bl	8000f38 <setCursor>
    		print("2-set pir off");
 8005e92:	486f      	ldr	r0, [pc, #444]	; (8006050 <HAL_TIM_PeriodElapsedCallback+0xecc>)
 8005e94:	f7fb f898 	bl	8000fc8 <print>
 8005e98:	e002      	b.n	8005ea0 <HAL_TIM_PeriodElapsedCallback+0xd1c>
    	} else {
    		sw16 = 0;
 8005e9a:	4b6b      	ldr	r3, [pc, #428]	; (8006048 <HAL_TIM_PeriodElapsedCallback+0xec4>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 18) {
 8005ea0:	4b61      	ldr	r3, [pc, #388]	; (8006028 <HAL_TIM_PeriodElapsedCallback+0xea4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b12      	cmp	r3, #18
 8005ea6:	d15f      	bne.n	8005f68 <HAL_TIM_PeriodElapsedCallback+0xde4>
    		if (sw17 == 0) {
 8005ea8:	4b6a      	ldr	r3, [pc, #424]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0xed0>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d11e      	bne.n	8005eee <HAL_TIM_PeriodElapsedCallback+0xd6a>
    		    setCursor(0, 0);
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	f7fb f840 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005eb8:	485d      	ldr	r0, [pc, #372]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005eba:	f7fb f885 	bl	8000fc8 <print>
    		    setCursor(0, 1);
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	f7fb f839 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005ec6:	485a      	ldr	r0, [pc, #360]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005ec8:	f7fb f87e 	bl	8000fc8 <print>
    		    setCursor(0, 2);
 8005ecc:	2102      	movs	r1, #2
 8005ece:	2000      	movs	r0, #0
 8005ed0:	f7fb f832 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005ed4:	4856      	ldr	r0, [pc, #344]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005ed6:	f7fb f877 	bl	8000fc8 <print>
    		    setCursor(0, 3);
 8005eda:	2103      	movs	r1, #3
 8005edc:	2000      	movs	r0, #0
 8005ede:	f7fb f82b 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005ee2:	4853      	ldr	r0, [pc, #332]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005ee4:	f7fb f870 	bl	8000fc8 <print>
    		    sw17 = 1;
 8005ee8:	4b5a      	ldr	r3, [pc, #360]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0xed0>)
 8005eea:	2201      	movs	r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
    		}
    		setCursor(0, 0);
 8005eee:	2100      	movs	r1, #0
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	f7fb f821 	bl	8000f38 <setCursor>
    		if (s1.LED1 == 0)  {
 8005ef6:	4b58      	ldr	r3, [pc, #352]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0xed4>)
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d103      	bne.n	8005f06 <HAL_TIM_PeriodElapsedCallback+0xd82>
    			print("1- set LED1 on ");
 8005efe:	4857      	ldr	r0, [pc, #348]	; (800605c <HAL_TIM_PeriodElapsedCallback+0xed8>)
 8005f00:	f7fb f862 	bl	8000fc8 <print>
 8005f04:	e002      	b.n	8005f0c <HAL_TIM_PeriodElapsedCallback+0xd88>
    		} else {
    			print("1- set LED1 off");
 8005f06:	4856      	ldr	r0, [pc, #344]	; (8006060 <HAL_TIM_PeriodElapsedCallback+0xedc>)
 8005f08:	f7fb f85e 	bl	8000fc8 <print>
    		}
    		setCursor(0, 1);
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	2000      	movs	r0, #0
 8005f10:	f7fb f812 	bl	8000f38 <setCursor>
    		if (s1.LED2 == 0) {
 8005f14:	4b50      	ldr	r3, [pc, #320]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0xed4>)
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d103      	bne.n	8005f24 <HAL_TIM_PeriodElapsedCallback+0xda0>
    			print("2- set LED2 on ");
 8005f1c:	4851      	ldr	r0, [pc, #324]	; (8006064 <HAL_TIM_PeriodElapsedCallback+0xee0>)
 8005f1e:	f7fb f853 	bl	8000fc8 <print>
 8005f22:	e002      	b.n	8005f2a <HAL_TIM_PeriodElapsedCallback+0xda6>
    		} else {
    			print("2- set LED2 off");
 8005f24:	4850      	ldr	r0, [pc, #320]	; (8006068 <HAL_TIM_PeriodElapsedCallback+0xee4>)
 8005f26:	f7fb f84f 	bl	8000fc8 <print>
    		}
    		setCursor(0, 2);
 8005f2a:	2102      	movs	r1, #2
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f7fb f803 	bl	8000f38 <setCursor>
    		if (s1.LED3 == 0) {
 8005f32:	4b49      	ldr	r3, [pc, #292]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0xed4>)
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d103      	bne.n	8005f42 <HAL_TIM_PeriodElapsedCallback+0xdbe>
    			print("3- set LED3 on ");
 8005f3a:	484c      	ldr	r0, [pc, #304]	; (800606c <HAL_TIM_PeriodElapsedCallback+0xee8>)
 8005f3c:	f7fb f844 	bl	8000fc8 <print>
 8005f40:	e002      	b.n	8005f48 <HAL_TIM_PeriodElapsedCallback+0xdc4>
    		} else {
    			print("3- set LED3 off");
 8005f42:	484b      	ldr	r0, [pc, #300]	; (8006070 <HAL_TIM_PeriodElapsedCallback+0xeec>)
 8005f44:	f7fb f840 	bl	8000fc8 <print>
    		}
    		setCursor(0, 3);
 8005f48:	2103      	movs	r1, #3
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	f7fa fff4 	bl	8000f38 <setCursor>
    		if (s1.LED4 == 0) {
 8005f50:	4b41      	ldr	r3, [pc, #260]	; (8006058 <HAL_TIM_PeriodElapsedCallback+0xed4>)
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d103      	bne.n	8005f60 <HAL_TIM_PeriodElapsedCallback+0xddc>
    			print("4- set LED4 on ");
 8005f58:	4846      	ldr	r0, [pc, #280]	; (8006074 <HAL_TIM_PeriodElapsedCallback+0xef0>)
 8005f5a:	f7fb f835 	bl	8000fc8 <print>
 8005f5e:	e006      	b.n	8005f6e <HAL_TIM_PeriodElapsedCallback+0xdea>
    		} else {
    			print("4- set LED4 off");
 8005f60:	4845      	ldr	r0, [pc, #276]	; (8006078 <HAL_TIM_PeriodElapsedCallback+0xef4>)
 8005f62:	f7fb f831 	bl	8000fc8 <print>
 8005f66:	e002      	b.n	8005f6e <HAL_TIM_PeriodElapsedCallback+0xdea>
    		}
    	} else {
    		sw17 = 1;
 8005f68:	4b3a      	ldr	r3, [pc, #232]	; (8006054 <HAL_TIM_PeriodElapsedCallback+0xed0>)
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 19) {
 8005f6e:	4b2e      	ldr	r3, [pc, #184]	; (8006028 <HAL_TIM_PeriodElapsedCallback+0xea4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b13      	cmp	r3, #19
 8005f74:	d11e      	bne.n	8005fb4 <HAL_TIM_PeriodElapsedCallback+0xe30>
    		setCursor(0, 0);
 8005f76:	2100      	movs	r1, #0
 8005f78:	2000      	movs	r0, #0
 8005f7a:	f7fa ffdd 	bl	8000f38 <setCursor>
    		print("  runing new sen   ");
 8005f7e:	483f      	ldr	r0, [pc, #252]	; (800607c <HAL_TIM_PeriodElapsedCallback+0xef8>)
 8005f80:	f7fb f822 	bl	8000fc8 <print>
    		setCursor(0, 1);
 8005f84:	2101      	movs	r1, #1
 8005f86:	2000      	movs	r0, #0
 8005f88:	f7fa ffd6 	bl	8000f38 <setCursor>
    		print("                    ");
 8005f8c:	4828      	ldr	r0, [pc, #160]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005f8e:	f7fb f81b 	bl	8000fc8 <print>
    		setCursor(0, 2);
 8005f92:	2102      	movs	r1, #2
 8005f94:	2000      	movs	r0, #0
 8005f96:	f7fa ffcf 	bl	8000f38 <setCursor>
    		print("                    ");
 8005f9a:	4825      	ldr	r0, [pc, #148]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005f9c:	f7fb f814 	bl	8000fc8 <print>
    		setCursor(0, 3);
 8005fa0:	2103      	movs	r1, #3
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	f7fa ffc8 	bl	8000f38 <setCursor>
    		print("                    ");
 8005fa8:	4821      	ldr	r0, [pc, #132]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005faa:	f7fb f80d 	bl	8000fc8 <print>
    		menuState = 5;
 8005fae:	4b1e      	ldr	r3, [pc, #120]	; (8006028 <HAL_TIM_PeriodElapsedCallback+0xea4>)
 8005fb0:	2205      	movs	r2, #5
 8005fb2:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == 20) {
 8005fb4:	4b1c      	ldr	r3, [pc, #112]	; (8006028 <HAL_TIM_PeriodElapsedCallback+0xea4>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b14      	cmp	r3, #20
 8005fba:	d16b      	bne.n	8006094 <HAL_TIM_PeriodElapsedCallback+0xf10>
    		if (sw18 == 0) {
 8005fbc:	4b30      	ldr	r3, [pc, #192]	; (8006080 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d11e      	bne.n	8006002 <HAL_TIM_PeriodElapsedCallback+0xe7e>
    		    setCursor(0, 0);
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	f7fa ffb6 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005fcc:	4818      	ldr	r0, [pc, #96]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005fce:	f7fa fffb 	bl	8000fc8 <print>
    		    setCursor(0, 1);
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	f7fa ffaf 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005fda:	4815      	ldr	r0, [pc, #84]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005fdc:	f7fa fff4 	bl	8000fc8 <print>
    		    setCursor(0, 2);
 8005fe0:	2102      	movs	r1, #2
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	f7fa ffa8 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005fe8:	4811      	ldr	r0, [pc, #68]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005fea:	f7fa ffed 	bl	8000fc8 <print>
    		    setCursor(0, 3);
 8005fee:	2103      	movs	r1, #3
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	f7fa ffa1 	bl	8000f38 <setCursor>
    		    print("                    ");
 8005ff6:	480e      	ldr	r0, [pc, #56]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8005ff8:	f7fa ffe6 	bl	8000fc8 <print>
    		    sw18 = 1;
 8005ffc:	4b20      	ldr	r3, [pc, #128]	; (8006080 <HAL_TIM_PeriodElapsedCallback+0xefc>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	601a      	str	r2, [r3, #0]
    		}
    		setCursor(0, 0);
 8006002:	2100      	movs	r1, #0
 8006004:	2000      	movs	r0, #0
 8006006:	f7fa ff97 	bl	8000f38 <setCursor>
    		sprintf(str, "tempTresh = %d%d", tens, ones);
 800600a:	4b1e      	ldr	r3, [pc, #120]	; (8006084 <HAL_TIM_PeriodElapsedCallback+0xf00>)
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b1e      	ldr	r3, [pc, #120]	; (8006088 <HAL_TIM_PeriodElapsedCallback+0xf04>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	491e      	ldr	r1, [pc, #120]	; (800608c <HAL_TIM_PeriodElapsedCallback+0xf08>)
 8006014:	481e      	ldr	r0, [pc, #120]	; (8006090 <HAL_TIM_PeriodElapsedCallback+0xf0c>)
 8006016:	f007 fc49 	bl	800d8ac <siprintf>
    		print(str);
 800601a:	481d      	ldr	r0, [pc, #116]	; (8006090 <HAL_TIM_PeriodElapsedCallback+0xf0c>)
 800601c:	f7fa ffd4 	bl	8000fc8 <print>
 8006020:	e03b      	b.n	800609a <HAL_TIM_PeriodElapsedCallback+0xf16>
 8006022:	bf00      	nop
 8006024:	20000778 	.word	0x20000778
 8006028:	2000000c 	.word	0x2000000c
 800602c:	20000774 	.word	0x20000774
 8006030:	0800e548 	.word	0x0800e548
 8006034:	0800e8a8 	.word	0x0800e8a8
 8006038:	0800e8bc 	.word	0x0800e8bc
 800603c:	2000077c 	.word	0x2000077c
 8006040:	0800e8d0 	.word	0x0800e8d0
 8006044:	0800e8e4 	.word	0x0800e8e4
 8006048:	20000780 	.word	0x20000780
 800604c:	0800e8f8 	.word	0x0800e8f8
 8006050:	0800e908 	.word	0x0800e908
 8006054:	20000788 	.word	0x20000788
 8006058:	200007a4 	.word	0x200007a4
 800605c:	0800e918 	.word	0x0800e918
 8006060:	0800e928 	.word	0x0800e928
 8006064:	0800e938 	.word	0x0800e938
 8006068:	0800e948 	.word	0x0800e948
 800606c:	0800e958 	.word	0x0800e958
 8006070:	0800e968 	.word	0x0800e968
 8006074:	0800e978 	.word	0x0800e978
 8006078:	0800e988 	.word	0x0800e988
 800607c:	0800e998 	.word	0x0800e998
 8006080:	20000784 	.word	0x20000784
 8006084:	2000069c 	.word	0x2000069c
 8006088:	20000698 	.word	0x20000698
 800608c:	0800e9ac 	.word	0x0800e9ac
 8006090:	200006c4 	.word	0x200006c4
    	} else {
    		sw18 = 0;
 8006094:	4b8e      	ldr	r3, [pc, #568]	; (80062d0 <HAL_TIM_PeriodElapsedCallback+0x114c>)
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == -2) {
 800609a:	4b8e      	ldr	r3, [pc, #568]	; (80062d4 <HAL_TIM_PeriodElapsedCallback+0x1150>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f113 0f02 	cmn.w	r3, #2
 80060a2:	d163      	bne.n	800616c <HAL_TIM_PeriodElapsedCallback+0xfe8>
    		if (sw_2 == 0)  {
 80060a4:	4b8c      	ldr	r3, [pc, #560]	; (80062d8 <HAL_TIM_PeriodElapsedCallback+0x1154>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d121      	bne.n	80060f0 <HAL_TIM_PeriodElapsedCallback+0xf6c>

    			count = 0;
 80060ac:	4b8b      	ldr	r3, [pc, #556]	; (80062dc <HAL_TIM_PeriodElapsedCallback+0x1158>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	601a      	str	r2, [r3, #0]
    		    setCursor(0, 0);
 80060b2:	2100      	movs	r1, #0
 80060b4:	2000      	movs	r0, #0
 80060b6:	f7fa ff3f 	bl	8000f38 <setCursor>
    		    print("                    ");
 80060ba:	4889      	ldr	r0, [pc, #548]	; (80062e0 <HAL_TIM_PeriodElapsedCallback+0x115c>)
 80060bc:	f7fa ff84 	bl	8000fc8 <print>
    		    setCursor(0, 1);
 80060c0:	2101      	movs	r1, #1
 80060c2:	2000      	movs	r0, #0
 80060c4:	f7fa ff38 	bl	8000f38 <setCursor>
    		    print("                    ");
 80060c8:	4885      	ldr	r0, [pc, #532]	; (80062e0 <HAL_TIM_PeriodElapsedCallback+0x115c>)
 80060ca:	f7fa ff7d 	bl	8000fc8 <print>
    		    setCursor(0, 2);
 80060ce:	2102      	movs	r1, #2
 80060d0:	2000      	movs	r0, #0
 80060d2:	f7fa ff31 	bl	8000f38 <setCursor>
    		    print("                    ");
 80060d6:	4882      	ldr	r0, [pc, #520]	; (80062e0 <HAL_TIM_PeriodElapsedCallback+0x115c>)
 80060d8:	f7fa ff76 	bl	8000fc8 <print>
    		    setCursor(0, 3);
 80060dc:	2103      	movs	r1, #3
 80060de:	2000      	movs	r0, #0
 80060e0:	f7fa ff2a 	bl	8000f38 <setCursor>
    		    print("                    ");
 80060e4:	487e      	ldr	r0, [pc, #504]	; (80062e0 <HAL_TIM_PeriodElapsedCallback+0x115c>)
 80060e6:	f7fa ff6f 	bl	8000fc8 <print>
    		    sw_2 = 1;
 80060ea:	4b7b      	ldr	r3, [pc, #492]	; (80062d8 <HAL_TIM_PeriodElapsedCallback+0x1154>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	601a      	str	r2, [r3, #0]
    		}
    		if (buzzerForTemp == 0) {
 80060f0:	4b7c      	ldr	r3, [pc, #496]	; (80062e4 <HAL_TIM_PeriodElapsedCallback+0x1160>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d106      	bne.n	8006106 <HAL_TIM_PeriodElapsedCallback+0xf82>
    		    buzzerChangeTone(v, 100);
 80060f8:	4b7b      	ldr	r3, [pc, #492]	; (80062e8 <HAL_TIM_PeriodElapsedCallback+0x1164>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2164      	movs	r1, #100	; 0x64
 8006100:	4618      	mov	r0, r3
 8006102:	f7fe ff39 	bl	8004f78 <buzzerChangeTone>
    		}
    		if (buzzerForTemp == 0) {
 8006106:	4b77      	ldr	r3, [pc, #476]	; (80062e4 <HAL_TIM_PeriodElapsedCallback+0x1160>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <HAL_TIM_PeriodElapsedCallback+0xf92>
    			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 800610e:	2104      	movs	r1, #4
 8006110:	4876      	ldr	r0, [pc, #472]	; (80062ec <HAL_TIM_PeriodElapsedCallback+0x1168>)
 8006112:	f002 ffa5 	bl	8009060 <HAL_GPIO_TogglePin>
    		}
    		setCursor(0, 0);
 8006116:	2100      	movs	r1, #0
 8006118:	2000      	movs	r0, #0
 800611a:	f7fa ff0d 	bl	8000f38 <setCursor>
    		print("temperature is high");
 800611e:	4874      	ldr	r0, [pc, #464]	; (80062f0 <HAL_TIM_PeriodElapsedCallback+0x116c>)
 8006120:	f7fa ff52 	bl	8000fc8 <print>
    		setCursor(0, 1);
 8006124:	2101      	movs	r1, #1
 8006126:	2000      	movs	r0, #0
 8006128:	f7fa ff06 	bl	8000f38 <setCursor>
    		sprintf(str , "Thresh=%d temp= %d", tempTresh, temp);
 800612c:	4b71      	ldr	r3, [pc, #452]	; (80062f4 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	4b71      	ldr	r3, [pc, #452]	; (80062f8 <HAL_TIM_PeriodElapsedCallback+0x1174>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4971      	ldr	r1, [pc, #452]	; (80062fc <HAL_TIM_PeriodElapsedCallback+0x1178>)
 8006136:	4872      	ldr	r0, [pc, #456]	; (8006300 <HAL_TIM_PeriodElapsedCallback+0x117c>)
 8006138:	f007 fbb8 	bl	800d8ac <siprintf>
    		print(str);
 800613c:	4870      	ldr	r0, [pc, #448]	; (8006300 <HAL_TIM_PeriodElapsedCallback+0x117c>)
 800613e:	f7fa ff43 	bl	8000fc8 <print>
    		write(2);
 8006142:	2002      	movs	r0, #2
 8006144:	f7fa ffa2 	bl	800108c <write>
    		write(3);
 8006148:	2003      	movs	r0, #3
 800614a:	f7fa ff9f 	bl	800108c <write>
    		setCursor(0, 2);
 800614e:	2102      	movs	r1, #2
 8006150:	2000      	movs	r0, #0
 8006152:	f7fa fef1 	bl	8000f38 <setCursor>
    		sprintf(str , "count = %d", count);
 8006156:	4b61      	ldr	r3, [pc, #388]	; (80062dc <HAL_TIM_PeriodElapsedCallback+0x1158>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	4969      	ldr	r1, [pc, #420]	; (8006304 <HAL_TIM_PeriodElapsedCallback+0x1180>)
 800615e:	4868      	ldr	r0, [pc, #416]	; (8006300 <HAL_TIM_PeriodElapsedCallback+0x117c>)
 8006160:	f007 fba4 	bl	800d8ac <siprintf>
    		print(str);
 8006164:	4866      	ldr	r0, [pc, #408]	; (8006300 <HAL_TIM_PeriodElapsedCallback+0x117c>)
 8006166:	f7fa ff2f 	bl	8000fc8 <print>
 800616a:	e002      	b.n	8006172 <HAL_TIM_PeriodElapsedCallback+0xfee>


    	} else {
    		sw_2 = 0;
 800616c:	4b5a      	ldr	r3, [pc, #360]	; (80062d8 <HAL_TIM_PeriodElapsedCallback+0x1154>)
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
    	}

    	if (menuState == -3) {
 8006172:	4b58      	ldr	r3, [pc, #352]	; (80062d4 <HAL_TIM_PeriodElapsedCallback+0x1150>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f113 0f03 	cmn.w	r3, #3
 800617a:	d155      	bne.n	8006228 <HAL_TIM_PeriodElapsedCallback+0x10a4>
    		if (sw_3 == 0) {
 800617c:	4b62      	ldr	r3, [pc, #392]	; (8006308 <HAL_TIM_PeriodElapsedCallback+0x1184>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d121      	bne.n	80061c8 <HAL_TIM_PeriodElapsedCallback+0x1044>

    			count = 0;
 8006184:	4b55      	ldr	r3, [pc, #340]	; (80062dc <HAL_TIM_PeriodElapsedCallback+0x1158>)
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]
    		    setCursor(0, 0);
 800618a:	2100      	movs	r1, #0
 800618c:	2000      	movs	r0, #0
 800618e:	f7fa fed3 	bl	8000f38 <setCursor>
    		    print("                    ");
 8006192:	4853      	ldr	r0, [pc, #332]	; (80062e0 <HAL_TIM_PeriodElapsedCallback+0x115c>)
 8006194:	f7fa ff18 	bl	8000fc8 <print>
    		    setCursor(0, 1);
 8006198:	2101      	movs	r1, #1
 800619a:	2000      	movs	r0, #0
 800619c:	f7fa fecc 	bl	8000f38 <setCursor>
    		    print("                    ");
 80061a0:	484f      	ldr	r0, [pc, #316]	; (80062e0 <HAL_TIM_PeriodElapsedCallback+0x115c>)
 80061a2:	f7fa ff11 	bl	8000fc8 <print>
    		    setCursor(0, 2);
 80061a6:	2102      	movs	r1, #2
 80061a8:	2000      	movs	r0, #0
 80061aa:	f7fa fec5 	bl	8000f38 <setCursor>
    		    print("                    ");
 80061ae:	484c      	ldr	r0, [pc, #304]	; (80062e0 <HAL_TIM_PeriodElapsedCallback+0x115c>)
 80061b0:	f7fa ff0a 	bl	8000fc8 <print>
    		    setCursor(0, 3);
 80061b4:	2103      	movs	r1, #3
 80061b6:	2000      	movs	r0, #0
 80061b8:	f7fa febe 	bl	8000f38 <setCursor>
    		    print("                    ");
 80061bc:	4848      	ldr	r0, [pc, #288]	; (80062e0 <HAL_TIM_PeriodElapsedCallback+0x115c>)
 80061be:	f7fa ff03 	bl	8000fc8 <print>
    		    sw_3 = 1;
 80061c2:	4b51      	ldr	r3, [pc, #324]	; (8006308 <HAL_TIM_PeriodElapsedCallback+0x1184>)
 80061c4:	2201      	movs	r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
    		}
    		if (buzzerForPir == 0) {
 80061c8:	4b50      	ldr	r3, [pc, #320]	; (800630c <HAL_TIM_PeriodElapsedCallback+0x1188>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d106      	bne.n	80061de <HAL_TIM_PeriodElapsedCallback+0x105a>
    			buzzerChangeTone(v, 100);
 80061d0:	4b45      	ldr	r3, [pc, #276]	; (80062e8 <HAL_TIM_PeriodElapsedCallback+0x1164>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2164      	movs	r1, #100	; 0x64
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fe fecd 	bl	8004f78 <buzzerChangeTone>
    		}
    		if (buzzerForPir == 0) {
 80061de:	4b4b      	ldr	r3, [pc, #300]	; (800630c <HAL_TIM_PeriodElapsedCallback+0x1188>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d103      	bne.n	80061ee <HAL_TIM_PeriodElapsedCallback+0x106a>
    			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80061e6:	2104      	movs	r1, #4
 80061e8:	4840      	ldr	r0, [pc, #256]	; (80062ec <HAL_TIM_PeriodElapsedCallback+0x1168>)
 80061ea:	f002 ff39 	bl	8009060 <HAL_GPIO_TogglePin>
    		}
    		setCursor(0, 0);
 80061ee:	2100      	movs	r1, #0
 80061f0:	2000      	movs	r0, #0
 80061f2:	f7fa fea1 	bl	8000f38 <setCursor>
    		print("    security is on     ");
 80061f6:	4846      	ldr	r0, [pc, #280]	; (8006310 <HAL_TIM_PeriodElapsedCallback+0x118c>)
 80061f8:	f7fa fee6 	bl	8000fc8 <print>
    		setCursor(0, 1);
 80061fc:	2101      	movs	r1, #1
 80061fe:	2000      	movs	r0, #0
 8006200:	f7fa fe9a 	bl	8000f38 <setCursor>
    		sprintf(str, "count = %d", count);
 8006204:	4b35      	ldr	r3, [pc, #212]	; (80062dc <HAL_TIM_PeriodElapsedCallback+0x1158>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	461a      	mov	r2, r3
 800620a:	493e      	ldr	r1, [pc, #248]	; (8006304 <HAL_TIM_PeriodElapsedCallback+0x1180>)
 800620c:	483c      	ldr	r0, [pc, #240]	; (8006300 <HAL_TIM_PeriodElapsedCallback+0x117c>)
 800620e:	f007 fb4d 	bl	800d8ac <siprintf>
    		print(str);
 8006212:	483b      	ldr	r0, [pc, #236]	; (8006300 <HAL_TIM_PeriodElapsedCallback+0x117c>)
 8006214:	f7fa fed8 	bl	8000fc8 <print>
		    setCursor(0, 2);
 8006218:	2102      	movs	r1, #2
 800621a:	2000      	movs	r0, #0
 800621c:	f7fa fe8c 	bl	8000f38 <setCursor>
		    print("                    ");
 8006220:	482f      	ldr	r0, [pc, #188]	; (80062e0 <HAL_TIM_PeriodElapsedCallback+0x115c>)
 8006222:	f7fa fed1 	bl	8000fc8 <print>
 8006226:	e002      	b.n	800622e <HAL_TIM_PeriodElapsedCallback+0x10aa>
    	} else {
    		sw_3 = 0;
 8006228:	4b37      	ldr	r3, [pc, #220]	; (8006308 <HAL_TIM_PeriodElapsedCallback+0x1184>)
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
    	}

    	if (count >= 50 && menuState != -1 && sleepIsOn == 0) {
 800622e:	4b2b      	ldr	r3, [pc, #172]	; (80062dc <HAL_TIM_PeriodElapsedCallback+0x1158>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b31      	cmp	r3, #49	; 0x31
 8006234:	dd21      	ble.n	800627a <HAL_TIM_PeriodElapsedCallback+0x10f6>
 8006236:	4b27      	ldr	r3, [pc, #156]	; (80062d4 <HAL_TIM_PeriodElapsedCallback+0x1150>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623e:	d01c      	beq.n	800627a <HAL_TIM_PeriodElapsedCallback+0x10f6>
 8006240:	4b34      	ldr	r3, [pc, #208]	; (8006314 <HAL_TIM_PeriodElapsedCallback+0x1190>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d118      	bne.n	800627a <HAL_TIM_PeriodElapsedCallback+0x10f6>
    		if (menuState != -2 && menuState != -3) {
 8006248:	4b22      	ldr	r3, [pc, #136]	; (80062d4 <HAL_TIM_PeriodElapsedCallback+0x1150>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f113 0f02 	cmn.w	r3, #2
 8006250:	d017      	beq.n	8006282 <HAL_TIM_PeriodElapsedCallback+0x10fe>
 8006252:	4b20      	ldr	r3, [pc, #128]	; (80062d4 <HAL_TIM_PeriodElapsedCallback+0x1150>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f113 0f03 	cmn.w	r3, #3
 800625a:	d012      	beq.n	8006282 <HAL_TIM_PeriodElapsedCallback+0x10fe>
    			if (sw8 == 0) {
 800625c:	4b2e      	ldr	r3, [pc, #184]	; (8006318 <HAL_TIM_PeriodElapsedCallback+0x1194>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d106      	bne.n	8006272 <HAL_TIM_PeriodElapsedCallback+0x10ee>
    				currentState = menuState;
 8006264:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <HAL_TIM_PeriodElapsedCallback+0x1150>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a2c      	ldr	r2, [pc, #176]	; (800631c <HAL_TIM_PeriodElapsedCallback+0x1198>)
 800626a:	6013      	str	r3, [r2, #0]
    				sw8=1;
 800626c:	4b2a      	ldr	r3, [pc, #168]	; (8006318 <HAL_TIM_PeriodElapsedCallback+0x1194>)
 800626e:	2201      	movs	r2, #1
 8006270:	601a      	str	r2, [r3, #0]
    			}

    			menuState = 6;
 8006272:	4b18      	ldr	r3, [pc, #96]	; (80062d4 <HAL_TIM_PeriodElapsedCallback+0x1150>)
 8006274:	2206      	movs	r2, #6
 8006276:	601a      	str	r2, [r3, #0]
    		if (menuState != -2 && menuState != -3) {
 8006278:	e003      	b.n	8006282 <HAL_TIM_PeriodElapsedCallback+0x10fe>
    		}
    	} else {
    		sw8=0;
 800627a:	4b27      	ldr	r3, [pc, #156]	; (8006318 <HAL_TIM_PeriodElapsedCallback+0x1194>)
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	e000      	b.n	8006284 <HAL_TIM_PeriodElapsedCallback+0x1100>
    		if (menuState != -2 && menuState != -3) {
 8006282:	bf00      	nop
    	}

    	if (temp > tempTresh) {
 8006284:	4b1c      	ldr	r3, [pc, #112]	; (80062f8 <HAL_TIM_PeriodElapsedCallback+0x1174>)
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	4b1a      	ldr	r3, [pc, #104]	; (80062f4 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	dd49      	ble.n	8006324 <HAL_TIM_PeriodElapsedCallback+0x11a0>
    		if (menuState != -1 && menuState !=-3 && menuState !=  -2) {
 8006290:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <HAL_TIM_PeriodElapsedCallback+0x1150>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006298:	d047      	beq.n	800632a <HAL_TIM_PeriodElapsedCallback+0x11a6>
 800629a:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <HAL_TIM_PeriodElapsedCallback+0x1150>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f113 0f03 	cmn.w	r3, #3
 80062a2:	d042      	beq.n	800632a <HAL_TIM_PeriodElapsedCallback+0x11a6>
 80062a4:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <HAL_TIM_PeriodElapsedCallback+0x1150>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f113 0f02 	cmn.w	r3, #2
 80062ac:	d03d      	beq.n	800632a <HAL_TIM_PeriodElapsedCallback+0x11a6>
    			if (swThresh == 0) {
 80062ae:	4b1c      	ldr	r3, [pc, #112]	; (8006320 <HAL_TIM_PeriodElapsedCallback+0x119c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <HAL_TIM_PeriodElapsedCallback+0x1140>
    				currentState = menuState;
 80062b6:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <HAL_TIM_PeriodElapsedCallback+0x1150>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a18      	ldr	r2, [pc, #96]	; (800631c <HAL_TIM_PeriodElapsedCallback+0x1198>)
 80062bc:	6013      	str	r3, [r2, #0]
    				swThresh = 1;
 80062be:	4b18      	ldr	r3, [pc, #96]	; (8006320 <HAL_TIM_PeriodElapsedCallback+0x119c>)
 80062c0:	2201      	movs	r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
    			}
    			menuState = -2;
 80062c4:	4b03      	ldr	r3, [pc, #12]	; (80062d4 <HAL_TIM_PeriodElapsedCallback+0x1150>)
 80062c6:	f06f 0201 	mvn.w	r2, #1
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	e02d      	b.n	800632a <HAL_TIM_PeriodElapsedCallback+0x11a6>
 80062ce:	bf00      	nop
 80062d0:	20000784 	.word	0x20000784
 80062d4:	2000000c 	.word	0x2000000c
 80062d8:	20000730 	.word	0x20000730
 80062dc:	20000728 	.word	0x20000728
 80062e0:	0800e548 	.word	0x0800e548
 80062e4:	200006a0 	.word	0x200006a0
 80062e8:	20000794 	.word	0x20000794
 80062ec:	48000400 	.word	0x48000400
 80062f0:	0800e9c0 	.word	0x0800e9c0
 80062f4:	20000010 	.word	0x20000010
 80062f8:	2000072c 	.word	0x2000072c
 80062fc:	0800e9d4 	.word	0x0800e9d4
 8006300:	200006c4 	.word	0x200006c4
 8006304:	0800e9e8 	.word	0x0800e9e8
 8006308:	20000748 	.word	0x20000748
 800630c:	200006b8 	.word	0x200006b8
 8006310:	0800e9f4 	.word	0x0800e9f4
 8006314:	2000074c 	.word	0x2000074c
 8006318:	20000740 	.word	0x20000740
 800631c:	2000073c 	.word	0x2000073c
 8006320:	20000744 	.word	0x20000744
    		}
    	} else {
    		swThresh = 0;
 8006324:	4b22      	ldr	r3, [pc, #136]	; (80063b0 <HAL_TIM_PeriodElapsedCallback+0x122c>)
 8006326:	2200      	movs	r2, #0
 8006328:	601a      	str	r2, [r3, #0]
    	}

    	if (count >= 10 && menuState == -2) {
 800632a:	4b22      	ldr	r3, [pc, #136]	; (80063b4 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b09      	cmp	r3, #9
 8006330:	dd1a      	ble.n	8006368 <HAL_TIM_PeriodElapsedCallback+0x11e4>
 8006332:	4b21      	ldr	r3, [pc, #132]	; (80063b8 <HAL_TIM_PeriodElapsedCallback+0x1234>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f113 0f02 	cmn.w	r3, #2
 800633a:	d115      	bne.n	8006368 <HAL_TIM_PeriodElapsedCallback+0x11e4>
    		if (temp < tempTresh) {
 800633c:	4b1f      	ldr	r3, [pc, #124]	; (80063bc <HAL_TIM_PeriodElapsedCallback+0x1238>)
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	4b1f      	ldr	r3, [pc, #124]	; (80063c0 <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	da0f      	bge.n	8006368 <HAL_TIM_PeriodElapsedCallback+0x11e4>
    			menuState = currentState;
 8006348:	4b1e      	ldr	r3, [pc, #120]	; (80063c4 <HAL_TIM_PeriodElapsedCallback+0x1240>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1a      	ldr	r2, [pc, #104]	; (80063b8 <HAL_TIM_PeriodElapsedCallback+0x1234>)
 800634e:	6013      	str	r3, [r2, #0]
    			count = 0;
 8006350:	4b18      	ldr	r3, [pc, #96]	; (80063b4 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]
    			buzzerChangeTone(0, 0);
 8006356:	2100      	movs	r1, #0
 8006358:	2000      	movs	r0, #0
 800635a:	f7fe fe0d 	bl	8004f78 <buzzerChangeTone>
    			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800635e:	2200      	movs	r2, #0
 8006360:	2104      	movs	r1, #4
 8006362:	4819      	ldr	r0, [pc, #100]	; (80063c8 <HAL_TIM_PeriodElapsedCallback+0x1244>)
 8006364:	f002 fe64 	bl	8009030 <HAL_GPIO_WritePin>
    		}
    	}

    	if (count >= 10 && menuState == -3) {
 8006368:	4b12      	ldr	r3, [pc, #72]	; (80063b4 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b09      	cmp	r3, #9
 800636e:	dd14      	ble.n	800639a <HAL_TIM_PeriodElapsedCallback+0x1216>
 8006370:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <HAL_TIM_PeriodElapsedCallback+0x1234>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f113 0f03 	cmn.w	r3, #3
 8006378:	d10f      	bne.n	800639a <HAL_TIM_PeriodElapsedCallback+0x1216>
			menuState = currentState;
 800637a:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <HAL_TIM_PeriodElapsedCallback+0x1240>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a0e      	ldr	r2, [pc, #56]	; (80063b8 <HAL_TIM_PeriodElapsedCallback+0x1234>)
 8006380:	6013      	str	r3, [r2, #0]
			count = 0;
 8006382:	4b0c      	ldr	r3, [pc, #48]	; (80063b4 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]
			buzzerChangeTone(0, 0);
 8006388:	2100      	movs	r1, #0
 800638a:	2000      	movs	r0, #0
 800638c:	f7fe fdf4 	bl	8004f78 <buzzerChangeTone>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8006390:	2200      	movs	r2, #0
 8006392:	2104      	movs	r1, #4
 8006394:	480c      	ldr	r0, [pc, #48]	; (80063c8 <HAL_TIM_PeriodElapsedCallback+0x1244>)
 8006396:	f002 fe4b 	bl	8009030 <HAL_GPIO_WritePin>
    	}

    	if  (count >= 10) {
 800639a:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b09      	cmp	r3, #9
 80063a0:	dd02      	ble.n	80063a8 <HAL_TIM_PeriodElapsedCallback+0x1224>
    		keyState = 0;
 80063a2:	4b0a      	ldr	r3, [pc, #40]	; (80063cc <HAL_TIM_PeriodElapsedCallback+0x1248>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
    	}



    }
}
 80063a8:	bf00      	nop
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	20000744 	.word	0x20000744
 80063b4:	20000728 	.word	0x20000728
 80063b8:	2000000c 	.word	0x2000000c
 80063bc:	2000072c 	.word	0x2000072c
 80063c0:	20000010 	.word	0x20000010
 80063c4:	2000073c 	.word	0x2000073c
 80063c8:	48000400 	.word	0x48000400
 80063cc:	20000768 	.word	0x20000768

080063d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80063d6:	f000 ff8f 	bl	80072f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80063da:	f000 f893 	bl	8006504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80063de:	f000 fb5b 	bl	8006a98 <MX_GPIO_Init>
  MX_I2C1_Init();
 80063e2:	f000 f9c3 	bl	800676c <MX_I2C1_Init>
  MX_SPI1_Init();
 80063e6:	f000 fa01 	bl	80067ec <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80063ea:	f000 fb33 	bl	8006a54 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80063ee:	f000 f8ef 	bl	80065d0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80063f2:	f000 fa39 	bl	8006868 <MX_TIM2_Init>
  MX_TIM3_Init();
 80063f6:	f000 faad 	bl	8006954 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80063fa:	f000 fafb 	bl	80069f4 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80063fe:	f000 f957 	bl	80066b0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  buzzerInit();
 8006402:	f7fe fda1 	bl	8004f48 <buzzerInit>


  LiquidCrystal(GPIOD, GPIO_PIN_8,  GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 8006406:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800640a:	9303      	str	r3, [sp, #12]
 800640c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006410:	9302      	str	r3, [sp, #8]
 8006412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800642a:	482a      	ldr	r0, [pc, #168]	; (80064d4 <main+0x104>)
 800642c:	f7fa fb1e 	bl	8000a6c <LiquidCrystal>
  begin(20, 4);
 8006430:	2104      	movs	r1, #4
 8006432:	2014      	movs	r0, #20
 8006434:	f7fa fbb2 	bl	8000b9c <begin>
  createChar(0, offLed);
 8006438:	4927      	ldr	r1, [pc, #156]	; (80064d8 <main+0x108>)
 800643a:	2000      	movs	r0, #0
 800643c:	f7fa fdef 	bl	800101e <createChar>
  createChar(1, onLed);
 8006440:	4926      	ldr	r1, [pc, #152]	; (80064dc <main+0x10c>)
 8006442:	2001      	movs	r0, #1
 8006444:	f7fa fdeb 	bl	800101e <createChar>
  createChar(2, leftLove);
 8006448:	4925      	ldr	r1, [pc, #148]	; (80064e0 <main+0x110>)
 800644a:	2002      	movs	r0, #2
 800644c:	f7fa fde7 	bl	800101e <createChar>
  createChar(3, rightLove);
 8006450:	4924      	ldr	r1, [pc, #144]	; (80064e4 <main+0x114>)
 8006452:	2003      	movs	r0, #3
 8006454:	f7fa fde3 	bl	800101e <createChar>
  createChar(4, sleep);
 8006458:	4923      	ldr	r1, [pc, #140]	; (80064e8 <main+0x118>)
 800645a:	2004      	movs	r0, #4
 800645c:	f7fa fddf 	bl	800101e <createChar>
//  print("   sleeping   ");
  HAL_TIM_Base_Start_IT(&htim3);
 8006460:	4822      	ldr	r0, [pc, #136]	; (80064ec <main+0x11c>)
 8006462:	f004 fd4d 	bl	800af00 <HAL_TIM_Base_Start_IT>
  s1.LED1 = 0;
 8006466:	4b22      	ldr	r3, [pc, #136]	; (80064f0 <main+0x120>)
 8006468:	2200      	movs	r2, #0
 800646a:	611a      	str	r2, [r3, #16]
  s1.LED2 = 0;
 800646c:	4b20      	ldr	r3, [pc, #128]	; (80064f0 <main+0x120>)
 800646e:	2200      	movs	r2, #0
 8006470:	615a      	str	r2, [r3, #20]
  s1.LED3 = 0;
 8006472:	4b1f      	ldr	r3, [pc, #124]	; (80064f0 <main+0x120>)
 8006474:	2200      	movs	r2, #0
 8006476:	619a      	str	r2, [r3, #24]
  s1.LED4 = 0;
 8006478:	4b1d      	ldr	r3, [pc, #116]	; (80064f0 <main+0x120>)
 800647a:	2200      	movs	r2, #0
 800647c:	61da      	str	r2, [r3, #28]
  HAL_UART_Transmit(&huart2, "enter your username:\n", 21, 100);
 800647e:	2364      	movs	r3, #100	; 0x64
 8006480:	2215      	movs	r2, #21
 8006482:	491c      	ldr	r1, [pc, #112]	; (80064f4 <main+0x124>)
 8006484:	481c      	ldr	r0, [pc, #112]	; (80064f8 <main+0x128>)
 8006486:	f005 ff3f 	bl	800c308 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, uartInput, 5);
 800648a:	2205      	movs	r2, #5
 800648c:	491b      	ldr	r1, [pc, #108]	; (80064fc <main+0x12c>)
 800648e:	481a      	ldr	r0, [pc, #104]	; (80064f8 <main+0x128>)
 8006490:	f005 ffc4 	bl	800c41c <HAL_UART_Receive_IT>
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);

//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8006494:	2201      	movs	r2, #1
 8006496:	2101      	movs	r1, #1
 8006498:	480e      	ldr	r0, [pc, #56]	; (80064d4 <main+0x104>)
 800649a:	f002 fdc9 	bl	8009030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 800649e:	2201      	movs	r2, #1
 80064a0:	2120      	movs	r1, #32
 80064a2:	480c      	ldr	r0, [pc, #48]	; (80064d4 <main+0x104>)
 80064a4:	f002 fdc4 	bl	8009030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 80064a8:	2201      	movs	r2, #1
 80064aa:	2140      	movs	r1, #64	; 0x40
 80064ac:	4809      	ldr	r0, [pc, #36]	; (80064d4 <main+0x104>)
 80064ae:	f002 fdbf 	bl	8009030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 80064b2:	2201      	movs	r2, #1
 80064b4:	2180      	movs	r1, #128	; 0x80
 80064b6:	4807      	ldr	r0, [pc, #28]	; (80064d4 <main+0x104>)
 80064b8:	f002 fdba 	bl	8009030 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80064bc:	2201      	movs	r2, #1
 80064be:	2120      	movs	r1, #32
 80064c0:	480f      	ldr	r0, [pc, #60]	; (8006500 <main+0x130>)
 80064c2:	f002 fdb5 	bl	8009030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 80064c6:	2200      	movs	r2, #0
 80064c8:	2104      	movs	r1, #4
 80064ca:	480d      	ldr	r0, [pc, #52]	; (8006500 <main+0x130>)
 80064cc:	f002 fdb0 	bl	8009030 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 80064d0:	e7fe      	b.n	80064d0 <main+0x100>
 80064d2:	bf00      	nop
 80064d4:	48000c00 	.word	0x48000c00
 80064d8:	20000044 	.word	0x20000044
 80064dc:	2000003c 	.word	0x2000003c
 80064e0:	20000054 	.word	0x20000054
 80064e4:	2000004c 	.word	0x2000004c
 80064e8:	2000005c 	.word	0x2000005c
 80064ec:	200002b8 	.word	0x200002b8
 80064f0:	200007a4 	.word	0x200007a4
 80064f4:	0800e1fc 	.word	0x0800e1fc
 80064f8:	20000304 	.word	0x20000304
 80064fc:	2000079c 	.word	0x2000079c
 8006500:	48000400 	.word	0x48000400

08006504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b09e      	sub	sp, #120	; 0x78
 8006508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800650a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800650e:	2228      	movs	r2, #40	; 0x28
 8006510:	2100      	movs	r1, #0
 8006512:	4618      	mov	r0, r3
 8006514:	f007 f9c2 	bl	800d89c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006518:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	605a      	str	r2, [r3, #4]
 8006522:	609a      	str	r2, [r3, #8]
 8006524:	60da      	str	r2, [r3, #12]
 8006526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006528:	463b      	mov	r3, r7
 800652a:	223c      	movs	r2, #60	; 0x3c
 800652c:	2100      	movs	r1, #0
 800652e:	4618      	mov	r0, r3
 8006530:	f007 f9b4 	bl	800d89c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8006534:	2303      	movs	r3, #3
 8006536:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006538:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800653c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800653e:	2300      	movs	r3, #0
 8006540:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006542:	2301      	movs	r3, #1
 8006544:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006546:	2310      	movs	r3, #16
 8006548:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800654a:	2302      	movs	r3, #2
 800654c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800654e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006552:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006554:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006558:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800655a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800655e:	4618      	mov	r0, r3
 8006560:	f002 ffa8 	bl	80094b4 <HAL_RCC_OscConfig>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800656a:	f000 fb9f 	bl	8006cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800656e:	230f      	movs	r3, #15
 8006570:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006572:	2302      	movs	r3, #2
 8006574:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006576:	2300      	movs	r3, #0
 8006578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800657a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800657e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006580:	2300      	movs	r3, #0
 8006582:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006584:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006588:	2102      	movs	r1, #2
 800658a:	4618      	mov	r0, r3
 800658c:	f003 ffd0 	bl	800a530 <HAL_RCC_ClockConfig>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8006596:	f000 fb89 	bl	8006cac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 800659a:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <SystemClock_Config+0xc8>)
 800659c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80065a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80065a8:	2300      	movs	r3, #0
 80065aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80065ac:	2300      	movs	r3, #0
 80065ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80065b0:	463b      	mov	r3, r7
 80065b2:	4618      	mov	r0, r3
 80065b4:	f004 f9f2 	bl	800a99c <HAL_RCCEx_PeriphCLKConfig>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80065be:	f000 fb75 	bl	8006cac <Error_Handler>
  }
}
 80065c2:	bf00      	nop
 80065c4:	3778      	adds	r7, #120	; 0x78
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	000200a2 	.word	0x000200a2

080065d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08a      	sub	sp, #40	; 0x28
 80065d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80065d6:	f107 031c 	add.w	r3, r7, #28
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	605a      	str	r2, [r3, #4]
 80065e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80065e2:	1d3b      	adds	r3, r7, #4
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	605a      	str	r2, [r3, #4]
 80065ea:	609a      	str	r2, [r3, #8]
 80065ec:	60da      	str	r2, [r3, #12]
 80065ee:	611a      	str	r2, [r3, #16]
 80065f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80065f2:	4b2e      	ldr	r3, [pc, #184]	; (80066ac <MX_ADC1_Init+0xdc>)
 80065f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80065f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80065fa:	4b2c      	ldr	r3, [pc, #176]	; (80066ac <MX_ADC1_Init+0xdc>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006600:	4b2a      	ldr	r3, [pc, #168]	; (80066ac <MX_ADC1_Init+0xdc>)
 8006602:	2200      	movs	r2, #0
 8006604:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006606:	4b29      	ldr	r3, [pc, #164]	; (80066ac <MX_ADC1_Init+0xdc>)
 8006608:	2200      	movs	r2, #0
 800660a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800660c:	4b27      	ldr	r3, [pc, #156]	; (80066ac <MX_ADC1_Init+0xdc>)
 800660e:	2200      	movs	r2, #0
 8006610:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006612:	4b26      	ldr	r3, [pc, #152]	; (80066ac <MX_ADC1_Init+0xdc>)
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800661a:	4b24      	ldr	r3, [pc, #144]	; (80066ac <MX_ADC1_Init+0xdc>)
 800661c:	2200      	movs	r2, #0
 800661e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006620:	4b22      	ldr	r3, [pc, #136]	; (80066ac <MX_ADC1_Init+0xdc>)
 8006622:	2201      	movs	r2, #1
 8006624:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006626:	4b21      	ldr	r3, [pc, #132]	; (80066ac <MX_ADC1_Init+0xdc>)
 8006628:	2200      	movs	r2, #0
 800662a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800662c:	4b1f      	ldr	r3, [pc, #124]	; (80066ac <MX_ADC1_Init+0xdc>)
 800662e:	2201      	movs	r2, #1
 8006630:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006632:	4b1e      	ldr	r3, [pc, #120]	; (80066ac <MX_ADC1_Init+0xdc>)
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800663a:	4b1c      	ldr	r3, [pc, #112]	; (80066ac <MX_ADC1_Init+0xdc>)
 800663c:	2204      	movs	r2, #4
 800663e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006640:	4b1a      	ldr	r3, [pc, #104]	; (80066ac <MX_ADC1_Init+0xdc>)
 8006642:	2200      	movs	r2, #0
 8006644:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006646:	4b19      	ldr	r3, [pc, #100]	; (80066ac <MX_ADC1_Init+0xdc>)
 8006648:	2200      	movs	r2, #0
 800664a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800664c:	4817      	ldr	r0, [pc, #92]	; (80066ac <MX_ADC1_Init+0xdc>)
 800664e:	f000 fef1 	bl	8007434 <HAL_ADC_Init>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8006658:	f000 fb28 	bl	8006cac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800665c:	2300      	movs	r3, #0
 800665e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006660:	f107 031c 	add.w	r3, r7, #28
 8006664:	4619      	mov	r1, r3
 8006666:	4811      	ldr	r0, [pc, #68]	; (80066ac <MX_ADC1_Init+0xdc>)
 8006668:	f002 f80c 	bl	8008684 <HAL_ADCEx_MultiModeConfigChannel>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8006672:	f000 fb1b 	bl	8006cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006676:	2302      	movs	r3, #2
 8006678:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800667a:	2301      	movs	r3, #1
 800667c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800667e:	2300      	movs	r3, #0
 8006680:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8006682:	2307      	movs	r3, #7
 8006684:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800668e:	1d3b      	adds	r3, r7, #4
 8006690:	4619      	mov	r1, r3
 8006692:	4806      	ldr	r0, [pc, #24]	; (80066ac <MX_ADC1_Init+0xdc>)
 8006694:	f001 fd0a 	bl	80080ac <HAL_ADC_ConfigChannel>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800669e:	f000 fb05 	bl	8006cac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80066a2:	bf00      	nop
 80066a4:	3728      	adds	r7, #40	; 0x28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20000114 	.word	0x20000114

080066b0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80066b6:	463b      	mov	r3, r7
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	605a      	str	r2, [r3, #4]
 80066be:	609a      	str	r2, [r3, #8]
 80066c0:	60da      	str	r2, [r3, #12]
 80066c2:	611a      	str	r2, [r3, #16]
 80066c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80066c6:	4b27      	ldr	r3, [pc, #156]	; (8006764 <MX_ADC2_Init+0xb4>)
 80066c8:	4a27      	ldr	r2, [pc, #156]	; (8006768 <MX_ADC2_Init+0xb8>)
 80066ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80066cc:	4b25      	ldr	r3, [pc, #148]	; (8006764 <MX_ADC2_Init+0xb4>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80066d2:	4b24      	ldr	r3, [pc, #144]	; (8006764 <MX_ADC2_Init+0xb4>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80066d8:	4b22      	ldr	r3, [pc, #136]	; (8006764 <MX_ADC2_Init+0xb4>)
 80066da:	2200      	movs	r2, #0
 80066dc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80066de:	4b21      	ldr	r3, [pc, #132]	; (8006764 <MX_ADC2_Init+0xb4>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80066e4:	4b1f      	ldr	r3, [pc, #124]	; (8006764 <MX_ADC2_Init+0xb4>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80066ec:	4b1d      	ldr	r3, [pc, #116]	; (8006764 <MX_ADC2_Init+0xb4>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80066f2:	4b1c      	ldr	r3, [pc, #112]	; (8006764 <MX_ADC2_Init+0xb4>)
 80066f4:	2201      	movs	r2, #1
 80066f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80066f8:	4b1a      	ldr	r3, [pc, #104]	; (8006764 <MX_ADC2_Init+0xb4>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80066fe:	4b19      	ldr	r3, [pc, #100]	; (8006764 <MX_ADC2_Init+0xb4>)
 8006700:	2201      	movs	r2, #1
 8006702:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8006704:	4b17      	ldr	r3, [pc, #92]	; (8006764 <MX_ADC2_Init+0xb4>)
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800670c:	4b15      	ldr	r3, [pc, #84]	; (8006764 <MX_ADC2_Init+0xb4>)
 800670e:	2204      	movs	r2, #4
 8006710:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8006712:	4b14      	ldr	r3, [pc, #80]	; (8006764 <MX_ADC2_Init+0xb4>)
 8006714:	2200      	movs	r2, #0
 8006716:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006718:	4b12      	ldr	r3, [pc, #72]	; (8006764 <MX_ADC2_Init+0xb4>)
 800671a:	2200      	movs	r2, #0
 800671c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800671e:	4811      	ldr	r0, [pc, #68]	; (8006764 <MX_ADC2_Init+0xb4>)
 8006720:	f000 fe88 	bl	8007434 <HAL_ADC_Init>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800672a:	f000 fabf 	bl	8006cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800672e:	2301      	movs	r3, #1
 8006730:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006732:	2301      	movs	r3, #1
 8006734:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006736:	2300      	movs	r3, #0
 8006738:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800673a:	2307      	movs	r3, #7
 800673c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800673e:	2300      	movs	r3, #0
 8006740:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006746:	463b      	mov	r3, r7
 8006748:	4619      	mov	r1, r3
 800674a:	4806      	ldr	r0, [pc, #24]	; (8006764 <MX_ADC2_Init+0xb4>)
 800674c:	f001 fcae 	bl	80080ac <HAL_ADC_ConfigChannel>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8006756:	f000 faa9 	bl	8006cac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800675a:	bf00      	nop
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20000164 	.word	0x20000164
 8006768:	50000100 	.word	0x50000100

0800676c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006770:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <MX_I2C1_Init+0x74>)
 8006772:	4a1c      	ldr	r2, [pc, #112]	; (80067e4 <MX_I2C1_Init+0x78>)
 8006774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8006776:	4b1a      	ldr	r3, [pc, #104]	; (80067e0 <MX_I2C1_Init+0x74>)
 8006778:	4a1b      	ldr	r2, [pc, #108]	; (80067e8 <MX_I2C1_Init+0x7c>)
 800677a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800677c:	4b18      	ldr	r3, [pc, #96]	; (80067e0 <MX_I2C1_Init+0x74>)
 800677e:	2200      	movs	r2, #0
 8006780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006782:	4b17      	ldr	r3, [pc, #92]	; (80067e0 <MX_I2C1_Init+0x74>)
 8006784:	2201      	movs	r2, #1
 8006786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006788:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <MX_I2C1_Init+0x74>)
 800678a:	2200      	movs	r2, #0
 800678c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800678e:	4b14      	ldr	r3, [pc, #80]	; (80067e0 <MX_I2C1_Init+0x74>)
 8006790:	2200      	movs	r2, #0
 8006792:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006794:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <MX_I2C1_Init+0x74>)
 8006796:	2200      	movs	r2, #0
 8006798:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800679a:	4b11      	ldr	r3, [pc, #68]	; (80067e0 <MX_I2C1_Init+0x74>)
 800679c:	2200      	movs	r2, #0
 800679e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80067a0:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <MX_I2C1_Init+0x74>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80067a6:	480e      	ldr	r0, [pc, #56]	; (80067e0 <MX_I2C1_Init+0x74>)
 80067a8:	f002 fc8c 	bl	80090c4 <HAL_I2C_Init>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80067b2:	f000 fa7b 	bl	8006cac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80067b6:	2100      	movs	r1, #0
 80067b8:	4809      	ldr	r0, [pc, #36]	; (80067e0 <MX_I2C1_Init+0x74>)
 80067ba:	f002 fd12 	bl	80091e2 <HAL_I2CEx_ConfigAnalogFilter>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80067c4:	f000 fa72 	bl	8006cac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80067c8:	2100      	movs	r1, #0
 80067ca:	4805      	ldr	r0, [pc, #20]	; (80067e0 <MX_I2C1_Init+0x74>)
 80067cc:	f002 fd54 	bl	8009278 <HAL_I2CEx_ConfigDigitalFilter>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80067d6:	f000 fa69 	bl	8006cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80067da:	bf00      	nop
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	200001b4 	.word	0x200001b4
 80067e4:	40005400 	.word	0x40005400
 80067e8:	2000090e 	.word	0x2000090e

080067ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80067f0:	4b1b      	ldr	r3, [pc, #108]	; (8006860 <MX_SPI1_Init+0x74>)
 80067f2:	4a1c      	ldr	r2, [pc, #112]	; (8006864 <MX_SPI1_Init+0x78>)
 80067f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80067f6:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <MX_SPI1_Init+0x74>)
 80067f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80067fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80067fe:	4b18      	ldr	r3, [pc, #96]	; (8006860 <MX_SPI1_Init+0x74>)
 8006800:	2200      	movs	r2, #0
 8006802:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8006804:	4b16      	ldr	r3, [pc, #88]	; (8006860 <MX_SPI1_Init+0x74>)
 8006806:	f44f 7240 	mov.w	r2, #768	; 0x300
 800680a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800680c:	4b14      	ldr	r3, [pc, #80]	; (8006860 <MX_SPI1_Init+0x74>)
 800680e:	2200      	movs	r2, #0
 8006810:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006812:	4b13      	ldr	r3, [pc, #76]	; (8006860 <MX_SPI1_Init+0x74>)
 8006814:	2200      	movs	r2, #0
 8006816:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006818:	4b11      	ldr	r3, [pc, #68]	; (8006860 <MX_SPI1_Init+0x74>)
 800681a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800681e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8006820:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <MX_SPI1_Init+0x74>)
 8006822:	2208      	movs	r2, #8
 8006824:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006826:	4b0e      	ldr	r3, [pc, #56]	; (8006860 <MX_SPI1_Init+0x74>)
 8006828:	2200      	movs	r2, #0
 800682a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800682c:	4b0c      	ldr	r3, [pc, #48]	; (8006860 <MX_SPI1_Init+0x74>)
 800682e:	2200      	movs	r2, #0
 8006830:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006832:	4b0b      	ldr	r3, [pc, #44]	; (8006860 <MX_SPI1_Init+0x74>)
 8006834:	2200      	movs	r2, #0
 8006836:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006838:	4b09      	ldr	r3, [pc, #36]	; (8006860 <MX_SPI1_Init+0x74>)
 800683a:	2207      	movs	r2, #7
 800683c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800683e:	4b08      	ldr	r3, [pc, #32]	; (8006860 <MX_SPI1_Init+0x74>)
 8006840:	2200      	movs	r2, #0
 8006842:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006844:	4b06      	ldr	r3, [pc, #24]	; (8006860 <MX_SPI1_Init+0x74>)
 8006846:	2208      	movs	r2, #8
 8006848:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800684a:	4805      	ldr	r0, [pc, #20]	; (8006860 <MX_SPI1_Init+0x74>)
 800684c:	f004 fa56 	bl	800acfc <HAL_SPI_Init>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006856:	f000 fa29 	bl	8006cac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800685a:	bf00      	nop
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20000208 	.word	0x20000208
 8006864:	40013000 	.word	0x40013000

08006868 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08e      	sub	sp, #56	; 0x38
 800686c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800686e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	605a      	str	r2, [r3, #4]
 8006878:	609a      	str	r2, [r3, #8]
 800687a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800687c:	f107 031c 	add.w	r3, r7, #28
 8006880:	2200      	movs	r2, #0
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	605a      	str	r2, [r3, #4]
 8006886:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006888:	463b      	mov	r3, r7
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	605a      	str	r2, [r3, #4]
 8006890:	609a      	str	r2, [r3, #8]
 8006892:	60da      	str	r2, [r3, #12]
 8006894:	611a      	str	r2, [r3, #16]
 8006896:	615a      	str	r2, [r3, #20]
 8006898:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800689a:	4b2d      	ldr	r3, [pc, #180]	; (8006950 <MX_TIM2_Init+0xe8>)
 800689c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80068a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80068a2:	4b2b      	ldr	r3, [pc, #172]	; (8006950 <MX_TIM2_Init+0xe8>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068a8:	4b29      	ldr	r3, [pc, #164]	; (8006950 <MX_TIM2_Init+0xe8>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80068ae:	4b28      	ldr	r3, [pc, #160]	; (8006950 <MX_TIM2_Init+0xe8>)
 80068b0:	f04f 32ff 	mov.w	r2, #4294967295
 80068b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068b6:	4b26      	ldr	r3, [pc, #152]	; (8006950 <MX_TIM2_Init+0xe8>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068bc:	4b24      	ldr	r3, [pc, #144]	; (8006950 <MX_TIM2_Init+0xe8>)
 80068be:	2200      	movs	r2, #0
 80068c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80068c2:	4823      	ldr	r0, [pc, #140]	; (8006950 <MX_TIM2_Init+0xe8>)
 80068c4:	f004 fac5 	bl	800ae52 <HAL_TIM_Base_Init>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80068ce:	f000 f9ed 	bl	8006cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80068d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80068d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068dc:	4619      	mov	r1, r3
 80068de:	481c      	ldr	r0, [pc, #112]	; (8006950 <MX_TIM2_Init+0xe8>)
 80068e0:	f004 ff0e 	bl	800b700 <HAL_TIM_ConfigClockSource>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80068ea:	f000 f9df 	bl	8006cac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80068ee:	4818      	ldr	r0, [pc, #96]	; (8006950 <MX_TIM2_Init+0xe8>)
 80068f0:	f004 fb70 	bl	800afd4 <HAL_TIM_PWM_Init>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80068fa:	f000 f9d7 	bl	8006cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068fe:	2300      	movs	r3, #0
 8006900:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006902:	2300      	movs	r3, #0
 8006904:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006906:	f107 031c 	add.w	r3, r7, #28
 800690a:	4619      	mov	r1, r3
 800690c:	4810      	ldr	r0, [pc, #64]	; (8006950 <MX_TIM2_Init+0xe8>)
 800690e:	f005 fc0f 	bl	800c130 <HAL_TIMEx_MasterConfigSynchronization>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8006918:	f000 f9c8 	bl	8006cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800691c:	2360      	movs	r3, #96	; 0x60
 800691e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8006920:	2300      	movs	r3, #0
 8006922:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006924:	2300      	movs	r3, #0
 8006926:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006928:	2300      	movs	r3, #0
 800692a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800692c:	463b      	mov	r3, r7
 800692e:	2200      	movs	r2, #0
 8006930:	4619      	mov	r1, r3
 8006932:	4807      	ldr	r0, [pc, #28]	; (8006950 <MX_TIM2_Init+0xe8>)
 8006934:	f004 fdd0 	bl	800b4d8 <HAL_TIM_PWM_ConfigChannel>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800693e:	f000 f9b5 	bl	8006cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006942:	4803      	ldr	r0, [pc, #12]	; (8006950 <MX_TIM2_Init+0xe8>)
 8006944:	f000 fb28 	bl	8006f98 <HAL_TIM_MspPostInit>

}
 8006948:	bf00      	nop
 800694a:	3738      	adds	r7, #56	; 0x38
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	2000026c 	.word	0x2000026c

08006954 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800695a:	f107 0310 	add.w	r3, r7, #16
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	605a      	str	r2, [r3, #4]
 8006964:	609a      	str	r2, [r3, #8]
 8006966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006968:	1d3b      	adds	r3, r7, #4
 800696a:	2200      	movs	r2, #0
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	605a      	str	r2, [r3, #4]
 8006970:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006972:	4b1e      	ldr	r3, [pc, #120]	; (80069ec <MX_TIM3_Init+0x98>)
 8006974:	4a1e      	ldr	r2, [pc, #120]	; (80069f0 <MX_TIM3_Init+0x9c>)
 8006976:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7499;
 8006978:	4b1c      	ldr	r3, [pc, #112]	; (80069ec <MX_TIM3_Init+0x98>)
 800697a:	f641 524b 	movw	r2, #7499	; 0x1d4b
 800697e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006980:	4b1a      	ldr	r3, [pc, #104]	; (80069ec <MX_TIM3_Init+0x98>)
 8006982:	2200      	movs	r2, #0
 8006984:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8006986:	4b19      	ldr	r3, [pc, #100]	; (80069ec <MX_TIM3_Init+0x98>)
 8006988:	f240 32e7 	movw	r2, #999	; 0x3e7
 800698c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800698e:	4b17      	ldr	r3, [pc, #92]	; (80069ec <MX_TIM3_Init+0x98>)
 8006990:	2200      	movs	r2, #0
 8006992:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006994:	4b15      	ldr	r3, [pc, #84]	; (80069ec <MX_TIM3_Init+0x98>)
 8006996:	2200      	movs	r2, #0
 8006998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800699a:	4814      	ldr	r0, [pc, #80]	; (80069ec <MX_TIM3_Init+0x98>)
 800699c:	f004 fa59 	bl	800ae52 <HAL_TIM_Base_Init>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80069a6:	f000 f981 	bl	8006cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80069aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80069b0:	f107 0310 	add.w	r3, r7, #16
 80069b4:	4619      	mov	r1, r3
 80069b6:	480d      	ldr	r0, [pc, #52]	; (80069ec <MX_TIM3_Init+0x98>)
 80069b8:	f004 fea2 	bl	800b700 <HAL_TIM_ConfigClockSource>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80069c2:	f000 f973 	bl	8006cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069c6:	2300      	movs	r3, #0
 80069c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80069ce:	1d3b      	adds	r3, r7, #4
 80069d0:	4619      	mov	r1, r3
 80069d2:	4806      	ldr	r0, [pc, #24]	; (80069ec <MX_TIM3_Init+0x98>)
 80069d4:	f005 fbac 	bl	800c130 <HAL_TIMEx_MasterConfigSynchronization>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80069de:	f000 f965 	bl	8006cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80069e2:	bf00      	nop
 80069e4:	3720      	adds	r7, #32
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	200002b8 	.word	0x200002b8
 80069f0:	40000400 	.word	0x40000400

080069f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80069f8:	4b14      	ldr	r3, [pc, #80]	; (8006a4c <MX_USART2_UART_Init+0x58>)
 80069fa:	4a15      	ldr	r2, [pc, #84]	; (8006a50 <MX_USART2_UART_Init+0x5c>)
 80069fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80069fe:	4b13      	ldr	r3, [pc, #76]	; (8006a4c <MX_USART2_UART_Init+0x58>)
 8006a00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006a06:	4b11      	ldr	r3, [pc, #68]	; (8006a4c <MX_USART2_UART_Init+0x58>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <MX_USART2_UART_Init+0x58>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006a12:	4b0e      	ldr	r3, [pc, #56]	; (8006a4c <MX_USART2_UART_Init+0x58>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <MX_USART2_UART_Init+0x58>)
 8006a1a:	220c      	movs	r2, #12
 8006a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a1e:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <MX_USART2_UART_Init+0x58>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a24:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <MX_USART2_UART_Init+0x58>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006a2a:	4b08      	ldr	r3, [pc, #32]	; (8006a4c <MX_USART2_UART_Init+0x58>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006a30:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <MX_USART2_UART_Init+0x58>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006a36:	4805      	ldr	r0, [pc, #20]	; (8006a4c <MX_USART2_UART_Init+0x58>)
 8006a38:	f005 fc18 	bl	800c26c <HAL_UART_Init>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8006a42:	f000 f933 	bl	8006cac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006a46:	bf00      	nop
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20000304 	.word	0x20000304
 8006a50:	40004400 	.word	0x40004400

08006a54 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8006a58:	4b0d      	ldr	r3, [pc, #52]	; (8006a90 <MX_USB_PCD_Init+0x3c>)
 8006a5a:	4a0e      	ldr	r2, [pc, #56]	; (8006a94 <MX_USB_PCD_Init+0x40>)
 8006a5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <MX_USB_PCD_Init+0x3c>)
 8006a60:	2208      	movs	r2, #8
 8006a62:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <MX_USB_PCD_Init+0x3c>)
 8006a66:	2202      	movs	r2, #2
 8006a68:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006a6a:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <MX_USB_PCD_Init+0x3c>)
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006a70:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <MX_USB_PCD_Init+0x3c>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006a76:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <MX_USB_PCD_Init+0x3c>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006a7c:	4804      	ldr	r0, [pc, #16]	; (8006a90 <MX_USB_PCD_Init+0x3c>)
 8006a7e:	f002 fc47 	bl	8009310 <HAL_PCD_Init>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8006a88:	f000 f910 	bl	8006cac <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8006a8c:	bf00      	nop
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	2000038c 	.word	0x2000038c
 8006a94:	40005c00 	.word	0x40005c00

08006a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08c      	sub	sp, #48	; 0x30
 8006a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a9e:	f107 031c 	add.w	r3, r7, #28
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	605a      	str	r2, [r3, #4]
 8006aa8:	609a      	str	r2, [r3, #8]
 8006aaa:	60da      	str	r2, [r3, #12]
 8006aac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006aae:	4b7a      	ldr	r3, [pc, #488]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	4a79      	ldr	r2, [pc, #484]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ab8:	6153      	str	r3, [r2, #20]
 8006aba:	4b77      	ldr	r3, [pc, #476]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ac2:	61bb      	str	r3, [r7, #24]
 8006ac4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ac6:	4b74      	ldr	r3, [pc, #464]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	4a73      	ldr	r2, [pc, #460]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006acc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ad0:	6153      	str	r3, [r2, #20]
 8006ad2:	4b71      	ldr	r3, [pc, #452]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006ade:	4b6e      	ldr	r3, [pc, #440]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	4a6d      	ldr	r2, [pc, #436]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006ae4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ae8:	6153      	str	r3, [r2, #20]
 8006aea:	4b6b      	ldr	r3, [pc, #428]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006af6:	4b68      	ldr	r3, [pc, #416]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	4a67      	ldr	r2, [pc, #412]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b00:	6153      	str	r3, [r2, #20]
 8006b02:	4b65      	ldr	r3, [pc, #404]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b0e:	4b62      	ldr	r3, [pc, #392]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	4a61      	ldr	r2, [pc, #388]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b18:	6153      	str	r3, [r2, #20]
 8006b1a:	4b5f      	ldr	r3, [pc, #380]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b22:	60bb      	str	r3, [r7, #8]
 8006b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b26:	4b5c      	ldr	r3, [pc, #368]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	4a5b      	ldr	r2, [pc, #364]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006b2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b30:	6153      	str	r3, [r2, #20]
 8006b32:	4b59      	ldr	r3, [pc, #356]	; (8006c98 <MX_GPIO_Init+0x200>)
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b3a:	607b      	str	r3, [r7, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f64f 7108 	movw	r1, #65288	; 0xff08
 8006b44:	4855      	ldr	r0, [pc, #340]	; (8006c9c <MX_GPIO_Init+0x204>)
 8006b46:	f002 fa73 	bl	8009030 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	2130      	movs	r1, #48	; 0x30
 8006b4e:	4854      	ldr	r0, [pc, #336]	; (8006ca0 <MX_GPIO_Init+0x208>)
 8006b50:	f002 fa6e 	bl	8009030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8006b54:	2200      	movs	r2, #0
 8006b56:	2107      	movs	r1, #7
 8006b58:	4852      	ldr	r0, [pc, #328]	; (8006ca4 <MX_GPIO_Init+0x20c>)
 8006b5a:	f002 fa69 	bl	8009030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f647 71e1 	movw	r1, #32737	; 0x7fe1
 8006b64:	4850      	ldr	r0, [pc, #320]	; (8006ca8 <MX_GPIO_Init+0x210>)
 8006b66:	f002 fa63 	bl	8009030 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8006b6a:	f64f 7308 	movw	r3, #65288	; 0xff08
 8006b6e:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b70:	2301      	movs	r3, #1
 8006b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b74:	2300      	movs	r3, #0
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b7c:	f107 031c 	add.w	r3, r7, #28
 8006b80:	4619      	mov	r1, r3
 8006b82:	4846      	ldr	r0, [pc, #280]	; (8006c9c <MX_GPIO_Init+0x204>)
 8006b84:	f002 f8c2 	bl	8008d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006b8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b94:	2300      	movs	r3, #0
 8006b96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b98:	f107 031c 	add.w	r3, r7, #28
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4840      	ldr	r0, [pc, #256]	; (8006ca0 <MX_GPIO_Init+0x208>)
 8006ba0:	f002 f8b4 	bl	8008d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006ba8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006bae:	2302      	movs	r3, #2
 8006bb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bb2:	f107 031c 	add.w	r3, r7, #28
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006bbc:	f002 f8a6 	bl	8008d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006bc0:	2330      	movs	r3, #48	; 0x30
 8006bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bd0:	f107 031c 	add.w	r3, r7, #28
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4832      	ldr	r0, [pc, #200]	; (8006ca0 <MX_GPIO_Init+0x208>)
 8006bd8:	f002 f898 	bl	8008d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8006bdc:	2307      	movs	r3, #7
 8006bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006be0:	2301      	movs	r3, #1
 8006be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006be4:	2300      	movs	r3, #0
 8006be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006be8:	2300      	movs	r3, #0
 8006bea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bec:	f107 031c 	add.w	r3, r7, #28
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	482c      	ldr	r0, [pc, #176]	; (8006ca4 <MX_GPIO_Init+0x20c>)
 8006bf4:	f002 f88a 	bl	8008d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD0
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006bf8:	f647 73e1 	movw	r3, #32737	; 0x7fe1
 8006bfc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c06:	2300      	movs	r3, #0
 8006c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c0a:	f107 031c 	add.w	r3, r7, #28
 8006c0e:	4619      	mov	r1, r3
 8006c10:	4825      	ldr	r0, [pc, #148]	; (8006ca8 <MX_GPIO_Init+0x210>)
 8006c12:	f002 f87b 	bl	8008d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8006c16:	231e      	movs	r3, #30
 8006c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006c1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006c20:	2302      	movs	r3, #2
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c24:	f107 031c 	add.w	r3, r7, #28
 8006c28:	4619      	mov	r1, r3
 8006c2a:	481f      	ldr	r0, [pc, #124]	; (8006ca8 <MX_GPIO_Init+0x210>)
 8006c2c:	f002 f86e 	bl	8008d0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006c30:	2200      	movs	r2, #0
 8006c32:	2100      	movs	r1, #0
 8006c34:	2006      	movs	r0, #6
 8006c36:	f001 ffbc 	bl	8008bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006c3a:	2006      	movs	r0, #6
 8006c3c:	f001 ffd5 	bl	8008bea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8006c40:	2200      	movs	r2, #0
 8006c42:	2100      	movs	r1, #0
 8006c44:	2007      	movs	r0, #7
 8006c46:	f001 ffb4 	bl	8008bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8006c4a:	2007      	movs	r0, #7
 8006c4c:	f001 ffcd 	bl	8008bea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8006c50:	2200      	movs	r2, #0
 8006c52:	2100      	movs	r1, #0
 8006c54:	2008      	movs	r0, #8
 8006c56:	f001 ffac 	bl	8008bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8006c5a:	2008      	movs	r0, #8
 8006c5c:	f001 ffc5 	bl	8008bea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8006c60:	2200      	movs	r2, #0
 8006c62:	2100      	movs	r1, #0
 8006c64:	2009      	movs	r0, #9
 8006c66:	f001 ffa4 	bl	8008bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8006c6a:	2009      	movs	r0, #9
 8006c6c:	f001 ffbd 	bl	8008bea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006c70:	2200      	movs	r2, #0
 8006c72:	2100      	movs	r1, #0
 8006c74:	200a      	movs	r0, #10
 8006c76:	f001 ff9c 	bl	8008bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006c7a:	200a      	movs	r0, #10
 8006c7c:	f001 ffb5 	bl	8008bea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006c80:	2200      	movs	r2, #0
 8006c82:	2100      	movs	r1, #0
 8006c84:	2028      	movs	r0, #40	; 0x28
 8006c86:	f001 ff94 	bl	8008bb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006c8a:	2028      	movs	r0, #40	; 0x28
 8006c8c:	f001 ffad 	bl	8008bea <HAL_NVIC_EnableIRQ>

}
 8006c90:	bf00      	nop
 8006c92:	3730      	adds	r7, #48	; 0x30
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	40021000 	.word	0x40021000
 8006c9c:	48001000 	.word	0x48001000
 8006ca0:	48000800 	.word	0x48000800
 8006ca4:	48000400 	.word	0x48000400
 8006ca8:	48000c00 	.word	0x48000c00

08006cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006cb0:	b672      	cpsid	i
}
 8006cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006cb4:	e7fe      	b.n	8006cb4 <Error_Handler+0x8>
	...

08006cb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cbe:	4b0f      	ldr	r3, [pc, #60]	; (8006cfc <HAL_MspInit+0x44>)
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	4a0e      	ldr	r2, [pc, #56]	; (8006cfc <HAL_MspInit+0x44>)
 8006cc4:	f043 0301 	orr.w	r3, r3, #1
 8006cc8:	6193      	str	r3, [r2, #24]
 8006cca:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <HAL_MspInit+0x44>)
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	607b      	str	r3, [r7, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006cd6:	4b09      	ldr	r3, [pc, #36]	; (8006cfc <HAL_MspInit+0x44>)
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	4a08      	ldr	r2, [pc, #32]	; (8006cfc <HAL_MspInit+0x44>)
 8006cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce0:	61d3      	str	r3, [r2, #28]
 8006ce2:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <HAL_MspInit+0x44>)
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cea:	603b      	str	r3, [r7, #0]
 8006cec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8006cee:	2006      	movs	r0, #6
 8006cf0:	f001 ff54 	bl	8008b9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006cf4:	bf00      	nop
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	40021000 	.word	0x40021000

08006d00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08c      	sub	sp, #48	; 0x30
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d08:	f107 031c 	add.w	r3, r7, #28
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	605a      	str	r2, [r3, #4]
 8006d12:	609a      	str	r2, [r3, #8]
 8006d14:	60da      	str	r2, [r3, #12]
 8006d16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d20:	d136      	bne.n	8006d90 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006d22:	4b3b      	ldr	r3, [pc, #236]	; (8006e10 <HAL_ADC_MspInit+0x110>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3301      	adds	r3, #1
 8006d28:	4a39      	ldr	r2, [pc, #228]	; (8006e10 <HAL_ADC_MspInit+0x110>)
 8006d2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006d2c:	4b38      	ldr	r3, [pc, #224]	; (8006e10 <HAL_ADC_MspInit+0x110>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d10b      	bne.n	8006d4c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006d34:	4b37      	ldr	r3, [pc, #220]	; (8006e14 <HAL_ADC_MspInit+0x114>)
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	4a36      	ldr	r2, [pc, #216]	; (8006e14 <HAL_ADC_MspInit+0x114>)
 8006d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d3e:	6153      	str	r3, [r2, #20]
 8006d40:	4b34      	ldr	r3, [pc, #208]	; (8006e14 <HAL_ADC_MspInit+0x114>)
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d4c:	4b31      	ldr	r3, [pc, #196]	; (8006e14 <HAL_ADC_MspInit+0x114>)
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	4a30      	ldr	r2, [pc, #192]	; (8006e14 <HAL_ADC_MspInit+0x114>)
 8006d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d56:	6153      	str	r3, [r2, #20]
 8006d58:	4b2e      	ldr	r3, [pc, #184]	; (8006e14 <HAL_ADC_MspInit+0x114>)
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006d64:	2302      	movs	r3, #2
 8006d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d70:	f107 031c 	add.w	r3, r7, #28
 8006d74:	4619      	mov	r1, r3
 8006d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d7a:	f001 ffc7 	bl	8008d0c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2100      	movs	r1, #0
 8006d82:	2012      	movs	r0, #18
 8006d84:	f001 ff15 	bl	8008bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8006d88:	2012      	movs	r0, #18
 8006d8a:	f001 ff2e 	bl	8008bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006d8e:	e03a      	b.n	8006e06 <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a20      	ldr	r2, [pc, #128]	; (8006e18 <HAL_ADC_MspInit+0x118>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d135      	bne.n	8006e06 <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006d9a:	4b1d      	ldr	r3, [pc, #116]	; (8006e10 <HAL_ADC_MspInit+0x110>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	4a1b      	ldr	r2, [pc, #108]	; (8006e10 <HAL_ADC_MspInit+0x110>)
 8006da2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006da4:	4b1a      	ldr	r3, [pc, #104]	; (8006e10 <HAL_ADC_MspInit+0x110>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d10b      	bne.n	8006dc4 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006dac:	4b19      	ldr	r3, [pc, #100]	; (8006e14 <HAL_ADC_MspInit+0x114>)
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	4a18      	ldr	r2, [pc, #96]	; (8006e14 <HAL_ADC_MspInit+0x114>)
 8006db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db6:	6153      	str	r3, [r2, #20]
 8006db8:	4b16      	ldr	r3, [pc, #88]	; (8006e14 <HAL_ADC_MspInit+0x114>)
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dc0:	613b      	str	r3, [r7, #16]
 8006dc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dc4:	4b13      	ldr	r3, [pc, #76]	; (8006e14 <HAL_ADC_MspInit+0x114>)
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	4a12      	ldr	r2, [pc, #72]	; (8006e14 <HAL_ADC_MspInit+0x114>)
 8006dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dce:	6153      	str	r3, [r2, #20]
 8006dd0:	4b10      	ldr	r3, [pc, #64]	; (8006e14 <HAL_ADC_MspInit+0x114>)
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006ddc:	2310      	movs	r3, #16
 8006dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006de0:	2303      	movs	r3, #3
 8006de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de4:	2300      	movs	r3, #0
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006de8:	f107 031c 	add.w	r3, r7, #28
 8006dec:	4619      	mov	r1, r3
 8006dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006df2:	f001 ff8b 	bl	8008d0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8006df6:	2200      	movs	r2, #0
 8006df8:	2100      	movs	r1, #0
 8006dfa:	2012      	movs	r0, #18
 8006dfc:	f001 fed9 	bl	8008bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8006e00:	2012      	movs	r0, #18
 8006e02:	f001 fef2 	bl	8008bea <HAL_NVIC_EnableIRQ>
}
 8006e06:	bf00      	nop
 8006e08:	3730      	adds	r7, #48	; 0x30
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	200007cc 	.word	0x200007cc
 8006e14:	40021000 	.word	0x40021000
 8006e18:	50000100 	.word	0x50000100

08006e1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08a      	sub	sp, #40	; 0x28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e24:	f107 0314 	add.w	r3, r7, #20
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	605a      	str	r2, [r3, #4]
 8006e2e:	609a      	str	r2, [r3, #8]
 8006e30:	60da      	str	r2, [r3, #12]
 8006e32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a17      	ldr	r2, [pc, #92]	; (8006e98 <HAL_I2C_MspInit+0x7c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d127      	bne.n	8006e8e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e3e:	4b17      	ldr	r3, [pc, #92]	; (8006e9c <HAL_I2C_MspInit+0x80>)
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	4a16      	ldr	r2, [pc, #88]	; (8006e9c <HAL_I2C_MspInit+0x80>)
 8006e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e48:	6153      	str	r3, [r2, #20]
 8006e4a:	4b14      	ldr	r3, [pc, #80]	; (8006e9c <HAL_I2C_MspInit+0x80>)
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e52:	613b      	str	r3, [r7, #16]
 8006e54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8006e56:	23c0      	movs	r3, #192	; 0xc0
 8006e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e5a:	2312      	movs	r3, #18
 8006e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e62:	2303      	movs	r3, #3
 8006e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e66:	2304      	movs	r3, #4
 8006e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e6a:	f107 0314 	add.w	r3, r7, #20
 8006e6e:	4619      	mov	r1, r3
 8006e70:	480b      	ldr	r0, [pc, #44]	; (8006ea0 <HAL_I2C_MspInit+0x84>)
 8006e72:	f001 ff4b 	bl	8008d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006e76:	4b09      	ldr	r3, [pc, #36]	; (8006e9c <HAL_I2C_MspInit+0x80>)
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	4a08      	ldr	r2, [pc, #32]	; (8006e9c <HAL_I2C_MspInit+0x80>)
 8006e7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e80:	61d3      	str	r3, [r2, #28]
 8006e82:	4b06      	ldr	r3, [pc, #24]	; (8006e9c <HAL_I2C_MspInit+0x80>)
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006e8e:	bf00      	nop
 8006e90:	3728      	adds	r7, #40	; 0x28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40005400 	.word	0x40005400
 8006e9c:	40021000 	.word	0x40021000
 8006ea0:	48000400 	.word	0x48000400

08006ea4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08a      	sub	sp, #40	; 0x28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eac:	f107 0314 	add.w	r3, r7, #20
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	605a      	str	r2, [r3, #4]
 8006eb6:	609a      	str	r2, [r3, #8]
 8006eb8:	60da      	str	r2, [r3, #12]
 8006eba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a17      	ldr	r2, [pc, #92]	; (8006f20 <HAL_SPI_MspInit+0x7c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d128      	bne.n	8006f18 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006ec6:	4b17      	ldr	r3, [pc, #92]	; (8006f24 <HAL_SPI_MspInit+0x80>)
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	4a16      	ldr	r2, [pc, #88]	; (8006f24 <HAL_SPI_MspInit+0x80>)
 8006ecc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ed0:	6193      	str	r3, [r2, #24]
 8006ed2:	4b14      	ldr	r3, [pc, #80]	; (8006f24 <HAL_SPI_MspInit+0x80>)
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eda:	613b      	str	r3, [r7, #16]
 8006edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ede:	4b11      	ldr	r3, [pc, #68]	; (8006f24 <HAL_SPI_MspInit+0x80>)
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	4a10      	ldr	r2, [pc, #64]	; (8006f24 <HAL_SPI_MspInit+0x80>)
 8006ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ee8:	6153      	str	r3, [r2, #20]
 8006eea:	4b0e      	ldr	r3, [pc, #56]	; (8006f24 <HAL_SPI_MspInit+0x80>)
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8006ef6:	23e0      	movs	r3, #224	; 0xe0
 8006ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006efa:	2302      	movs	r3, #2
 8006efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f02:	2303      	movs	r3, #3
 8006f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006f06:	2305      	movs	r3, #5
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f0a:	f107 0314 	add.w	r3, r7, #20
 8006f0e:	4619      	mov	r1, r3
 8006f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f14:	f001 fefa 	bl	8008d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006f18:	bf00      	nop
 8006f1a:	3728      	adds	r7, #40	; 0x28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	40013000 	.word	0x40013000
 8006f24:	40021000 	.word	0x40021000

08006f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f38:	d10c      	bne.n	8006f54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006f3a:	4b15      	ldr	r3, [pc, #84]	; (8006f90 <HAL_TIM_Base_MspInit+0x68>)
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	4a14      	ldr	r2, [pc, #80]	; (8006f90 <HAL_TIM_Base_MspInit+0x68>)
 8006f40:	f043 0301 	orr.w	r3, r3, #1
 8006f44:	61d3      	str	r3, [r2, #28]
 8006f46:	4b12      	ldr	r3, [pc, #72]	; (8006f90 <HAL_TIM_Base_MspInit+0x68>)
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006f52:	e018      	b.n	8006f86 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a0e      	ldr	r2, [pc, #56]	; (8006f94 <HAL_TIM_Base_MspInit+0x6c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d113      	bne.n	8006f86 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006f5e:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <HAL_TIM_Base_MspInit+0x68>)
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	4a0b      	ldr	r2, [pc, #44]	; (8006f90 <HAL_TIM_Base_MspInit+0x68>)
 8006f64:	f043 0302 	orr.w	r3, r3, #2
 8006f68:	61d3      	str	r3, [r2, #28]
 8006f6a:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <HAL_TIM_Base_MspInit+0x68>)
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	60bb      	str	r3, [r7, #8]
 8006f74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8006f76:	2200      	movs	r2, #0
 8006f78:	2101      	movs	r1, #1
 8006f7a:	201d      	movs	r0, #29
 8006f7c:	f001 fe19 	bl	8008bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006f80:	201d      	movs	r0, #29
 8006f82:	f001 fe32 	bl	8008bea <HAL_NVIC_EnableIRQ>
}
 8006f86:	bf00      	nop
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	40021000 	.word	0x40021000
 8006f94:	40000400 	.word	0x40000400

08006f98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b088      	sub	sp, #32
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fa0:	f107 030c 	add.w	r3, r7, #12
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	605a      	str	r2, [r3, #4]
 8006faa:	609a      	str	r2, [r3, #8]
 8006fac:	60da      	str	r2, [r3, #12]
 8006fae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb8:	d11d      	bne.n	8006ff6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fba:	4b11      	ldr	r3, [pc, #68]	; (8007000 <HAL_TIM_MspPostInit+0x68>)
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	4a10      	ldr	r2, [pc, #64]	; (8007000 <HAL_TIM_MspPostInit+0x68>)
 8006fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc4:	6153      	str	r3, [r2, #20]
 8006fc6:	4b0e      	ldr	r3, [pc, #56]	; (8007000 <HAL_TIM_MspPostInit+0x68>)
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fce:	60bb      	str	r3, [r7, #8]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fd8:	2302      	movs	r3, #2
 8006fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fe8:	f107 030c 	add.w	r3, r7, #12
 8006fec:	4619      	mov	r1, r3
 8006fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ff2:	f001 fe8b 	bl	8008d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8006ff6:	bf00      	nop
 8006ff8:	3720      	adds	r7, #32
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	40021000 	.word	0x40021000

08007004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b08a      	sub	sp, #40	; 0x28
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800700c:	f107 0314 	add.w	r3, r7, #20
 8007010:	2200      	movs	r2, #0
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	605a      	str	r2, [r3, #4]
 8007016:	609a      	str	r2, [r3, #8]
 8007018:	60da      	str	r2, [r3, #12]
 800701a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a1b      	ldr	r2, [pc, #108]	; (8007090 <HAL_UART_MspInit+0x8c>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d130      	bne.n	8007088 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007026:	4b1b      	ldr	r3, [pc, #108]	; (8007094 <HAL_UART_MspInit+0x90>)
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	4a1a      	ldr	r2, [pc, #104]	; (8007094 <HAL_UART_MspInit+0x90>)
 800702c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007030:	61d3      	str	r3, [r2, #28]
 8007032:	4b18      	ldr	r3, [pc, #96]	; (8007094 <HAL_UART_MspInit+0x90>)
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800703e:	4b15      	ldr	r3, [pc, #84]	; (8007094 <HAL_UART_MspInit+0x90>)
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	4a14      	ldr	r2, [pc, #80]	; (8007094 <HAL_UART_MspInit+0x90>)
 8007044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007048:	6153      	str	r3, [r2, #20]
 800704a:	4b12      	ldr	r3, [pc, #72]	; (8007094 <HAL_UART_MspInit+0x90>)
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007056:	230c      	movs	r3, #12
 8007058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800705a:	2302      	movs	r3, #2
 800705c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800705e:	2300      	movs	r3, #0
 8007060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007062:	2303      	movs	r3, #3
 8007064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007066:	2307      	movs	r3, #7
 8007068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800706a:	f107 0314 	add.w	r3, r7, #20
 800706e:	4619      	mov	r1, r3
 8007070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007074:	f001 fe4a 	bl	8008d0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007078:	2200      	movs	r2, #0
 800707a:	2100      	movs	r1, #0
 800707c:	2026      	movs	r0, #38	; 0x26
 800707e:	f001 fd98 	bl	8008bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007082:	2026      	movs	r0, #38	; 0x26
 8007084:	f001 fdb1 	bl	8008bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007088:	bf00      	nop
 800708a:	3728      	adds	r7, #40	; 0x28
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	40004400 	.word	0x40004400
 8007094:	40021000 	.word	0x40021000

08007098 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b08a      	sub	sp, #40	; 0x28
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070a0:	f107 0314 	add.w	r3, r7, #20
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	605a      	str	r2, [r3, #4]
 80070aa:	609a      	str	r2, [r3, #8]
 80070ac:	60da      	str	r2, [r3, #12]
 80070ae:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a18      	ldr	r2, [pc, #96]	; (8007118 <HAL_PCD_MspInit+0x80>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d129      	bne.n	800710e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070ba:	4b18      	ldr	r3, [pc, #96]	; (800711c <HAL_PCD_MspInit+0x84>)
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	4a17      	ldr	r2, [pc, #92]	; (800711c <HAL_PCD_MspInit+0x84>)
 80070c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070c4:	6153      	str	r3, [r2, #20]
 80070c6:	4b15      	ldr	r3, [pc, #84]	; (800711c <HAL_PCD_MspInit+0x84>)
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ce:	613b      	str	r3, [r7, #16]
 80070d0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80070d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80070d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070d8:	2302      	movs	r3, #2
 80070da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070dc:	2300      	movs	r3, #0
 80070de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80070e0:	2303      	movs	r3, #3
 80070e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80070e4:	230e      	movs	r3, #14
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070e8:	f107 0314 	add.w	r3, r7, #20
 80070ec:	4619      	mov	r1, r3
 80070ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070f2:	f001 fe0b 	bl	8008d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80070f6:	4b09      	ldr	r3, [pc, #36]	; (800711c <HAL_PCD_MspInit+0x84>)
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	4a08      	ldr	r2, [pc, #32]	; (800711c <HAL_PCD_MspInit+0x84>)
 80070fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007100:	61d3      	str	r3, [r2, #28]
 8007102:	4b06      	ldr	r3, [pc, #24]	; (800711c <HAL_PCD_MspInit+0x84>)
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800710e:	bf00      	nop
 8007110:	3728      	adds	r7, #40	; 0x28
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	40005c00 	.word	0x40005c00
 800711c:	40021000 	.word	0x40021000

08007120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007120:	b480      	push	{r7}
 8007122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007124:	e7fe      	b.n	8007124 <NMI_Handler+0x4>

08007126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007126:	b480      	push	{r7}
 8007128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800712a:	e7fe      	b.n	800712a <HardFault_Handler+0x4>

0800712c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007130:	e7fe      	b.n	8007130 <MemManage_Handler+0x4>

08007132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007132:	b480      	push	{r7}
 8007134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007136:	e7fe      	b.n	8007136 <BusFault_Handler+0x4>

08007138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800713c:	e7fe      	b.n	800713c <UsageFault_Handler+0x4>

0800713e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800713e:	b480      	push	{r7}
 8007140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007142:	bf00      	nop
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007150:	bf00      	nop
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800715a:	b480      	push	{r7}
 800715c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800715e:	bf00      	nop
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800716c:	f000 f90a 	bl	8007384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Update_Melody();
 8007170:	f7fa f942 	bl	80013f8 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 8007174:	bf00      	nop
 8007176:	bd80      	pop	{r7, pc}

08007178 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800717c:	2001      	movs	r0, #1
 800717e:	f001 ff89 	bl	8009094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007182:	bf00      	nop
 8007184:	bd80      	pop	{r7, pc}

08007186 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800718a:	2002      	movs	r0, #2
 800718c:	f001 ff82 	bl	8009094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007190:	bf00      	nop
 8007192:	bd80      	pop	{r7, pc}

08007194 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8007198:	2004      	movs	r0, #4
 800719a:	f001 ff7b 	bl	8009094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 800719e:	bf00      	nop
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80071a6:	2008      	movs	r0, #8
 80071a8:	f001 ff74 	bl	8009094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80071ac:	bf00      	nop
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80071b4:	2010      	movs	r0, #16
 80071b6:	f001 ff6d 	bl	8009094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80071ba:	bf00      	nop
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80071c4:	4803      	ldr	r0, [pc, #12]	; (80071d4 <ADC1_2_IRQHandler+0x14>)
 80071c6:	f000 fc63 	bl	8007a90 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80071ca:	4803      	ldr	r0, [pc, #12]	; (80071d8 <ADC1_2_IRQHandler+0x18>)
 80071cc:	f000 fc60 	bl	8007a90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80071d0:	bf00      	nop
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	20000114 	.word	0x20000114
 80071d8:	20000164 	.word	0x20000164

080071dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80071e0:	4802      	ldr	r0, [pc, #8]	; (80071ec <TIM3_IRQHandler+0x10>)
 80071e2:	f004 f859 	bl	800b298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80071e6:	bf00      	nop
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	200002b8 	.word	0x200002b8

080071f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80071f4:	4802      	ldr	r0, [pc, #8]	; (8007200 <USART2_IRQHandler+0x10>)
 80071f6:	f005 f955 	bl	800c4a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80071fa:	bf00      	nop
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	20000304 	.word	0x20000304

08007204 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007208:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800720c:	f001 ff42 	bl	8009094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007210:	bf00      	nop
 8007212:	bd80      	pop	{r7, pc}

08007214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800721c:	4a14      	ldr	r2, [pc, #80]	; (8007270 <_sbrk+0x5c>)
 800721e:	4b15      	ldr	r3, [pc, #84]	; (8007274 <_sbrk+0x60>)
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007228:	4b13      	ldr	r3, [pc, #76]	; (8007278 <_sbrk+0x64>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d102      	bne.n	8007236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007230:	4b11      	ldr	r3, [pc, #68]	; (8007278 <_sbrk+0x64>)
 8007232:	4a12      	ldr	r2, [pc, #72]	; (800727c <_sbrk+0x68>)
 8007234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007236:	4b10      	ldr	r3, [pc, #64]	; (8007278 <_sbrk+0x64>)
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4413      	add	r3, r2
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	429a      	cmp	r2, r3
 8007242:	d207      	bcs.n	8007254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007244:	f006 fb00 	bl	800d848 <__errno>
 8007248:	4603      	mov	r3, r0
 800724a:	220c      	movs	r2, #12
 800724c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800724e:	f04f 33ff 	mov.w	r3, #4294967295
 8007252:	e009      	b.n	8007268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007254:	4b08      	ldr	r3, [pc, #32]	; (8007278 <_sbrk+0x64>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800725a:	4b07      	ldr	r3, [pc, #28]	; (8007278 <_sbrk+0x64>)
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4413      	add	r3, r2
 8007262:	4a05      	ldr	r2, [pc, #20]	; (8007278 <_sbrk+0x64>)
 8007264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007266:	68fb      	ldr	r3, [r7, #12]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	2000a000 	.word	0x2000a000
 8007274:	00000400 	.word	0x00000400
 8007278:	200007d0 	.word	0x200007d0
 800727c:	200007e8 	.word	0x200007e8

08007280 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007284:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <SystemInit+0x20>)
 8007286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728a:	4a05      	ldr	r2, [pc, #20]	; (80072a0 <SystemInit+0x20>)
 800728c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007294:	bf00      	nop
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	e000ed00 	.word	0xe000ed00

080072a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80072a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80072dc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80072a8:	f7ff ffea 	bl	8007280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80072ac:	480c      	ldr	r0, [pc, #48]	; (80072e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80072ae:	490d      	ldr	r1, [pc, #52]	; (80072e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80072b0:	4a0d      	ldr	r2, [pc, #52]	; (80072e8 <LoopForever+0xe>)
  movs r3, #0
 80072b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80072b4:	e002      	b.n	80072bc <LoopCopyDataInit>

080072b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80072b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80072b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80072ba:	3304      	adds	r3, #4

080072bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80072bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80072be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80072c0:	d3f9      	bcc.n	80072b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80072c2:	4a0a      	ldr	r2, [pc, #40]	; (80072ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80072c4:	4c0a      	ldr	r4, [pc, #40]	; (80072f0 <LoopForever+0x16>)
  movs r3, #0
 80072c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80072c8:	e001      	b.n	80072ce <LoopFillZerobss>

080072ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80072ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80072cc:	3204      	adds	r2, #4

080072ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80072ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80072d0:	d3fb      	bcc.n	80072ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80072d2:	f006 fabf 	bl	800d854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80072d6:	f7ff f87b 	bl	80063d0 <main>

080072da <LoopForever>:

LoopForever:
    b LoopForever
 80072da:	e7fe      	b.n	80072da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80072dc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80072e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80072e4:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80072e8:	0800ec94 	.word	0x0800ec94
  ldr r2, =_sbss
 80072ec:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80072f0:	200007e8 	.word	0x200007e8

080072f4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80072f4:	e7fe      	b.n	80072f4 <ADC3_IRQHandler>
	...

080072f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80072fc:	4b08      	ldr	r3, [pc, #32]	; (8007320 <HAL_Init+0x28>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a07      	ldr	r2, [pc, #28]	; (8007320 <HAL_Init+0x28>)
 8007302:	f043 0310 	orr.w	r3, r3, #16
 8007306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007308:	2003      	movs	r0, #3
 800730a:	f001 fc47 	bl	8008b9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800730e:	2000      	movs	r0, #0
 8007310:	f000 f808 	bl	8007324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007314:	f7ff fcd0 	bl	8006cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	40022000 	.word	0x40022000

08007324 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800732c:	4b12      	ldr	r3, [pc, #72]	; (8007378 <HAL_InitTick+0x54>)
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	4b12      	ldr	r3, [pc, #72]	; (800737c <HAL_InitTick+0x58>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	4619      	mov	r1, r3
 8007336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800733a:	fbb3 f3f1 	udiv	r3, r3, r1
 800733e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007342:	4618      	mov	r0, r3
 8007344:	f001 fc5f 	bl	8008c06 <HAL_SYSTICK_Config>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e00e      	b.n	8007370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b0f      	cmp	r3, #15
 8007356:	d80a      	bhi.n	800736e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007358:	2200      	movs	r2, #0
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	f04f 30ff 	mov.w	r0, #4294967295
 8007360:	f001 fc27 	bl	8008bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007364:	4a06      	ldr	r2, [pc, #24]	; (8007380 <HAL_InitTick+0x5c>)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	e000      	b.n	8007370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
}
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	20000064 	.word	0x20000064
 800737c:	2000006c 	.word	0x2000006c
 8007380:	20000068 	.word	0x20000068

08007384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007388:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <HAL_IncTick+0x20>)
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
 800738e:	4b06      	ldr	r3, [pc, #24]	; (80073a8 <HAL_IncTick+0x24>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4413      	add	r3, r2
 8007394:	4a04      	ldr	r2, [pc, #16]	; (80073a8 <HAL_IncTick+0x24>)
 8007396:	6013      	str	r3, [r2, #0]
}
 8007398:	bf00      	nop
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	2000006c 	.word	0x2000006c
 80073a8:	200007d4 	.word	0x200007d4

080073ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80073b0:	4b03      	ldr	r3, [pc, #12]	; (80073c0 <HAL_GetTick+0x14>)
 80073b2:	681b      	ldr	r3, [r3, #0]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	200007d4 	.word	0x200007d4

080073c4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80073cc:	f7ff ffee 	bl	80073ac <HAL_GetTick>
 80073d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073dc:	d005      	beq.n	80073ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80073de:	4b0a      	ldr	r3, [pc, #40]	; (8007408 <HAL_Delay+0x44>)
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80073ea:	bf00      	nop
 80073ec:	f7ff ffde 	bl	80073ac <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d8f7      	bhi.n	80073ec <HAL_Delay+0x28>
  {
  }
}
 80073fc:	bf00      	nop
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	2000006c 	.word	0x2000006c

0800740c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b09a      	sub	sp, #104	; 0x68
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e1c9      	b.n	80077e8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	f003 0310 	and.w	r3, r3, #16
 8007462:	2b00      	cmp	r3, #0
 8007464:	d176      	bne.n	8007554 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d152      	bne.n	8007514 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7ff fc39 	bl	8006d00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d13b      	bne.n	8007514 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 fa47 	bl	8008930 <ADC_Disable>
 80074a2:	4603      	mov	r3, r0
 80074a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ac:	f003 0310 	and.w	r3, r3, #16
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d12f      	bne.n	8007514 <HAL_ADC_Init+0xe0>
 80074b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d12b      	bne.n	8007514 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80074c4:	f023 0302 	bic.w	r3, r3, #2
 80074c8:	f043 0202 	orr.w	r2, r3, #2
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80074de:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80074ee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80074f0:	4b86      	ldr	r3, [pc, #536]	; (800770c <HAL_ADC_Init+0x2d8>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a86      	ldr	r2, [pc, #536]	; (8007710 <HAL_ADC_Init+0x2dc>)
 80074f6:	fba2 2303 	umull	r2, r3, r2, r3
 80074fa:	0c9a      	lsrs	r2, r3, #18
 80074fc:	4613      	mov	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4413      	add	r3, r2
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007506:	e002      	b.n	800750e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	3b01      	subs	r3, #1
 800750c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1f9      	bne.n	8007508 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d007      	beq.n	8007532 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800752c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007530:	d110      	bne.n	8007554 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	f023 0312 	bic.w	r3, r3, #18
 800753a:	f043 0210 	orr.w	r2, r3, #16
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007546:	f043 0201 	orr.w	r2, r3, #1
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007558:	f003 0310 	and.w	r3, r3, #16
 800755c:	2b00      	cmp	r3, #0
 800755e:	f040 8136 	bne.w	80077ce <HAL_ADC_Init+0x39a>
 8007562:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007566:	2b00      	cmp	r3, #0
 8007568:	f040 8131 	bne.w	80077ce <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8007576:	2b00      	cmp	r3, #0
 8007578:	f040 8129 	bne.w	80077ce <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007584:	f043 0202 	orr.w	r2, r3, #2
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007594:	d004      	beq.n	80075a0 <HAL_ADC_Init+0x16c>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a5e      	ldr	r2, [pc, #376]	; (8007714 <HAL_ADC_Init+0x2e0>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d101      	bne.n	80075a4 <HAL_ADC_Init+0x170>
 80075a0:	4b5d      	ldr	r3, [pc, #372]	; (8007718 <HAL_ADC_Init+0x2e4>)
 80075a2:	e000      	b.n	80075a6 <HAL_ADC_Init+0x172>
 80075a4:	4b5d      	ldr	r3, [pc, #372]	; (800771c <HAL_ADC_Init+0x2e8>)
 80075a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075b0:	d102      	bne.n	80075b8 <HAL_ADC_Init+0x184>
 80075b2:	4b58      	ldr	r3, [pc, #352]	; (8007714 <HAL_ADC_Init+0x2e0>)
 80075b4:	60fb      	str	r3, [r7, #12]
 80075b6:	e01a      	b.n	80075ee <HAL_ADC_Init+0x1ba>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a55      	ldr	r2, [pc, #340]	; (8007714 <HAL_ADC_Init+0x2e0>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d103      	bne.n	80075ca <HAL_ADC_Init+0x196>
 80075c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	e011      	b.n	80075ee <HAL_ADC_Init+0x1ba>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a54      	ldr	r2, [pc, #336]	; (8007720 <HAL_ADC_Init+0x2ec>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d102      	bne.n	80075da <HAL_ADC_Init+0x1a6>
 80075d4:	4b53      	ldr	r3, [pc, #332]	; (8007724 <HAL_ADC_Init+0x2f0>)
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	e009      	b.n	80075ee <HAL_ADC_Init+0x1ba>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a51      	ldr	r2, [pc, #324]	; (8007724 <HAL_ADC_Init+0x2f0>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d102      	bne.n	80075ea <HAL_ADC_Init+0x1b6>
 80075e4:	4b4e      	ldr	r3, [pc, #312]	; (8007720 <HAL_ADC_Init+0x2ec>)
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	e001      	b.n	80075ee <HAL_ADC_Init+0x1ba>
 80075ea:	2300      	movs	r3, #0
 80075ec:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f003 0303 	and.w	r3, r3, #3
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d108      	bne.n	800760e <HAL_ADC_Init+0x1da>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b01      	cmp	r3, #1
 8007608:	d101      	bne.n	800760e <HAL_ADC_Init+0x1da>
 800760a:	2301      	movs	r3, #1
 800760c:	e000      	b.n	8007610 <HAL_ADC_Init+0x1dc>
 800760e:	2300      	movs	r3, #0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d11c      	bne.n	800764e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8007614:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8007616:	2b00      	cmp	r3, #0
 8007618:	d010      	beq.n	800763c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 0303 	and.w	r3, r3, #3
 8007622:	2b01      	cmp	r3, #1
 8007624:	d107      	bne.n	8007636 <HAL_ADC_Init+0x202>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b01      	cmp	r3, #1
 8007630:	d101      	bne.n	8007636 <HAL_ADC_Init+0x202>
 8007632:	2301      	movs	r3, #1
 8007634:	e000      	b.n	8007638 <HAL_ADC_Init+0x204>
 8007636:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8007638:	2b00      	cmp	r3, #0
 800763a:	d108      	bne.n	800764e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800763c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	431a      	orrs	r2, r3
 800764a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800764c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	7e5b      	ldrb	r3, [r3, #25]
 8007652:	035b      	lsls	r3, r3, #13
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007658:	2a01      	cmp	r2, #1
 800765a:	d002      	beq.n	8007662 <HAL_ADC_Init+0x22e>
 800765c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007660:	e000      	b.n	8007664 <HAL_ADC_Init+0x230>
 8007662:	2200      	movs	r2, #0
 8007664:	431a      	orrs	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	431a      	orrs	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	4313      	orrs	r3, r2
 8007672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007674:	4313      	orrs	r3, r2
 8007676:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d11b      	bne.n	80076ba <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	7e5b      	ldrb	r3, [r3, #25]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d109      	bne.n	800769e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	3b01      	subs	r3, #1
 8007690:	045a      	lsls	r2, r3, #17
 8007692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007694:	4313      	orrs	r3, r2
 8007696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800769a:	663b      	str	r3, [r7, #96]	; 0x60
 800769c:	e00d      	b.n	80076ba <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80076a6:	f043 0220 	orr.w	r2, r3, #32
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b2:	f043 0201 	orr.w	r2, r3, #1
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d03a      	beq.n	8007738 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a16      	ldr	r2, [pc, #88]	; (8007720 <HAL_ADC_Init+0x2ec>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d004      	beq.n	80076d6 <HAL_ADC_Init+0x2a2>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a14      	ldr	r2, [pc, #80]	; (8007724 <HAL_ADC_Init+0x2f0>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d128      	bne.n	8007728 <HAL_ADC_Init+0x2f4>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80076de:	d012      	beq.n	8007706 <HAL_ADC_Init+0x2d2>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076e8:	d00a      	beq.n	8007700 <HAL_ADC_Init+0x2cc>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ee:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80076f2:	d002      	beq.n	80076fa <HAL_ADC_Init+0x2c6>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f8:	e018      	b.n	800772c <HAL_ADC_Init+0x2f8>
 80076fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076fe:	e015      	b.n	800772c <HAL_ADC_Init+0x2f8>
 8007700:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8007704:	e012      	b.n	800772c <HAL_ADC_Init+0x2f8>
 8007706:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800770a:	e00f      	b.n	800772c <HAL_ADC_Init+0x2f8>
 800770c:	20000064 	.word	0x20000064
 8007710:	431bde83 	.word	0x431bde83
 8007714:	50000100 	.word	0x50000100
 8007718:	50000300 	.word	0x50000300
 800771c:	50000700 	.word	0x50000700
 8007720:	50000400 	.word	0x50000400
 8007724:	50000500 	.word	0x50000500
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007730:	4313      	orrs	r3, r2
 8007732:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007734:	4313      	orrs	r3, r2
 8007736:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f003 030c 	and.w	r3, r3, #12
 8007742:	2b00      	cmp	r3, #0
 8007744:	d114      	bne.n	8007770 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	6812      	ldr	r2, [r2, #0]
 8007750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007754:	f023 0302 	bic.w	r3, r3, #2
 8007758:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	7e1b      	ldrb	r3, [r3, #24]
 800775e:	039a      	lsls	r2, r3, #14
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007766:	005b      	lsls	r3, r3, #1
 8007768:	4313      	orrs	r3, r2
 800776a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800776c:	4313      	orrs	r3, r2
 800776e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	4b1e      	ldr	r3, [pc, #120]	; (80077f0 <HAL_ADC_Init+0x3bc>)
 8007778:	4013      	ands	r3, r2
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007780:	430b      	orrs	r3, r1
 8007782:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d10c      	bne.n	80077a6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007792:	f023 010f 	bic.w	r1, r3, #15
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	1e5a      	subs	r2, r3, #1
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	631a      	str	r2, [r3, #48]	; 0x30
 80077a4:	e007      	b.n	80077b6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f022 020f 	bic.w	r2, r2, #15
 80077b4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c0:	f023 0303 	bic.w	r3, r3, #3
 80077c4:	f043 0201 	orr.w	r2, r3, #1
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	641a      	str	r2, [r3, #64]	; 0x40
 80077cc:	e00a      	b.n	80077e4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	f023 0312 	bic.w	r3, r3, #18
 80077d6:	f043 0210 	orr.w	r2, r3, #16
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80077de:	2301      	movs	r3, #1
 80077e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80077e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3768      	adds	r7, #104	; 0x68
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	fff0c007 	.word	0xfff0c007

080077f4 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f003 0304 	and.w	r3, r3, #4
 800780a:	2b00      	cmp	r3, #0
 800780c:	f040 8123 	bne.w	8007a56 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007816:	2b01      	cmp	r3, #1
 8007818:	d101      	bne.n	800781e <HAL_ADC_Start_IT+0x2a>
 800781a:	2302      	movs	r3, #2
 800781c:	e11e      	b.n	8007a5c <HAL_ADC_Start_IT+0x268>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 f81e 	bl	8008868 <ADC_Enable>
 800782c:	4603      	mov	r3, r0
 800782e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f040 810a 	bne.w	8007a4c <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007840:	f023 0301 	bic.w	r3, r3, #1
 8007844:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007854:	d004      	beq.n	8007860 <HAL_ADC_Start_IT+0x6c>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a82      	ldr	r2, [pc, #520]	; (8007a64 <HAL_ADC_Start_IT+0x270>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d106      	bne.n	800786e <HAL_ADC_Start_IT+0x7a>
 8007860:	4b81      	ldr	r3, [pc, #516]	; (8007a68 <HAL_ADC_Start_IT+0x274>)
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f003 031f 	and.w	r3, r3, #31
 8007868:	2b00      	cmp	r3, #0
 800786a:	d010      	beq.n	800788e <HAL_ADC_Start_IT+0x9a>
 800786c:	e005      	b.n	800787a <HAL_ADC_Start_IT+0x86>
 800786e:	4b7f      	ldr	r3, [pc, #508]	; (8007a6c <HAL_ADC_Start_IT+0x278>)
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f003 031f 	and.w	r3, r3, #31
 8007876:	2b00      	cmp	r3, #0
 8007878:	d009      	beq.n	800788e <HAL_ADC_Start_IT+0x9a>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007882:	d004      	beq.n	800788e <HAL_ADC_Start_IT+0x9a>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a79      	ldr	r2, [pc, #484]	; (8007a70 <HAL_ADC_Start_IT+0x27c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d115      	bne.n	80078ba <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d036      	beq.n	8007916 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80078b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80078b8:	e02d      	b.n	8007916 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078ce:	d004      	beq.n	80078da <HAL_ADC_Start_IT+0xe6>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a63      	ldr	r2, [pc, #396]	; (8007a64 <HAL_ADC_Start_IT+0x270>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d10a      	bne.n	80078f0 <HAL_ADC_Start_IT+0xfc>
 80078da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	bf14      	ite	ne
 80078e8:	2301      	movne	r3, #1
 80078ea:	2300      	moveq	r3, #0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	e008      	b.n	8007902 <HAL_ADC_Start_IT+0x10e>
 80078f0:	4b5f      	ldr	r3, [pc, #380]	; (8007a70 <HAL_ADC_Start_IT+0x27c>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	bf14      	ite	ne
 80078fc:	2301      	movne	r3, #1
 80078fe:	2300      	moveq	r3, #0
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d007      	beq.n	8007916 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800790e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800791e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007922:	d106      	bne.n	8007932 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007928:	f023 0206 	bic.w	r2, r3, #6
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	645a      	str	r2, [r3, #68]	; 0x44
 8007930:	e002      	b.n	8007938 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	221c      	movs	r2, #28
 8007946:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	695b      	ldr	r3, [r3, #20]
 800794c:	2b08      	cmp	r3, #8
 800794e:	d110      	bne.n	8007972 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 0204 	bic.w	r2, r2, #4
 800795e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0208 	orr.w	r2, r2, #8
 800796e:	605a      	str	r2, [r3, #4]
          break;
 8007970:	e008      	b.n	8007984 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f042 020c 	orr.w	r2, r2, #12
 8007980:	605a      	str	r2, [r3, #4]
          break;
 8007982:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007988:	2b01      	cmp	r3, #1
 800798a:	d107      	bne.n	800799c <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0210 	bic.w	r2, r2, #16
 800799a:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079a4:	d004      	beq.n	80079b0 <HAL_ADC_Start_IT+0x1bc>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a2e      	ldr	r2, [pc, #184]	; (8007a64 <HAL_ADC_Start_IT+0x270>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d106      	bne.n	80079be <HAL_ADC_Start_IT+0x1ca>
 80079b0:	4b2d      	ldr	r3, [pc, #180]	; (8007a68 <HAL_ADC_Start_IT+0x274>)
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f003 031f 	and.w	r3, r3, #31
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d03e      	beq.n	8007a3a <HAL_ADC_Start_IT+0x246>
 80079bc:	e005      	b.n	80079ca <HAL_ADC_Start_IT+0x1d6>
 80079be:	4b2b      	ldr	r3, [pc, #172]	; (8007a6c <HAL_ADC_Start_IT+0x278>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f003 031f 	and.w	r3, r3, #31
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d037      	beq.n	8007a3a <HAL_ADC_Start_IT+0x246>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079d2:	d004      	beq.n	80079de <HAL_ADC_Start_IT+0x1ea>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a22      	ldr	r2, [pc, #136]	; (8007a64 <HAL_ADC_Start_IT+0x270>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d106      	bne.n	80079ec <HAL_ADC_Start_IT+0x1f8>
 80079de:	4b22      	ldr	r3, [pc, #136]	; (8007a68 <HAL_ADC_Start_IT+0x274>)
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f003 031f 	and.w	r3, r3, #31
 80079e6:	2b05      	cmp	r3, #5
 80079e8:	d027      	beq.n	8007a3a <HAL_ADC_Start_IT+0x246>
 80079ea:	e005      	b.n	80079f8 <HAL_ADC_Start_IT+0x204>
 80079ec:	4b1f      	ldr	r3, [pc, #124]	; (8007a6c <HAL_ADC_Start_IT+0x278>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f003 031f 	and.w	r3, r3, #31
 80079f4:	2b05      	cmp	r3, #5
 80079f6:	d020      	beq.n	8007a3a <HAL_ADC_Start_IT+0x246>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a00:	d004      	beq.n	8007a0c <HAL_ADC_Start_IT+0x218>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a17      	ldr	r2, [pc, #92]	; (8007a64 <HAL_ADC_Start_IT+0x270>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d106      	bne.n	8007a1a <HAL_ADC_Start_IT+0x226>
 8007a0c:	4b16      	ldr	r3, [pc, #88]	; (8007a68 <HAL_ADC_Start_IT+0x274>)
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f003 031f 	and.w	r3, r3, #31
 8007a14:	2b09      	cmp	r3, #9
 8007a16:	d010      	beq.n	8007a3a <HAL_ADC_Start_IT+0x246>
 8007a18:	e005      	b.n	8007a26 <HAL_ADC_Start_IT+0x232>
 8007a1a:	4b14      	ldr	r3, [pc, #80]	; (8007a6c <HAL_ADC_Start_IT+0x278>)
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f003 031f 	and.w	r3, r3, #31
 8007a22:	2b09      	cmp	r3, #9
 8007a24:	d009      	beq.n	8007a3a <HAL_ADC_Start_IT+0x246>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a2e:	d004      	beq.n	8007a3a <HAL_ADC_Start_IT+0x246>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a0e      	ldr	r2, [pc, #56]	; (8007a70 <HAL_ADC_Start_IT+0x27c>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d10f      	bne.n	8007a5a <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0204 	orr.w	r2, r2, #4
 8007a48:	609a      	str	r2, [r3, #8]
 8007a4a:	e006      	b.n	8007a5a <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007a54:	e001      	b.n	8007a5a <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007a56:	2302      	movs	r3, #2
 8007a58:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	50000100 	.word	0x50000100
 8007a68:	50000300 	.word	0x50000300
 8007a6c:	50000700 	.word	0x50000700
 8007a70:	50000400 	.word	0x50000400

08007a74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
	...

08007a90 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8007a98:	2300      	movs	r3, #0
 8007a9a:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f003 0304 	and.w	r3, r3, #4
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d004      	beq.n	8007ac8 <HAL_ADC_IRQHandler+0x38>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f003 0304 	and.w	r3, r3, #4
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10b      	bne.n	8007ae0 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 80bc 	beq.w	8007c4c <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 80b6 	beq.w	8007c4c <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae4:	f003 0310 	and.w	r3, r3, #16
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d105      	bne.n	8007af8 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b00:	d004      	beq.n	8007b0c <HAL_ADC_IRQHandler+0x7c>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a90      	ldr	r2, [pc, #576]	; (8007d48 <HAL_ADC_IRQHandler+0x2b8>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d106      	bne.n	8007b1a <HAL_ADC_IRQHandler+0x8a>
 8007b0c:	4b8f      	ldr	r3, [pc, #572]	; (8007d4c <HAL_ADC_IRQHandler+0x2bc>)
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f003 031f 	and.w	r3, r3, #31
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d03e      	beq.n	8007b96 <HAL_ADC_IRQHandler+0x106>
 8007b18:	e005      	b.n	8007b26 <HAL_ADC_IRQHandler+0x96>
 8007b1a:	4b8d      	ldr	r3, [pc, #564]	; (8007d50 <HAL_ADC_IRQHandler+0x2c0>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 031f 	and.w	r3, r3, #31
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d037      	beq.n	8007b96 <HAL_ADC_IRQHandler+0x106>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b2e:	d004      	beq.n	8007b3a <HAL_ADC_IRQHandler+0xaa>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a84      	ldr	r2, [pc, #528]	; (8007d48 <HAL_ADC_IRQHandler+0x2b8>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d106      	bne.n	8007b48 <HAL_ADC_IRQHandler+0xb8>
 8007b3a:	4b84      	ldr	r3, [pc, #528]	; (8007d4c <HAL_ADC_IRQHandler+0x2bc>)
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 031f 	and.w	r3, r3, #31
 8007b42:	2b05      	cmp	r3, #5
 8007b44:	d027      	beq.n	8007b96 <HAL_ADC_IRQHandler+0x106>
 8007b46:	e005      	b.n	8007b54 <HAL_ADC_IRQHandler+0xc4>
 8007b48:	4b81      	ldr	r3, [pc, #516]	; (8007d50 <HAL_ADC_IRQHandler+0x2c0>)
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f003 031f 	and.w	r3, r3, #31
 8007b50:	2b05      	cmp	r3, #5
 8007b52:	d020      	beq.n	8007b96 <HAL_ADC_IRQHandler+0x106>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b5c:	d004      	beq.n	8007b68 <HAL_ADC_IRQHandler+0xd8>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a79      	ldr	r2, [pc, #484]	; (8007d48 <HAL_ADC_IRQHandler+0x2b8>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d106      	bne.n	8007b76 <HAL_ADC_IRQHandler+0xe6>
 8007b68:	4b78      	ldr	r3, [pc, #480]	; (8007d4c <HAL_ADC_IRQHandler+0x2bc>)
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f003 031f 	and.w	r3, r3, #31
 8007b70:	2b09      	cmp	r3, #9
 8007b72:	d010      	beq.n	8007b96 <HAL_ADC_IRQHandler+0x106>
 8007b74:	e005      	b.n	8007b82 <HAL_ADC_IRQHandler+0xf2>
 8007b76:	4b76      	ldr	r3, [pc, #472]	; (8007d50 <HAL_ADC_IRQHandler+0x2c0>)
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f003 031f 	and.w	r3, r3, #31
 8007b7e:	2b09      	cmp	r3, #9
 8007b80:	d009      	beq.n	8007b96 <HAL_ADC_IRQHandler+0x106>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b8a:	d004      	beq.n	8007b96 <HAL_ADC_IRQHandler+0x106>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a70      	ldr	r2, [pc, #448]	; (8007d54 <HAL_ADC_IRQHandler+0x2c4>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d104      	bne.n	8007ba0 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	61bb      	str	r3, [r7, #24]
 8007b9e:	e00f      	b.n	8007bc0 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ba8:	d004      	beq.n	8007bb4 <HAL_ADC_IRQHandler+0x124>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a66      	ldr	r2, [pc, #408]	; (8007d48 <HAL_ADC_IRQHandler+0x2b8>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d102      	bne.n	8007bba <HAL_ADC_IRQHandler+0x12a>
 8007bb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007bb8:	e000      	b.n	8007bbc <HAL_ADC_IRQHandler+0x12c>
 8007bba:	4b66      	ldr	r3, [pc, #408]	; (8007d54 <HAL_ADC_IRQHandler+0x2c4>)
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d137      	bne.n	8007c3e <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d132      	bne.n	8007c3e <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f003 0308 	and.w	r3, r3, #8
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d02d      	beq.n	8007c3e <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f003 0304 	and.w	r3, r3, #4
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d11a      	bne.n	8007c26 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 020c 	bic.w	r2, r2, #12
 8007bfe:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d112      	bne.n	8007c3e <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1c:	f043 0201 	orr.w	r2, r3, #1
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	641a      	str	r2, [r3, #64]	; 0x40
 8007c24:	e00b      	b.n	8007c3e <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2a:	f043 0210 	orr.w	r2, r3, #16
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c36:	f043 0201 	orr.w	r2, r3, #1
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7fd fa58 	bl	80050f4 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	220c      	movs	r2, #12
 8007c4a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d004      	beq.n	8007c60 <HAL_ADC_IRQHandler+0x1d0>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f003 0320 	and.w	r3, r3, #32
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10b      	bne.n	8007c78 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 8138 	beq.w	8007edc <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 8132 	beq.w	8007edc <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c8c:	d004      	beq.n	8007c98 <HAL_ADC_IRQHandler+0x208>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a2d      	ldr	r2, [pc, #180]	; (8007d48 <HAL_ADC_IRQHandler+0x2b8>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d106      	bne.n	8007ca6 <HAL_ADC_IRQHandler+0x216>
 8007c98:	4b2c      	ldr	r3, [pc, #176]	; (8007d4c <HAL_ADC_IRQHandler+0x2bc>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f003 031f 	and.w	r3, r3, #31
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d03e      	beq.n	8007d22 <HAL_ADC_IRQHandler+0x292>
 8007ca4:	e005      	b.n	8007cb2 <HAL_ADC_IRQHandler+0x222>
 8007ca6:	4b2a      	ldr	r3, [pc, #168]	; (8007d50 <HAL_ADC_IRQHandler+0x2c0>)
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 031f 	and.w	r3, r3, #31
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d037      	beq.n	8007d22 <HAL_ADC_IRQHandler+0x292>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cba:	d004      	beq.n	8007cc6 <HAL_ADC_IRQHandler+0x236>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a21      	ldr	r2, [pc, #132]	; (8007d48 <HAL_ADC_IRQHandler+0x2b8>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d106      	bne.n	8007cd4 <HAL_ADC_IRQHandler+0x244>
 8007cc6:	4b21      	ldr	r3, [pc, #132]	; (8007d4c <HAL_ADC_IRQHandler+0x2bc>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f003 031f 	and.w	r3, r3, #31
 8007cce:	2b05      	cmp	r3, #5
 8007cd0:	d027      	beq.n	8007d22 <HAL_ADC_IRQHandler+0x292>
 8007cd2:	e005      	b.n	8007ce0 <HAL_ADC_IRQHandler+0x250>
 8007cd4:	4b1e      	ldr	r3, [pc, #120]	; (8007d50 <HAL_ADC_IRQHandler+0x2c0>)
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f003 031f 	and.w	r3, r3, #31
 8007cdc:	2b05      	cmp	r3, #5
 8007cde:	d020      	beq.n	8007d22 <HAL_ADC_IRQHandler+0x292>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ce8:	d004      	beq.n	8007cf4 <HAL_ADC_IRQHandler+0x264>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a16      	ldr	r2, [pc, #88]	; (8007d48 <HAL_ADC_IRQHandler+0x2b8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d106      	bne.n	8007d02 <HAL_ADC_IRQHandler+0x272>
 8007cf4:	4b15      	ldr	r3, [pc, #84]	; (8007d4c <HAL_ADC_IRQHandler+0x2bc>)
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f003 031f 	and.w	r3, r3, #31
 8007cfc:	2b09      	cmp	r3, #9
 8007cfe:	d010      	beq.n	8007d22 <HAL_ADC_IRQHandler+0x292>
 8007d00:	e005      	b.n	8007d0e <HAL_ADC_IRQHandler+0x27e>
 8007d02:	4b13      	ldr	r3, [pc, #76]	; (8007d50 <HAL_ADC_IRQHandler+0x2c0>)
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f003 031f 	and.w	r3, r3, #31
 8007d0a:	2b09      	cmp	r3, #9
 8007d0c:	d009      	beq.n	8007d22 <HAL_ADC_IRQHandler+0x292>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d16:	d004      	beq.n	8007d22 <HAL_ADC_IRQHandler+0x292>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a0d      	ldr	r2, [pc, #52]	; (8007d54 <HAL_ADC_IRQHandler+0x2c4>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d104      	bne.n	8007d2c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	61bb      	str	r3, [r7, #24]
 8007d2a:	e018      	b.n	8007d5e <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d34:	d004      	beq.n	8007d40 <HAL_ADC_IRQHandler+0x2b0>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a03      	ldr	r2, [pc, #12]	; (8007d48 <HAL_ADC_IRQHandler+0x2b8>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d10b      	bne.n	8007d58 <HAL_ADC_IRQHandler+0x2c8>
 8007d40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007d44:	e009      	b.n	8007d5a <HAL_ADC_IRQHandler+0x2ca>
 8007d46:	bf00      	nop
 8007d48:	50000100 	.word	0x50000100
 8007d4c:	50000300 	.word	0x50000300
 8007d50:	50000700 	.word	0x50000700
 8007d54:	50000400 	.word	0x50000400
 8007d58:	4b92      	ldr	r3, [pc, #584]	; (8007fa4 <HAL_ADC_IRQHandler+0x514>)
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f040 80b0 	bne.w	8007ece <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00d      	beq.n	8007d94 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f040 80a3 	bne.w	8007ece <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f040 809d 	bne.w	8007ece <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 8097 	beq.w	8007ece <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007da8:	d004      	beq.n	8007db4 <HAL_ADC_IRQHandler+0x324>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a7e      	ldr	r2, [pc, #504]	; (8007fa8 <HAL_ADC_IRQHandler+0x518>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d106      	bne.n	8007dc2 <HAL_ADC_IRQHandler+0x332>
 8007db4:	4b7d      	ldr	r3, [pc, #500]	; (8007fac <HAL_ADC_IRQHandler+0x51c>)
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f003 031f 	and.w	r3, r3, #31
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d03e      	beq.n	8007e3e <HAL_ADC_IRQHandler+0x3ae>
 8007dc0:	e005      	b.n	8007dce <HAL_ADC_IRQHandler+0x33e>
 8007dc2:	4b7b      	ldr	r3, [pc, #492]	; (8007fb0 <HAL_ADC_IRQHandler+0x520>)
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f003 031f 	and.w	r3, r3, #31
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d037      	beq.n	8007e3e <HAL_ADC_IRQHandler+0x3ae>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dd6:	d004      	beq.n	8007de2 <HAL_ADC_IRQHandler+0x352>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a72      	ldr	r2, [pc, #456]	; (8007fa8 <HAL_ADC_IRQHandler+0x518>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d106      	bne.n	8007df0 <HAL_ADC_IRQHandler+0x360>
 8007de2:	4b72      	ldr	r3, [pc, #456]	; (8007fac <HAL_ADC_IRQHandler+0x51c>)
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f003 031f 	and.w	r3, r3, #31
 8007dea:	2b06      	cmp	r3, #6
 8007dec:	d027      	beq.n	8007e3e <HAL_ADC_IRQHandler+0x3ae>
 8007dee:	e005      	b.n	8007dfc <HAL_ADC_IRQHandler+0x36c>
 8007df0:	4b6f      	ldr	r3, [pc, #444]	; (8007fb0 <HAL_ADC_IRQHandler+0x520>)
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f003 031f 	and.w	r3, r3, #31
 8007df8:	2b06      	cmp	r3, #6
 8007dfa:	d020      	beq.n	8007e3e <HAL_ADC_IRQHandler+0x3ae>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e04:	d004      	beq.n	8007e10 <HAL_ADC_IRQHandler+0x380>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a67      	ldr	r2, [pc, #412]	; (8007fa8 <HAL_ADC_IRQHandler+0x518>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d106      	bne.n	8007e1e <HAL_ADC_IRQHandler+0x38e>
 8007e10:	4b66      	ldr	r3, [pc, #408]	; (8007fac <HAL_ADC_IRQHandler+0x51c>)
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f003 031f 	and.w	r3, r3, #31
 8007e18:	2b07      	cmp	r3, #7
 8007e1a:	d010      	beq.n	8007e3e <HAL_ADC_IRQHandler+0x3ae>
 8007e1c:	e005      	b.n	8007e2a <HAL_ADC_IRQHandler+0x39a>
 8007e1e:	4b64      	ldr	r3, [pc, #400]	; (8007fb0 <HAL_ADC_IRQHandler+0x520>)
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f003 031f 	and.w	r3, r3, #31
 8007e26:	2b07      	cmp	r3, #7
 8007e28:	d009      	beq.n	8007e3e <HAL_ADC_IRQHandler+0x3ae>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e32:	d004      	beq.n	8007e3e <HAL_ADC_IRQHandler+0x3ae>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a5a      	ldr	r2, [pc, #360]	; (8007fa4 <HAL_ADC_IRQHandler+0x514>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d104      	bne.n	8007e48 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	617b      	str	r3, [r7, #20]
 8007e46:	e00f      	b.n	8007e68 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e50:	d004      	beq.n	8007e5c <HAL_ADC_IRQHandler+0x3cc>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a54      	ldr	r2, [pc, #336]	; (8007fa8 <HAL_ADC_IRQHandler+0x518>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d102      	bne.n	8007e62 <HAL_ADC_IRQHandler+0x3d2>
 8007e5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007e60:	e000      	b.n	8007e64 <HAL_ADC_IRQHandler+0x3d4>
 8007e62:	4b50      	ldr	r3, [pc, #320]	; (8007fa4 <HAL_ADC_IRQHandler+0x514>)
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d12d      	bne.n	8007ece <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f003 0308 	and.w	r3, r3, #8
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d11a      	bne.n	8007eb6 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007e8e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d112      	bne.n	8007ece <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eac:	f043 0201 	orr.w	r2, r3, #1
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	641a      	str	r2, [r3, #64]	; 0x40
 8007eb4:	e00b      	b.n	8007ece <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eba:	f043 0210 	orr.w	r2, r3, #16
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec6:	f043 0201 	orr.w	r2, r3, #1
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f8c4 	bl	800805c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2260      	movs	r2, #96	; 0x60
 8007eda:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d011      	beq.n	8007f0a <HAL_ADC_IRQHandler+0x47a>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00c      	beq.n	8007f0a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7ff fa85 	bl	800740c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2280      	movs	r2, #128	; 0x80
 8007f08:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d012      	beq.n	8007f3a <HAL_ADC_IRQHandler+0x4aa>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00d      	beq.n	8007f3a <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f8aa 	bl	8008084 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f38:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d012      	beq.n	8007f6a <HAL_ADC_IRQHandler+0x4da>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00d      	beq.n	8007f6a <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f89c 	bl	8008098 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f68:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f003 0310 	and.w	r3, r3, #16
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d04f      	beq.n	8008014 <HAL_ADC_IRQHandler+0x584>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f003 0310 	and.w	r3, r3, #16
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d04a      	beq.n	8008014 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d102      	bne.n	8007f8c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8007f86:	2301      	movs	r3, #1
 8007f88:	61fb      	str	r3, [r7, #28]
 8007f8a:	e02d      	b.n	8007fe8 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f94:	d004      	beq.n	8007fa0 <HAL_ADC_IRQHandler+0x510>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a03      	ldr	r2, [pc, #12]	; (8007fa8 <HAL_ADC_IRQHandler+0x518>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d109      	bne.n	8007fb4 <HAL_ADC_IRQHandler+0x524>
 8007fa0:	4b02      	ldr	r3, [pc, #8]	; (8007fac <HAL_ADC_IRQHandler+0x51c>)
 8007fa2:	e008      	b.n	8007fb6 <HAL_ADC_IRQHandler+0x526>
 8007fa4:	50000400 	.word	0x50000400
 8007fa8:	50000100 	.word	0x50000100
 8007fac:	50000300 	.word	0x50000300
 8007fb0:	50000700 	.word	0x50000700
 8007fb4:	4b28      	ldr	r3, [pc, #160]	; (8008058 <HAL_ADC_IRQHandler+0x5c8>)
 8007fb6:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f003 031f 	and.w	r3, r3, #31
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d109      	bne.n	8007fd8 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d10a      	bne.n	8007fe8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	61fb      	str	r3, [r7, #28]
 8007fd6:	e007      	b.n	8007fe8 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d10e      	bne.n	800800c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ffe:	f043 0202 	orr.w	r2, r3, #2
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7ff fa0a 	bl	8007420 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2210      	movs	r2, #16
 8008012:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800801a:	2b00      	cmp	r3, #0
 800801c:	d018      	beq.n	8008050 <HAL_ADC_IRQHandler+0x5c0>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008024:	2b00      	cmp	r3, #0
 8008026:	d013      	beq.n	8008050 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008038:	f043 0208 	orr.w	r2, r3, #8
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008048:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f810 	bl	8008070 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8008050:	bf00      	nop
 8008052:	3720      	adds	r7, #32
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	50000700 	.word	0x50000700

0800805c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b09b      	sub	sp, #108	; 0x6c
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80080bc:	2300      	movs	r3, #0
 80080be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d101      	bne.n	80080ce <HAL_ADC_ConfigChannel+0x22>
 80080ca:	2302      	movs	r3, #2
 80080cc:	e2ca      	b.n	8008664 <HAL_ADC_ConfigChannel+0x5b8>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	f003 0304 	and.w	r3, r3, #4
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f040 82ae 	bne.w	8008642 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	2b04      	cmp	r3, #4
 80080ec:	d81c      	bhi.n	8008128 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	4613      	mov	r3, r2
 80080fa:	005b      	lsls	r3, r3, #1
 80080fc:	4413      	add	r3, r2
 80080fe:	005b      	lsls	r3, r3, #1
 8008100:	461a      	mov	r2, r3
 8008102:	231f      	movs	r3, #31
 8008104:	4093      	lsls	r3, r2
 8008106:	43db      	mvns	r3, r3
 8008108:	4019      	ands	r1, r3
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	6818      	ldr	r0, [r3, #0]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	685a      	ldr	r2, [r3, #4]
 8008112:	4613      	mov	r3, r2
 8008114:	005b      	lsls	r3, r3, #1
 8008116:	4413      	add	r3, r2
 8008118:	005b      	lsls	r3, r3, #1
 800811a:	fa00 f203 	lsl.w	r2, r0, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	631a      	str	r2, [r3, #48]	; 0x30
 8008126:	e063      	b.n	80081f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	2b09      	cmp	r3, #9
 800812e:	d81e      	bhi.n	800816e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	685a      	ldr	r2, [r3, #4]
 800813a:	4613      	mov	r3, r2
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	4413      	add	r3, r2
 8008140:	005b      	lsls	r3, r3, #1
 8008142:	3b1e      	subs	r3, #30
 8008144:	221f      	movs	r2, #31
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	43db      	mvns	r3, r3
 800814c:	4019      	ands	r1, r3
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	4613      	mov	r3, r2
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	4413      	add	r3, r2
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	3b1e      	subs	r3, #30
 8008160:	fa00 f203 	lsl.w	r2, r0, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	430a      	orrs	r2, r1
 800816a:	635a      	str	r2, [r3, #52]	; 0x34
 800816c:	e040      	b.n	80081f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	2b0e      	cmp	r3, #14
 8008174:	d81e      	bhi.n	80081b4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	4613      	mov	r3, r2
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	4413      	add	r3, r2
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	3b3c      	subs	r3, #60	; 0x3c
 800818a:	221f      	movs	r2, #31
 800818c:	fa02 f303 	lsl.w	r3, r2, r3
 8008190:	43db      	mvns	r3, r3
 8008192:	4019      	ands	r1, r3
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	6818      	ldr	r0, [r3, #0]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	4613      	mov	r3, r2
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	4413      	add	r3, r2
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	3b3c      	subs	r3, #60	; 0x3c
 80081a6:	fa00 f203 	lsl.w	r2, r0, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	639a      	str	r2, [r3, #56]	; 0x38
 80081b2:	e01d      	b.n	80081f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	4613      	mov	r3, r2
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	4413      	add	r3, r2
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	3b5a      	subs	r3, #90	; 0x5a
 80081c8:	221f      	movs	r2, #31
 80081ca:	fa02 f303 	lsl.w	r3, r2, r3
 80081ce:	43db      	mvns	r3, r3
 80081d0:	4019      	ands	r1, r3
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	6818      	ldr	r0, [r3, #0]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	4613      	mov	r3, r2
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	4413      	add	r3, r2
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	3b5a      	subs	r3, #90	; 0x5a
 80081e4:	fa00 f203 	lsl.w	r2, r0, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	f003 030c 	and.w	r3, r3, #12
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f040 80e5 	bne.w	80083ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b09      	cmp	r3, #9
 8008206:	d91c      	bls.n	8008242 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6999      	ldr	r1, [r3, #24]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	4613      	mov	r3, r2
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	4413      	add	r3, r2
 8008218:	3b1e      	subs	r3, #30
 800821a:	2207      	movs	r2, #7
 800821c:	fa02 f303 	lsl.w	r3, r2, r3
 8008220:	43db      	mvns	r3, r3
 8008222:	4019      	ands	r1, r3
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	6898      	ldr	r0, [r3, #8]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	4613      	mov	r3, r2
 800822e:	005b      	lsls	r3, r3, #1
 8008230:	4413      	add	r3, r2
 8008232:	3b1e      	subs	r3, #30
 8008234:	fa00 f203 	lsl.w	r2, r0, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	619a      	str	r2, [r3, #24]
 8008240:	e019      	b.n	8008276 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6959      	ldr	r1, [r3, #20]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	4613      	mov	r3, r2
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	4413      	add	r3, r2
 8008252:	2207      	movs	r2, #7
 8008254:	fa02 f303 	lsl.w	r3, r2, r3
 8008258:	43db      	mvns	r3, r3
 800825a:	4019      	ands	r1, r3
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	6898      	ldr	r0, [r3, #8]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	4613      	mov	r3, r2
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	4413      	add	r3, r2
 800826a:	fa00 f203 	lsl.w	r2, r0, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	695a      	ldr	r2, [r3, #20]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	08db      	lsrs	r3, r3, #3
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	fa02 f303 	lsl.w	r3, r2, r3
 800828c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	3b01      	subs	r3, #1
 8008294:	2b03      	cmp	r3, #3
 8008296:	d84f      	bhi.n	8008338 <HAL_ADC_ConfigChannel+0x28c>
 8008298:	a201      	add	r2, pc, #4	; (adr r2, 80082a0 <HAL_ADC_ConfigChannel+0x1f4>)
 800829a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829e:	bf00      	nop
 80082a0:	080082b1 	.word	0x080082b1
 80082a4:	080082d3 	.word	0x080082d3
 80082a8:	080082f5 	.word	0x080082f5
 80082ac:	08008317 	.word	0x08008317
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80082b6:	4b9a      	ldr	r3, [pc, #616]	; (8008520 <HAL_ADC_ConfigChannel+0x474>)
 80082b8:	4013      	ands	r3, r2
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	6812      	ldr	r2, [r2, #0]
 80082be:	0691      	lsls	r1, r2, #26
 80082c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082c2:	430a      	orrs	r2, r1
 80082c4:	431a      	orrs	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80082ce:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80082d0:	e07e      	b.n	80083d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80082d8:	4b91      	ldr	r3, [pc, #580]	; (8008520 <HAL_ADC_ConfigChannel+0x474>)
 80082da:	4013      	ands	r3, r2
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	6812      	ldr	r2, [r2, #0]
 80082e0:	0691      	lsls	r1, r2, #26
 80082e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082e4:	430a      	orrs	r2, r1
 80082e6:	431a      	orrs	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80082f0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80082f2:	e06d      	b.n	80083d0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80082fa:	4b89      	ldr	r3, [pc, #548]	; (8008520 <HAL_ADC_ConfigChannel+0x474>)
 80082fc:	4013      	ands	r3, r2
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	6812      	ldr	r2, [r2, #0]
 8008302:	0691      	lsls	r1, r2, #26
 8008304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008306:	430a      	orrs	r2, r1
 8008308:	431a      	orrs	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008312:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8008314:	e05c      	b.n	80083d0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800831c:	4b80      	ldr	r3, [pc, #512]	; (8008520 <HAL_ADC_ConfigChannel+0x474>)
 800831e:	4013      	ands	r3, r2
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	6812      	ldr	r2, [r2, #0]
 8008324:	0691      	lsls	r1, r2, #26
 8008326:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008328:	430a      	orrs	r2, r1
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008334:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8008336:	e04b      	b.n	80083d0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800833e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	069b      	lsls	r3, r3, #26
 8008348:	429a      	cmp	r2, r3
 800834a:	d107      	bne.n	800835c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800835a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008362:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	069b      	lsls	r3, r3, #26
 800836c:	429a      	cmp	r2, r3
 800836e:	d107      	bne.n	8008380 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800837e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008386:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	069b      	lsls	r3, r3, #26
 8008390:	429a      	cmp	r2, r3
 8008392:	d107      	bne.n	80083a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80083a2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	069b      	lsls	r3, r3, #26
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d10a      	bne.n	80083ce <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80083c6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80083c8:	e001      	b.n	80083ce <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80083ca:	bf00      	nop
 80083cc:	e000      	b.n	80083d0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80083ce:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f003 0303 	and.w	r3, r3, #3
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d108      	bne.n	80083f0 <HAL_ADC_ConfigChannel+0x344>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0301 	and.w	r3, r3, #1
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <HAL_ADC_ConfigChannel+0x344>
 80083ec:	2301      	movs	r3, #1
 80083ee:	e000      	b.n	80083f2 <HAL_ADC_ConfigChannel+0x346>
 80083f0:	2300      	movs	r3, #0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f040 8130 	bne.w	8008658 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d00f      	beq.n	8008420 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2201      	movs	r2, #1
 800840e:	fa02 f303 	lsl.w	r3, r2, r3
 8008412:	43da      	mvns	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	400a      	ands	r2, r1
 800841a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800841e:	e049      	b.n	80084b4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2201      	movs	r2, #1
 800842e:	409a      	lsls	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b09      	cmp	r3, #9
 8008440:	d91c      	bls.n	800847c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6999      	ldr	r1, [r3, #24]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	4613      	mov	r3, r2
 800844e:	005b      	lsls	r3, r3, #1
 8008450:	4413      	add	r3, r2
 8008452:	3b1b      	subs	r3, #27
 8008454:	2207      	movs	r2, #7
 8008456:	fa02 f303 	lsl.w	r3, r2, r3
 800845a:	43db      	mvns	r3, r3
 800845c:	4019      	ands	r1, r3
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	6898      	ldr	r0, [r3, #8]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	4613      	mov	r3, r2
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	4413      	add	r3, r2
 800846c:	3b1b      	subs	r3, #27
 800846e:	fa00 f203 	lsl.w	r2, r0, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	619a      	str	r2, [r3, #24]
 800847a:	e01b      	b.n	80084b4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6959      	ldr	r1, [r3, #20]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	4613      	mov	r3, r2
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	4413      	add	r3, r2
 800848e:	2207      	movs	r2, #7
 8008490:	fa02 f303 	lsl.w	r3, r2, r3
 8008494:	43db      	mvns	r3, r3
 8008496:	4019      	ands	r1, r3
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	6898      	ldr	r0, [r3, #8]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	1c5a      	adds	r2, r3, #1
 80084a2:	4613      	mov	r3, r2
 80084a4:	005b      	lsls	r3, r3, #1
 80084a6:	4413      	add	r3, r2
 80084a8:	fa00 f203 	lsl.w	r2, r0, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	430a      	orrs	r2, r1
 80084b2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084bc:	d004      	beq.n	80084c8 <HAL_ADC_ConfigChannel+0x41c>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a18      	ldr	r2, [pc, #96]	; (8008524 <HAL_ADC_ConfigChannel+0x478>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d101      	bne.n	80084cc <HAL_ADC_ConfigChannel+0x420>
 80084c8:	4b17      	ldr	r3, [pc, #92]	; (8008528 <HAL_ADC_ConfigChannel+0x47c>)
 80084ca:	e000      	b.n	80084ce <HAL_ADC_ConfigChannel+0x422>
 80084cc:	4b17      	ldr	r3, [pc, #92]	; (800852c <HAL_ADC_ConfigChannel+0x480>)
 80084ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b10      	cmp	r3, #16
 80084d6:	d105      	bne.n	80084e4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80084d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d015      	beq.n	8008510 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80084e8:	2b11      	cmp	r3, #17
 80084ea:	d105      	bne.n	80084f8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80084ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00b      	beq.n	8008510 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80084fc:	2b12      	cmp	r3, #18
 80084fe:	f040 80ab 	bne.w	8008658 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8008502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800850a:	2b00      	cmp	r3, #0
 800850c:	f040 80a4 	bne.w	8008658 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008518:	d10a      	bne.n	8008530 <HAL_ADC_ConfigChannel+0x484>
 800851a:	4b02      	ldr	r3, [pc, #8]	; (8008524 <HAL_ADC_ConfigChannel+0x478>)
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	e022      	b.n	8008566 <HAL_ADC_ConfigChannel+0x4ba>
 8008520:	83fff000 	.word	0x83fff000
 8008524:	50000100 	.word	0x50000100
 8008528:	50000300 	.word	0x50000300
 800852c:	50000700 	.word	0x50000700
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a4e      	ldr	r2, [pc, #312]	; (8008670 <HAL_ADC_ConfigChannel+0x5c4>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d103      	bne.n	8008542 <HAL_ADC_ConfigChannel+0x496>
 800853a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	e011      	b.n	8008566 <HAL_ADC_ConfigChannel+0x4ba>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a4b      	ldr	r2, [pc, #300]	; (8008674 <HAL_ADC_ConfigChannel+0x5c8>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d102      	bne.n	8008552 <HAL_ADC_ConfigChannel+0x4a6>
 800854c:	4b4a      	ldr	r3, [pc, #296]	; (8008678 <HAL_ADC_ConfigChannel+0x5cc>)
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	e009      	b.n	8008566 <HAL_ADC_ConfigChannel+0x4ba>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a48      	ldr	r2, [pc, #288]	; (8008678 <HAL_ADC_ConfigChannel+0x5cc>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d102      	bne.n	8008562 <HAL_ADC_ConfigChannel+0x4b6>
 800855c:	4b45      	ldr	r3, [pc, #276]	; (8008674 <HAL_ADC_ConfigChannel+0x5c8>)
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	e001      	b.n	8008566 <HAL_ADC_ConfigChannel+0x4ba>
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f003 0303 	and.w	r3, r3, #3
 8008570:	2b01      	cmp	r3, #1
 8008572:	d108      	bne.n	8008586 <HAL_ADC_ConfigChannel+0x4da>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b01      	cmp	r3, #1
 8008580:	d101      	bne.n	8008586 <HAL_ADC_ConfigChannel+0x4da>
 8008582:	2301      	movs	r3, #1
 8008584:	e000      	b.n	8008588 <HAL_ADC_ConfigChannel+0x4dc>
 8008586:	2300      	movs	r3, #0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d150      	bne.n	800862e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800858c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800858e:	2b00      	cmp	r3, #0
 8008590:	d010      	beq.n	80085b4 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	2b01      	cmp	r3, #1
 800859c:	d107      	bne.n	80085ae <HAL_ADC_ConfigChannel+0x502>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d101      	bne.n	80085ae <HAL_ADC_ConfigChannel+0x502>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e000      	b.n	80085b0 <HAL_ADC_ConfigChannel+0x504>
 80085ae:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d13c      	bne.n	800862e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b10      	cmp	r3, #16
 80085ba:	d11d      	bne.n	80085f8 <HAL_ADC_ConfigChannel+0x54c>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085c4:	d118      	bne.n	80085f8 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80085c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80085ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085d0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80085d2:	4b2a      	ldr	r3, [pc, #168]	; (800867c <HAL_ADC_ConfigChannel+0x5d0>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a2a      	ldr	r2, [pc, #168]	; (8008680 <HAL_ADC_ConfigChannel+0x5d4>)
 80085d8:	fba2 2303 	umull	r2, r3, r2, r3
 80085dc:	0c9a      	lsrs	r2, r3, #18
 80085de:	4613      	mov	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80085e8:	e002      	b.n	80085f0 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	3b01      	subs	r3, #1
 80085ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1f9      	bne.n	80085ea <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80085f6:	e02e      	b.n	8008656 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b11      	cmp	r3, #17
 80085fe:	d10b      	bne.n	8008618 <HAL_ADC_ConfigChannel+0x56c>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008608:	d106      	bne.n	8008618 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800860a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8008612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008614:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8008616:	e01e      	b.n	8008656 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b12      	cmp	r3, #18
 800861e:	d11a      	bne.n	8008656 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8008620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800862a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800862c:	e013      	b.n	8008656 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008632:	f043 0220 	orr.w	r2, r3, #32
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008640:	e00a      	b.n	8008658 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008646:	f043 0220 	orr.w	r2, r3, #32
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008654:	e000      	b.n	8008658 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8008656:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8008660:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008664:	4618      	mov	r0, r3
 8008666:	376c      	adds	r7, #108	; 0x6c
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	50000100 	.word	0x50000100
 8008674:	50000400 	.word	0x50000400
 8008678:	50000500 	.word	0x50000500
 800867c:	20000064 	.word	0x20000064
 8008680:	431bde83 	.word	0x431bde83

08008684 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8008684:	b480      	push	{r7}
 8008686:	b099      	sub	sp, #100	; 0x64
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800869c:	d102      	bne.n	80086a4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800869e:	4b6d      	ldr	r3, [pc, #436]	; (8008854 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80086a0:	60bb      	str	r3, [r7, #8]
 80086a2:	e01a      	b.n	80086da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a6a      	ldr	r2, [pc, #424]	; (8008854 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d103      	bne.n	80086b6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80086ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80086b2:	60bb      	str	r3, [r7, #8]
 80086b4:	e011      	b.n	80086da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a67      	ldr	r2, [pc, #412]	; (8008858 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d102      	bne.n	80086c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80086c0:	4b66      	ldr	r3, [pc, #408]	; (800885c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80086c2:	60bb      	str	r3, [r7, #8]
 80086c4:	e009      	b.n	80086da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a64      	ldr	r2, [pc, #400]	; (800885c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d102      	bne.n	80086d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80086d0:	4b61      	ldr	r3, [pc, #388]	; (8008858 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80086d2:	60bb      	str	r3, [r7, #8]
 80086d4:	e001      	b.n	80086da <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80086d6:	2300      	movs	r3, #0
 80086d8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e0b0      	b.n	8008846 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d101      	bne.n	80086f2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80086ee:	2302      	movs	r3, #2
 80086f0:	e0a9      	b.n	8008846 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f003 0304 	and.w	r3, r3, #4
 8008704:	2b00      	cmp	r3, #0
 8008706:	f040 808d 	bne.w	8008824 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f003 0304 	and.w	r3, r3, #4
 8008712:	2b00      	cmp	r3, #0
 8008714:	f040 8086 	bne.w	8008824 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008720:	d004      	beq.n	800872c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a4b      	ldr	r2, [pc, #300]	; (8008854 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d101      	bne.n	8008730 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800872c:	4b4c      	ldr	r3, [pc, #304]	; (8008860 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800872e:	e000      	b.n	8008732 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8008730:	4b4c      	ldr	r3, [pc, #304]	; (8008864 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8008732:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d040      	beq.n	80087be <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800873c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	6859      	ldr	r1, [r3, #4]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800874e:	035b      	lsls	r3, r3, #13
 8008750:	430b      	orrs	r3, r1
 8008752:	431a      	orrs	r2, r3
 8008754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008756:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	2b01      	cmp	r3, #1
 8008764:	d108      	bne.n	8008778 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	2b01      	cmp	r3, #1
 8008772:	d101      	bne.n	8008778 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8008774:	2301      	movs	r3, #1
 8008776:	e000      	b.n	800877a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8008778:	2300      	movs	r3, #0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d15c      	bne.n	8008838 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f003 0303 	and.w	r3, r3, #3
 8008786:	2b01      	cmp	r3, #1
 8008788:	d107      	bne.n	800879a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b01      	cmp	r3, #1
 8008794:	d101      	bne.n	800879a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8008796:	2301      	movs	r3, #1
 8008798:	e000      	b.n	800879c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800879a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800879c:	2b00      	cmp	r3, #0
 800879e:	d14b      	bne.n	8008838 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80087a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80087a8:	f023 030f 	bic.w	r3, r3, #15
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	6811      	ldr	r1, [r2, #0]
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	6892      	ldr	r2, [r2, #8]
 80087b4:	430a      	orrs	r2, r1
 80087b6:	431a      	orrs	r2, r3
 80087b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087ba:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80087bc:	e03c      	b.n	8008838 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80087be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80087c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087c8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f003 0303 	and.w	r3, r3, #3
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d108      	bne.n	80087ea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d101      	bne.n	80087ea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e000      	b.n	80087ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80087ea:	2300      	movs	r3, #0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d123      	bne.n	8008838 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d107      	bne.n	800880c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0301 	and.w	r3, r3, #1
 8008804:	2b01      	cmp	r3, #1
 8008806:	d101      	bne.n	800880c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8008808:	2301      	movs	r3, #1
 800880a:	e000      	b.n	800880e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800880c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800880e:	2b00      	cmp	r3, #0
 8008810:	d112      	bne.n	8008838 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8008812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800881a:	f023 030f 	bic.w	r3, r3, #15
 800881e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008820:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8008822:	e009      	b.n	8008838 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008828:	f043 0220 	orr.w	r2, r3, #32
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008836:	e000      	b.n	800883a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8008838:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8008842:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8008846:	4618      	mov	r0, r3
 8008848:	3764      	adds	r7, #100	; 0x64
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	50000100 	.word	0x50000100
 8008858:	50000400 	.word	0x50000400
 800885c:	50000500 	.word	0x50000500
 8008860:	50000300 	.word	0x50000300
 8008864:	50000700 	.word	0x50000700

08008868 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008870:	2300      	movs	r3, #0
 8008872:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f003 0303 	and.w	r3, r3, #3
 800887e:	2b01      	cmp	r3, #1
 8008880:	d108      	bne.n	8008894 <ADC_Enable+0x2c>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0301 	and.w	r3, r3, #1
 800888c:	2b01      	cmp	r3, #1
 800888e:	d101      	bne.n	8008894 <ADC_Enable+0x2c>
 8008890:	2301      	movs	r3, #1
 8008892:	e000      	b.n	8008896 <ADC_Enable+0x2e>
 8008894:	2300      	movs	r3, #0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d143      	bne.n	8008922 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	4b22      	ldr	r3, [pc, #136]	; (800892c <ADC_Enable+0xc4>)
 80088a2:	4013      	ands	r3, r2
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00d      	beq.n	80088c4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ac:	f043 0210 	orr.w	r2, r3, #16
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b8:	f043 0201 	orr.w	r2, r3, #1
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e02f      	b.n	8008924 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689a      	ldr	r2, [r3, #8]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0201 	orr.w	r2, r2, #1
 80088d2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80088d4:	f7fe fd6a 	bl	80073ac <HAL_GetTick>
 80088d8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80088da:	e01b      	b.n	8008914 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80088dc:	f7fe fd66 	bl	80073ac <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d914      	bls.n	8008914 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d00d      	beq.n	8008914 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fc:	f043 0210 	orr.w	r2, r3, #16
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008908:	f043 0201 	orr.w	r2, r3, #1
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e007      	b.n	8008924 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	2b01      	cmp	r3, #1
 8008920:	d1dc      	bne.n	80088dc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	8000003f 	.word	0x8000003f

08008930 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008938:	2300      	movs	r3, #0
 800893a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f003 0303 	and.w	r3, r3, #3
 8008946:	2b01      	cmp	r3, #1
 8008948:	d108      	bne.n	800895c <ADC_Disable+0x2c>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <ADC_Disable+0x2c>
 8008958:	2301      	movs	r3, #1
 800895a:	e000      	b.n	800895e <ADC_Disable+0x2e>
 800895c:	2300      	movs	r3, #0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d047      	beq.n	80089f2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	f003 030d 	and.w	r3, r3, #13
 800896c:	2b01      	cmp	r3, #1
 800896e:	d10f      	bne.n	8008990 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689a      	ldr	r2, [r3, #8]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f042 0202 	orr.w	r2, r2, #2
 800897e:	609a      	str	r2, [r3, #8]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2203      	movs	r2, #3
 8008986:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8008988:	f7fe fd10 	bl	80073ac <HAL_GetTick>
 800898c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800898e:	e029      	b.n	80089e4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008994:	f043 0210 	orr.w	r2, r3, #16
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a0:	f043 0201 	orr.w	r2, r3, #1
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e023      	b.n	80089f4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80089ac:	f7fe fcfe 	bl	80073ac <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d914      	bls.n	80089e4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d10d      	bne.n	80089e4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089cc:	f043 0210 	orr.w	r2, r3, #16
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089d8:	f043 0201 	orr.w	r2, r3, #1
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e007      	b.n	80089f4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d0dc      	beq.n	80089ac <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f003 0307 	and.w	r3, r3, #7
 8008a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a0c:	4b0c      	ldr	r3, [pc, #48]	; (8008a40 <__NVIC_SetPriorityGrouping+0x44>)
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a18:	4013      	ands	r3, r2
 8008a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a2e:	4a04      	ldr	r2, [pc, #16]	; (8008a40 <__NVIC_SetPriorityGrouping+0x44>)
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	60d3      	str	r3, [r2, #12]
}
 8008a34:	bf00      	nop
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	e000ed00 	.word	0xe000ed00

08008a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008a44:	b480      	push	{r7}
 8008a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a48:	4b04      	ldr	r3, [pc, #16]	; (8008a5c <__NVIC_GetPriorityGrouping+0x18>)
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	0a1b      	lsrs	r3, r3, #8
 8008a4e:	f003 0307 	and.w	r3, r3, #7
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	e000ed00 	.word	0xe000ed00

08008a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	db0b      	blt.n	8008a8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a72:	79fb      	ldrb	r3, [r7, #7]
 8008a74:	f003 021f 	and.w	r2, r3, #31
 8008a78:	4907      	ldr	r1, [pc, #28]	; (8008a98 <__NVIC_EnableIRQ+0x38>)
 8008a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a7e:	095b      	lsrs	r3, r3, #5
 8008a80:	2001      	movs	r0, #1
 8008a82:	fa00 f202 	lsl.w	r2, r0, r2
 8008a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008a8a:	bf00      	nop
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	e000e100 	.word	0xe000e100

08008a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	6039      	str	r1, [r7, #0]
 8008aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	db0a      	blt.n	8008ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	490c      	ldr	r1, [pc, #48]	; (8008ae8 <__NVIC_SetPriority+0x4c>)
 8008ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aba:	0112      	lsls	r2, r2, #4
 8008abc:	b2d2      	uxtb	r2, r2
 8008abe:	440b      	add	r3, r1
 8008ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008ac4:	e00a      	b.n	8008adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	4908      	ldr	r1, [pc, #32]	; (8008aec <__NVIC_SetPriority+0x50>)
 8008acc:	79fb      	ldrb	r3, [r7, #7]
 8008ace:	f003 030f 	and.w	r3, r3, #15
 8008ad2:	3b04      	subs	r3, #4
 8008ad4:	0112      	lsls	r2, r2, #4
 8008ad6:	b2d2      	uxtb	r2, r2
 8008ad8:	440b      	add	r3, r1
 8008ada:	761a      	strb	r2, [r3, #24]
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	e000e100 	.word	0xe000e100
 8008aec:	e000ed00 	.word	0xe000ed00

08008af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b089      	sub	sp, #36	; 0x24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f003 0307 	and.w	r3, r3, #7
 8008b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	f1c3 0307 	rsb	r3, r3, #7
 8008b0a:	2b04      	cmp	r3, #4
 8008b0c:	bf28      	it	cs
 8008b0e:	2304      	movcs	r3, #4
 8008b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	3304      	adds	r3, #4
 8008b16:	2b06      	cmp	r3, #6
 8008b18:	d902      	bls.n	8008b20 <NVIC_EncodePriority+0x30>
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	3b03      	subs	r3, #3
 8008b1e:	e000      	b.n	8008b22 <NVIC_EncodePriority+0x32>
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b24:	f04f 32ff 	mov.w	r2, #4294967295
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2e:	43da      	mvns	r2, r3
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	401a      	ands	r2, r3
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b38:	f04f 31ff 	mov.w	r1, #4294967295
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b42:	43d9      	mvns	r1, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b48:	4313      	orrs	r3, r2
         );
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3724      	adds	r7, #36	; 0x24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
	...

08008b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b68:	d301      	bcc.n	8008b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e00f      	b.n	8008b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b6e:	4a0a      	ldr	r2, [pc, #40]	; (8008b98 <SysTick_Config+0x40>)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b76:	210f      	movs	r1, #15
 8008b78:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7c:	f7ff ff8e 	bl	8008a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b80:	4b05      	ldr	r3, [pc, #20]	; (8008b98 <SysTick_Config+0x40>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b86:	4b04      	ldr	r3, [pc, #16]	; (8008b98 <SysTick_Config+0x40>)
 8008b88:	2207      	movs	r2, #7
 8008b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	e000e010 	.word	0xe000e010

08008b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7ff ff29 	bl	80089fc <__NVIC_SetPriorityGrouping>
}
 8008baa:	bf00      	nop
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b086      	sub	sp, #24
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	4603      	mov	r3, r0
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008bc4:	f7ff ff3e 	bl	8008a44 <__NVIC_GetPriorityGrouping>
 8008bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	68b9      	ldr	r1, [r7, #8]
 8008bce:	6978      	ldr	r0, [r7, #20]
 8008bd0:	f7ff ff8e 	bl	8008af0 <NVIC_EncodePriority>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bda:	4611      	mov	r1, r2
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7ff ff5d 	bl	8008a9c <__NVIC_SetPriority>
}
 8008be2:	bf00      	nop
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7ff ff31 	bl	8008a60 <__NVIC_EnableIRQ>
}
 8008bfe:	bf00      	nop
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b082      	sub	sp, #8
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff ffa2 	bl	8008b58 <SysTick_Config>
 8008c14:	4603      	mov	r3, r0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d008      	beq.n	8008c42 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2204      	movs	r2, #4
 8008c34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e020      	b.n	8008c84 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f022 020e 	bic.w	r2, r2, #14
 8008c50:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f022 0201 	bic.w	r2, r2, #1
 8008c60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8008c70:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d005      	beq.n	8008cb2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2204      	movs	r2, #4
 8008caa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	73fb      	strb	r3, [r7, #15]
 8008cb0:	e027      	b.n	8008d02 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f022 020e 	bic.w	r2, r2, #14
 8008cc0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f022 0201 	bic.w	r2, r2, #1
 8008cd0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cda:	2101      	movs	r1, #1
 8008cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8008ce0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	4798      	blx	r3
    } 
  }
  return status;
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008d16:	2300      	movs	r3, #0
 8008d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d1a:	e154      	b.n	8008fc6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	2101      	movs	r1, #1
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	fa01 f303 	lsl.w	r3, r1, r3
 8008d28:	4013      	ands	r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 8146 	beq.w	8008fc0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f003 0303 	and.w	r3, r3, #3
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d005      	beq.n	8008d4c <HAL_GPIO_Init+0x40>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f003 0303 	and.w	r3, r3, #3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d130      	bne.n	8008dae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	2203      	movs	r2, #3
 8008d58:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5c:	43db      	mvns	r3, r3
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	4013      	ands	r3, r2
 8008d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	68da      	ldr	r2, [r3, #12]
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008d82:	2201      	movs	r2, #1
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8a:	43db      	mvns	r3, r3
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	4013      	ands	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	091b      	lsrs	r3, r3, #4
 8008d98:	f003 0201 	and.w	r2, r3, #1
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f003 0303 	and.w	r3, r3, #3
 8008db6:	2b03      	cmp	r3, #3
 8008db8:	d017      	beq.n	8008dea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dca:	43db      	mvns	r3, r3
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	689a      	ldr	r2, [r3, #8]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	005b      	lsls	r3, r3, #1
 8008dda:	fa02 f303 	lsl.w	r3, r2, r3
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f003 0303 	and.w	r3, r3, #3
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d123      	bne.n	8008e3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	08da      	lsrs	r2, r3, #3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3208      	adds	r2, #8
 8008dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	f003 0307 	and.w	r3, r3, #7
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	220f      	movs	r2, #15
 8008e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e12:	43db      	mvns	r3, r3
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	4013      	ands	r3, r2
 8008e18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	691a      	ldr	r2, [r3, #16]
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f003 0307 	and.w	r3, r3, #7
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	08da      	lsrs	r2, r3, #3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3208      	adds	r2, #8
 8008e38:	6939      	ldr	r1, [r7, #16]
 8008e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	2203      	movs	r2, #3
 8008e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4e:	43db      	mvns	r3, r3
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	4013      	ands	r3, r2
 8008e54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	f003 0203 	and.w	r2, r3, #3
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	005b      	lsls	r3, r3, #1
 8008e62:	fa02 f303 	lsl.w	r3, r2, r3
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 80a0 	beq.w	8008fc0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e80:	4b58      	ldr	r3, [pc, #352]	; (8008fe4 <HAL_GPIO_Init+0x2d8>)
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	4a57      	ldr	r2, [pc, #348]	; (8008fe4 <HAL_GPIO_Init+0x2d8>)
 8008e86:	f043 0301 	orr.w	r3, r3, #1
 8008e8a:	6193      	str	r3, [r2, #24]
 8008e8c:	4b55      	ldr	r3, [pc, #340]	; (8008fe4 <HAL_GPIO_Init+0x2d8>)
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	f003 0301 	and.w	r3, r3, #1
 8008e94:	60bb      	str	r3, [r7, #8]
 8008e96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008e98:	4a53      	ldr	r2, [pc, #332]	; (8008fe8 <HAL_GPIO_Init+0x2dc>)
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	089b      	lsrs	r3, r3, #2
 8008e9e:	3302      	adds	r3, #2
 8008ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f003 0303 	and.w	r3, r3, #3
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	220f      	movs	r2, #15
 8008eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb4:	43db      	mvns	r3, r3
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	4013      	ands	r3, r2
 8008eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008ec2:	d019      	beq.n	8008ef8 <HAL_GPIO_Init+0x1ec>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a49      	ldr	r2, [pc, #292]	; (8008fec <HAL_GPIO_Init+0x2e0>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d013      	beq.n	8008ef4 <HAL_GPIO_Init+0x1e8>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a48      	ldr	r2, [pc, #288]	; (8008ff0 <HAL_GPIO_Init+0x2e4>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d00d      	beq.n	8008ef0 <HAL_GPIO_Init+0x1e4>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a47      	ldr	r2, [pc, #284]	; (8008ff4 <HAL_GPIO_Init+0x2e8>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d007      	beq.n	8008eec <HAL_GPIO_Init+0x1e0>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a46      	ldr	r2, [pc, #280]	; (8008ff8 <HAL_GPIO_Init+0x2ec>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d101      	bne.n	8008ee8 <HAL_GPIO_Init+0x1dc>
 8008ee4:	2304      	movs	r3, #4
 8008ee6:	e008      	b.n	8008efa <HAL_GPIO_Init+0x1ee>
 8008ee8:	2305      	movs	r3, #5
 8008eea:	e006      	b.n	8008efa <HAL_GPIO_Init+0x1ee>
 8008eec:	2303      	movs	r3, #3
 8008eee:	e004      	b.n	8008efa <HAL_GPIO_Init+0x1ee>
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	e002      	b.n	8008efa <HAL_GPIO_Init+0x1ee>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e000      	b.n	8008efa <HAL_GPIO_Init+0x1ee>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	f002 0203 	and.w	r2, r2, #3
 8008f00:	0092      	lsls	r2, r2, #2
 8008f02:	4093      	lsls	r3, r2
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008f0a:	4937      	ldr	r1, [pc, #220]	; (8008fe8 <HAL_GPIO_Init+0x2dc>)
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	089b      	lsrs	r3, r3, #2
 8008f10:	3302      	adds	r3, #2
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008f18:	4b38      	ldr	r3, [pc, #224]	; (8008ffc <HAL_GPIO_Init+0x2f0>)
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	43db      	mvns	r3, r3
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	4013      	ands	r3, r2
 8008f26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d003      	beq.n	8008f3c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008f3c:	4a2f      	ldr	r2, [pc, #188]	; (8008ffc <HAL_GPIO_Init+0x2f0>)
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008f42:	4b2e      	ldr	r3, [pc, #184]	; (8008ffc <HAL_GPIO_Init+0x2f0>)
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	43db      	mvns	r3, r3
 8008f4c:	693a      	ldr	r2, [r7, #16]
 8008f4e:	4013      	ands	r3, r2
 8008f50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008f66:	4a25      	ldr	r2, [pc, #148]	; (8008ffc <HAL_GPIO_Init+0x2f0>)
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008f6c:	4b23      	ldr	r3, [pc, #140]	; (8008ffc <HAL_GPIO_Init+0x2f0>)
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	43db      	mvns	r3, r3
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	4013      	ands	r3, r2
 8008f7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d003      	beq.n	8008f90 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008f90:	4a1a      	ldr	r2, [pc, #104]	; (8008ffc <HAL_GPIO_Init+0x2f0>)
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008f96:	4b19      	ldr	r3, [pc, #100]	; (8008ffc <HAL_GPIO_Init+0x2f0>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	43db      	mvns	r3, r3
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008fba:	4a10      	ldr	r2, [pc, #64]	; (8008ffc <HAL_GPIO_Init+0x2f0>)
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f47f aea3 	bne.w	8008d1c <HAL_GPIO_Init+0x10>
  }
}
 8008fd6:	bf00      	nop
 8008fd8:	bf00      	nop
 8008fda:	371c      	adds	r7, #28
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	40021000 	.word	0x40021000
 8008fe8:	40010000 	.word	0x40010000
 8008fec:	48000400 	.word	0x48000400
 8008ff0:	48000800 	.word	0x48000800
 8008ff4:	48000c00 	.word	0x48000c00
 8008ff8:	48001000 	.word	0x48001000
 8008ffc:	40010400 	.word	0x40010400

08009000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	460b      	mov	r3, r1
 800900a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	691a      	ldr	r2, [r3, #16]
 8009010:	887b      	ldrh	r3, [r7, #2]
 8009012:	4013      	ands	r3, r2
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009018:	2301      	movs	r3, #1
 800901a:	73fb      	strb	r3, [r7, #15]
 800901c:	e001      	b.n	8009022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800901e:	2300      	movs	r3, #0
 8009020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	807b      	strh	r3, [r7, #2]
 800903c:	4613      	mov	r3, r2
 800903e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009040:	787b      	ldrb	r3, [r7, #1]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009046:	887a      	ldrh	r2, [r7, #2]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800904c:	e002      	b.n	8009054 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800904e:	887a      	ldrh	r2, [r7, #2]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	460b      	mov	r3, r1
 800906a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009072:	887a      	ldrh	r2, [r7, #2]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4013      	ands	r3, r2
 8009078:	041a      	lsls	r2, r3, #16
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	43d9      	mvns	r1, r3
 800907e:	887b      	ldrh	r3, [r7, #2]
 8009080:	400b      	ands	r3, r1
 8009082:	431a      	orrs	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	619a      	str	r2, [r3, #24]
}
 8009088:	bf00      	nop
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800909e:	4b08      	ldr	r3, [pc, #32]	; (80090c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80090a0:	695a      	ldr	r2, [r3, #20]
 80090a2:	88fb      	ldrh	r3, [r7, #6]
 80090a4:	4013      	ands	r3, r2
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d006      	beq.n	80090b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80090aa:	4a05      	ldr	r2, [pc, #20]	; (80090c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80090ac:	88fb      	ldrh	r3, [r7, #6]
 80090ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80090b0:	88fb      	ldrh	r3, [r7, #6]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7f8 fbcc 	bl	8001850 <HAL_GPIO_EXTI_Callback>
  }
}
 80090b8:	bf00      	nop
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	40010400 	.word	0x40010400

080090c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e081      	b.n	80091da <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d106      	bne.n	80090f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7fd fe96 	bl	8006e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2224      	movs	r2, #36	; 0x24
 80090f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f022 0201 	bic.w	r2, r2, #1
 8009106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009114:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689a      	ldr	r2, [r3, #8]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009124:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d107      	bne.n	800913e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	689a      	ldr	r2, [r3, #8]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800913a:	609a      	str	r2, [r3, #8]
 800913c:	e006      	b.n	800914c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	689a      	ldr	r2, [r3, #8]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800914a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	2b02      	cmp	r3, #2
 8009152:	d104      	bne.n	800915e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800915c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	6812      	ldr	r2, [r2, #0]
 8009168:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800916c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009170:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68da      	ldr	r2, [r3, #12]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009180:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	691a      	ldr	r2, [r3, #16]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	695b      	ldr	r3, [r3, #20]
 800918a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	430a      	orrs	r2, r1
 800919a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	69d9      	ldr	r1, [r3, #28]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a1a      	ldr	r2, [r3, #32]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	430a      	orrs	r2, r1
 80091aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f042 0201 	orr.w	r2, r2, #1
 80091ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2220      	movs	r2, #32
 80091c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	2b20      	cmp	r3, #32
 80091f6:	d138      	bne.n	800926a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d101      	bne.n	8009206 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009202:	2302      	movs	r3, #2
 8009204:	e032      	b.n	800926c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2224      	movs	r2, #36	; 0x24
 8009212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f022 0201 	bic.w	r2, r2, #1
 8009224:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009234:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6819      	ldr	r1, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f042 0201 	orr.w	r2, r2, #1
 8009254:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2220      	movs	r2, #32
 800925a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	e000      	b.n	800926c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800926a:	2302      	movs	r3, #2
  }
}
 800926c:	4618      	mov	r0, r3
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b20      	cmp	r3, #32
 800928c:	d139      	bne.n	8009302 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009294:	2b01      	cmp	r3, #1
 8009296:	d101      	bne.n	800929c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009298:	2302      	movs	r3, #2
 800929a:	e033      	b.n	8009304 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2224      	movs	r2, #36	; 0x24
 80092a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f022 0201 	bic.w	r2, r2, #1
 80092ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80092ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	021b      	lsls	r3, r3, #8
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f042 0201 	orr.w	r2, r2, #1
 80092ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2220      	movs	r2, #32
 80092f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	e000      	b.n	8009304 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009302:	2302      	movs	r3, #2
  }
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009312:	b08b      	sub	sp, #44	; 0x2c
 8009314:	af06      	add	r7, sp, #24
 8009316:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e0c4      	b.n	80094ac <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d106      	bne.n	800933c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7fd feae 	bl	8007098 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2203      	movs	r2, #3
 8009340:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4618      	mov	r0, r3
 800934a:	f004 fa41 	bl	800d7d0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800934e:	2300      	movs	r3, #0
 8009350:	73fb      	strb	r3, [r7, #15]
 8009352:	e040      	b.n	80093d6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009354:	7bfb      	ldrb	r3, [r7, #15]
 8009356:	6879      	ldr	r1, [r7, #4]
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	4613      	mov	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	00db      	lsls	r3, r3, #3
 8009362:	440b      	add	r3, r1
 8009364:	3301      	adds	r3, #1
 8009366:	2201      	movs	r2, #1
 8009368:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800936a:	7bfb      	ldrb	r3, [r7, #15]
 800936c:	6879      	ldr	r1, [r7, #4]
 800936e:	1c5a      	adds	r2, r3, #1
 8009370:	4613      	mov	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	440b      	add	r3, r1
 800937a:	7bfa      	ldrb	r2, [r7, #15]
 800937c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800937e:	7bfb      	ldrb	r3, [r7, #15]
 8009380:	6879      	ldr	r1, [r7, #4]
 8009382:	1c5a      	adds	r2, r3, #1
 8009384:	4613      	mov	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	00db      	lsls	r3, r3, #3
 800938c:	440b      	add	r3, r1
 800938e:	3303      	adds	r3, #3
 8009390:	2200      	movs	r2, #0
 8009392:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009394:	7bfa      	ldrb	r2, [r7, #15]
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	4613      	mov	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	440b      	add	r3, r1
 80093a2:	3338      	adds	r3, #56	; 0x38
 80093a4:	2200      	movs	r2, #0
 80093a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80093a8:	7bfa      	ldrb	r2, [r7, #15]
 80093aa:	6879      	ldr	r1, [r7, #4]
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	00db      	lsls	r3, r3, #3
 80093b4:	440b      	add	r3, r1
 80093b6:	333c      	adds	r3, #60	; 0x3c
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80093bc:	7bfa      	ldrb	r2, [r7, #15]
 80093be:	6879      	ldr	r1, [r7, #4]
 80093c0:	4613      	mov	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4413      	add	r3, r2
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	440b      	add	r3, r1
 80093ca:	3340      	adds	r3, #64	; 0x40
 80093cc:	2200      	movs	r2, #0
 80093ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
 80093d2:	3301      	adds	r3, #1
 80093d4:	73fb      	strb	r3, [r7, #15]
 80093d6:	7bfa      	ldrb	r2, [r7, #15]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d3b9      	bcc.n	8009354 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093e0:	2300      	movs	r3, #0
 80093e2:	73fb      	strb	r3, [r7, #15]
 80093e4:	e044      	b.n	8009470 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80093e6:	7bfa      	ldrb	r2, [r7, #15]
 80093e8:	6879      	ldr	r1, [r7, #4]
 80093ea:	4613      	mov	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4413      	add	r3, r2
 80093f0:	00db      	lsls	r3, r3, #3
 80093f2:	440b      	add	r3, r1
 80093f4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80093f8:	2200      	movs	r2, #0
 80093fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80093fc:	7bfa      	ldrb	r2, [r7, #15]
 80093fe:	6879      	ldr	r1, [r7, #4]
 8009400:	4613      	mov	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	00db      	lsls	r3, r3, #3
 8009408:	440b      	add	r3, r1
 800940a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800940e:	7bfa      	ldrb	r2, [r7, #15]
 8009410:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009412:	7bfa      	ldrb	r2, [r7, #15]
 8009414:	6879      	ldr	r1, [r7, #4]
 8009416:	4613      	mov	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	00db      	lsls	r3, r3, #3
 800941e:	440b      	add	r3, r1
 8009420:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8009424:	2200      	movs	r2, #0
 8009426:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009428:	7bfa      	ldrb	r2, [r7, #15]
 800942a:	6879      	ldr	r1, [r7, #4]
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	00db      	lsls	r3, r3, #3
 8009434:	440b      	add	r3, r1
 8009436:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800943a:	2200      	movs	r2, #0
 800943c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800943e:	7bfa      	ldrb	r2, [r7, #15]
 8009440:	6879      	ldr	r1, [r7, #4]
 8009442:	4613      	mov	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	00db      	lsls	r3, r3, #3
 800944a:	440b      	add	r3, r1
 800944c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009450:	2200      	movs	r2, #0
 8009452:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009454:	7bfa      	ldrb	r2, [r7, #15]
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	4613      	mov	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4413      	add	r3, r2
 800945e:	00db      	lsls	r3, r3, #3
 8009460:	440b      	add	r3, r1
 8009462:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009466:	2200      	movs	r2, #0
 8009468:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800946a:	7bfb      	ldrb	r3, [r7, #15]
 800946c:	3301      	adds	r3, #1
 800946e:	73fb      	strb	r3, [r7, #15]
 8009470:	7bfa      	ldrb	r2, [r7, #15]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	429a      	cmp	r2, r3
 8009478:	d3b5      	bcc.n	80093e6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	687e      	ldr	r6, [r7, #4]
 8009482:	466d      	mov	r5, sp
 8009484:	f106 0410 	add.w	r4, r6, #16
 8009488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800948a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	602b      	str	r3, [r5, #0]
 8009490:	1d33      	adds	r3, r6, #4
 8009492:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009494:	6838      	ldr	r0, [r7, #0]
 8009496:	f004 f9b6 	bl	800d806 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080094b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80094c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80094c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d102      	bne.n	80094da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	f001 b823 	b.w	800a520 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f000 817d 	beq.w	80097ea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80094f0:	4bbc      	ldr	r3, [pc, #752]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	f003 030c 	and.w	r3, r3, #12
 80094f8:	2b04      	cmp	r3, #4
 80094fa:	d00c      	beq.n	8009516 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80094fc:	4bb9      	ldr	r3, [pc, #740]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f003 030c 	and.w	r3, r3, #12
 8009504:	2b08      	cmp	r3, #8
 8009506:	d15c      	bne.n	80095c2 <HAL_RCC_OscConfig+0x10e>
 8009508:	4bb6      	ldr	r3, [pc, #728]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009514:	d155      	bne.n	80095c2 <HAL_RCC_OscConfig+0x10e>
 8009516:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800951a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800951e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8009522:	fa93 f3a3 	rbit	r3, r3
 8009526:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800952a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800952e:	fab3 f383 	clz	r3, r3
 8009532:	b2db      	uxtb	r3, r3
 8009534:	095b      	lsrs	r3, r3, #5
 8009536:	b2db      	uxtb	r3, r3
 8009538:	f043 0301 	orr.w	r3, r3, #1
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b01      	cmp	r3, #1
 8009540:	d102      	bne.n	8009548 <HAL_RCC_OscConfig+0x94>
 8009542:	4ba8      	ldr	r3, [pc, #672]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	e015      	b.n	8009574 <HAL_RCC_OscConfig+0xc0>
 8009548:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800954c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009550:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8009554:	fa93 f3a3 	rbit	r3, r3
 8009558:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800955c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009560:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8009564:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8009568:	fa93 f3a3 	rbit	r3, r3
 800956c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8009570:	4b9c      	ldr	r3, [pc, #624]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 8009572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009574:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009578:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800957c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8009580:	fa92 f2a2 	rbit	r2, r2
 8009584:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8009588:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800958c:	fab2 f282 	clz	r2, r2
 8009590:	b2d2      	uxtb	r2, r2
 8009592:	f042 0220 	orr.w	r2, r2, #32
 8009596:	b2d2      	uxtb	r2, r2
 8009598:	f002 021f 	and.w	r2, r2, #31
 800959c:	2101      	movs	r1, #1
 800959e:	fa01 f202 	lsl.w	r2, r1, r2
 80095a2:	4013      	ands	r3, r2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f000 811f 	beq.w	80097e8 <HAL_RCC_OscConfig+0x334>
 80095aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f040 8116 	bne.w	80097e8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	f000 bfaf 	b.w	800a520 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80095c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095d2:	d106      	bne.n	80095e2 <HAL_RCC_OscConfig+0x12e>
 80095d4:	4b83      	ldr	r3, [pc, #524]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a82      	ldr	r2, [pc, #520]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 80095da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095de:	6013      	str	r3, [r2, #0]
 80095e0:	e036      	b.n	8009650 <HAL_RCC_OscConfig+0x19c>
 80095e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10c      	bne.n	800960c <HAL_RCC_OscConfig+0x158>
 80095f2:	4b7c      	ldr	r3, [pc, #496]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a7b      	ldr	r2, [pc, #492]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 80095f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095fc:	6013      	str	r3, [r2, #0]
 80095fe:	4b79      	ldr	r3, [pc, #484]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a78      	ldr	r2, [pc, #480]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 8009604:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009608:	6013      	str	r3, [r2, #0]
 800960a:	e021      	b.n	8009650 <HAL_RCC_OscConfig+0x19c>
 800960c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009610:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800961c:	d10c      	bne.n	8009638 <HAL_RCC_OscConfig+0x184>
 800961e:	4b71      	ldr	r3, [pc, #452]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a70      	ldr	r2, [pc, #448]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 8009624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009628:	6013      	str	r3, [r2, #0]
 800962a:	4b6e      	ldr	r3, [pc, #440]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a6d      	ldr	r2, [pc, #436]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 8009630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009634:	6013      	str	r3, [r2, #0]
 8009636:	e00b      	b.n	8009650 <HAL_RCC_OscConfig+0x19c>
 8009638:	4b6a      	ldr	r3, [pc, #424]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a69      	ldr	r2, [pc, #420]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 800963e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009642:	6013      	str	r3, [r2, #0]
 8009644:	4b67      	ldr	r3, [pc, #412]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a66      	ldr	r2, [pc, #408]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 800964a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800964e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009650:	4b64      	ldr	r3, [pc, #400]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 8009652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009654:	f023 020f 	bic.w	r2, r3, #15
 8009658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800965c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	495f      	ldr	r1, [pc, #380]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 8009666:	4313      	orrs	r3, r2
 8009668:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800966a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800966e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d059      	beq.n	800972e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800967a:	f7fd fe97 	bl	80073ac <HAL_GetTick>
 800967e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009682:	e00a      	b.n	800969a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009684:	f7fd fe92 	bl	80073ac <HAL_GetTick>
 8009688:	4602      	mov	r2, r0
 800968a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	2b64      	cmp	r3, #100	; 0x64
 8009692:	d902      	bls.n	800969a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8009694:	2303      	movs	r3, #3
 8009696:	f000 bf43 	b.w	800a520 <HAL_RCC_OscConfig+0x106c>
 800969a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800969e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80096a6:	fa93 f3a3 	rbit	r3, r3
 80096aa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80096ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096b2:	fab3 f383 	clz	r3, r3
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	095b      	lsrs	r3, r3, #5
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	f043 0301 	orr.w	r3, r3, #1
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d102      	bne.n	80096cc <HAL_RCC_OscConfig+0x218>
 80096c6:	4b47      	ldr	r3, [pc, #284]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	e015      	b.n	80096f8 <HAL_RCC_OscConfig+0x244>
 80096cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80096d0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80096d8:	fa93 f3a3 	rbit	r3, r3
 80096dc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80096e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80096e4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80096e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80096ec:	fa93 f3a3 	rbit	r3, r3
 80096f0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80096f4:	4b3b      	ldr	r3, [pc, #236]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 80096f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80096fc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8009700:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8009704:	fa92 f2a2 	rbit	r2, r2
 8009708:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800970c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8009710:	fab2 f282 	clz	r2, r2
 8009714:	b2d2      	uxtb	r2, r2
 8009716:	f042 0220 	orr.w	r2, r2, #32
 800971a:	b2d2      	uxtb	r2, r2
 800971c:	f002 021f 	and.w	r2, r2, #31
 8009720:	2101      	movs	r1, #1
 8009722:	fa01 f202 	lsl.w	r2, r1, r2
 8009726:	4013      	ands	r3, r2
 8009728:	2b00      	cmp	r3, #0
 800972a:	d0ab      	beq.n	8009684 <HAL_RCC_OscConfig+0x1d0>
 800972c:	e05d      	b.n	80097ea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800972e:	f7fd fe3d 	bl	80073ac <HAL_GetTick>
 8009732:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009736:	e00a      	b.n	800974e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009738:	f7fd fe38 	bl	80073ac <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	2b64      	cmp	r3, #100	; 0x64
 8009746:	d902      	bls.n	800974e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8009748:	2303      	movs	r3, #3
 800974a:	f000 bee9 	b.w	800a520 <HAL_RCC_OscConfig+0x106c>
 800974e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009752:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009756:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800975a:	fa93 f3a3 	rbit	r3, r3
 800975e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8009762:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009766:	fab3 f383 	clz	r3, r3
 800976a:	b2db      	uxtb	r3, r3
 800976c:	095b      	lsrs	r3, r3, #5
 800976e:	b2db      	uxtb	r3, r3
 8009770:	f043 0301 	orr.w	r3, r3, #1
 8009774:	b2db      	uxtb	r3, r3
 8009776:	2b01      	cmp	r3, #1
 8009778:	d102      	bne.n	8009780 <HAL_RCC_OscConfig+0x2cc>
 800977a:	4b1a      	ldr	r3, [pc, #104]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	e015      	b.n	80097ac <HAL_RCC_OscConfig+0x2f8>
 8009780:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009784:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009788:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800978c:	fa93 f3a3 	rbit	r3, r3
 8009790:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8009794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009798:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800979c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80097a0:	fa93 f3a3 	rbit	r3, r3
 80097a4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80097a8:	4b0e      	ldr	r3, [pc, #56]	; (80097e4 <HAL_RCC_OscConfig+0x330>)
 80097aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80097b0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80097b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80097b8:	fa92 f2a2 	rbit	r2, r2
 80097bc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80097c0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80097c4:	fab2 f282 	clz	r2, r2
 80097c8:	b2d2      	uxtb	r2, r2
 80097ca:	f042 0220 	orr.w	r2, r2, #32
 80097ce:	b2d2      	uxtb	r2, r2
 80097d0:	f002 021f 	and.w	r2, r2, #31
 80097d4:	2101      	movs	r1, #1
 80097d6:	fa01 f202 	lsl.w	r2, r1, r2
 80097da:	4013      	ands	r3, r2
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1ab      	bne.n	8009738 <HAL_RCC_OscConfig+0x284>
 80097e0:	e003      	b.n	80097ea <HAL_RCC_OscConfig+0x336>
 80097e2:	bf00      	nop
 80097e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0302 	and.w	r3, r3, #2
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 817d 	beq.w	8009afa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8009800:	4ba6      	ldr	r3, [pc, #664]	; (8009a9c <HAL_RCC_OscConfig+0x5e8>)
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	f003 030c 	and.w	r3, r3, #12
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00b      	beq.n	8009824 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800980c:	4ba3      	ldr	r3, [pc, #652]	; (8009a9c <HAL_RCC_OscConfig+0x5e8>)
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	f003 030c 	and.w	r3, r3, #12
 8009814:	2b08      	cmp	r3, #8
 8009816:	d172      	bne.n	80098fe <HAL_RCC_OscConfig+0x44a>
 8009818:	4ba0      	ldr	r3, [pc, #640]	; (8009a9c <HAL_RCC_OscConfig+0x5e8>)
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009820:	2b00      	cmp	r3, #0
 8009822:	d16c      	bne.n	80098fe <HAL_RCC_OscConfig+0x44a>
 8009824:	2302      	movs	r3, #2
 8009826:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800982a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800982e:	fa93 f3a3 	rbit	r3, r3
 8009832:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8009836:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800983a:	fab3 f383 	clz	r3, r3
 800983e:	b2db      	uxtb	r3, r3
 8009840:	095b      	lsrs	r3, r3, #5
 8009842:	b2db      	uxtb	r3, r3
 8009844:	f043 0301 	orr.w	r3, r3, #1
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b01      	cmp	r3, #1
 800984c:	d102      	bne.n	8009854 <HAL_RCC_OscConfig+0x3a0>
 800984e:	4b93      	ldr	r3, [pc, #588]	; (8009a9c <HAL_RCC_OscConfig+0x5e8>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	e013      	b.n	800987c <HAL_RCC_OscConfig+0x3c8>
 8009854:	2302      	movs	r3, #2
 8009856:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800985a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800985e:	fa93 f3a3 	rbit	r3, r3
 8009862:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8009866:	2302      	movs	r3, #2
 8009868:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800986c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009870:	fa93 f3a3 	rbit	r3, r3
 8009874:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8009878:	4b88      	ldr	r3, [pc, #544]	; (8009a9c <HAL_RCC_OscConfig+0x5e8>)
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	2202      	movs	r2, #2
 800987e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8009882:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8009886:	fa92 f2a2 	rbit	r2, r2
 800988a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800988e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8009892:	fab2 f282 	clz	r2, r2
 8009896:	b2d2      	uxtb	r2, r2
 8009898:	f042 0220 	orr.w	r2, r2, #32
 800989c:	b2d2      	uxtb	r2, r2
 800989e:	f002 021f 	and.w	r2, r2, #31
 80098a2:	2101      	movs	r1, #1
 80098a4:	fa01 f202 	lsl.w	r2, r1, r2
 80098a8:	4013      	ands	r3, r2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00a      	beq.n	80098c4 <HAL_RCC_OscConfig+0x410>
 80098ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d002      	beq.n	80098c4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	f000 be2e 	b.w	800a520 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098c4:	4b75      	ldr	r3, [pc, #468]	; (8009a9c <HAL_RCC_OscConfig+0x5e8>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	695b      	ldr	r3, [r3, #20]
 80098d8:	21f8      	movs	r1, #248	; 0xf8
 80098da:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098de:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80098e2:	fa91 f1a1 	rbit	r1, r1
 80098e6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80098ea:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80098ee:	fab1 f181 	clz	r1, r1
 80098f2:	b2c9      	uxtb	r1, r1
 80098f4:	408b      	lsls	r3, r1
 80098f6:	4969      	ldr	r1, [pc, #420]	; (8009a9c <HAL_RCC_OscConfig+0x5e8>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098fc:	e0fd      	b.n	8009afa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80098fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 8088 	beq.w	8009a20 <HAL_RCC_OscConfig+0x56c>
 8009910:	2301      	movs	r3, #1
 8009912:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009916:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800991a:	fa93 f3a3 	rbit	r3, r3
 800991e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8009922:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009926:	fab3 f383 	clz	r3, r3
 800992a:	b2db      	uxtb	r3, r3
 800992c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009930:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	461a      	mov	r2, r3
 8009938:	2301      	movs	r3, #1
 800993a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800993c:	f7fd fd36 	bl	80073ac <HAL_GetTick>
 8009940:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009944:	e00a      	b.n	800995c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009946:	f7fd fd31 	bl	80073ac <HAL_GetTick>
 800994a:	4602      	mov	r2, r0
 800994c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	2b02      	cmp	r3, #2
 8009954:	d902      	bls.n	800995c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8009956:	2303      	movs	r3, #3
 8009958:	f000 bde2 	b.w	800a520 <HAL_RCC_OscConfig+0x106c>
 800995c:	2302      	movs	r3, #2
 800995e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009962:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8009966:	fa93 f3a3 	rbit	r3, r3
 800996a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800996e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009972:	fab3 f383 	clz	r3, r3
 8009976:	b2db      	uxtb	r3, r3
 8009978:	095b      	lsrs	r3, r3, #5
 800997a:	b2db      	uxtb	r3, r3
 800997c:	f043 0301 	orr.w	r3, r3, #1
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b01      	cmp	r3, #1
 8009984:	d102      	bne.n	800998c <HAL_RCC_OscConfig+0x4d8>
 8009986:	4b45      	ldr	r3, [pc, #276]	; (8009a9c <HAL_RCC_OscConfig+0x5e8>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	e013      	b.n	80099b4 <HAL_RCC_OscConfig+0x500>
 800998c:	2302      	movs	r3, #2
 800998e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009992:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8009996:	fa93 f3a3 	rbit	r3, r3
 800999a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800999e:	2302      	movs	r3, #2
 80099a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80099a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80099a8:	fa93 f3a3 	rbit	r3, r3
 80099ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80099b0:	4b3a      	ldr	r3, [pc, #232]	; (8009a9c <HAL_RCC_OscConfig+0x5e8>)
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	2202      	movs	r2, #2
 80099b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80099ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80099be:	fa92 f2a2 	rbit	r2, r2
 80099c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80099c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80099ca:	fab2 f282 	clz	r2, r2
 80099ce:	b2d2      	uxtb	r2, r2
 80099d0:	f042 0220 	orr.w	r2, r2, #32
 80099d4:	b2d2      	uxtb	r2, r2
 80099d6:	f002 021f 	and.w	r2, r2, #31
 80099da:	2101      	movs	r1, #1
 80099dc:	fa01 f202 	lsl.w	r2, r1, r2
 80099e0:	4013      	ands	r3, r2
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0af      	beq.n	8009946 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099e6:	4b2d      	ldr	r3, [pc, #180]	; (8009a9c <HAL_RCC_OscConfig+0x5e8>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	21f8      	movs	r1, #248	; 0xf8
 80099fc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a00:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009a04:	fa91 f1a1 	rbit	r1, r1
 8009a08:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8009a0c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8009a10:	fab1 f181 	clz	r1, r1
 8009a14:	b2c9      	uxtb	r1, r1
 8009a16:	408b      	lsls	r3, r1
 8009a18:	4920      	ldr	r1, [pc, #128]	; (8009a9c <HAL_RCC_OscConfig+0x5e8>)
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	600b      	str	r3, [r1, #0]
 8009a1e:	e06c      	b.n	8009afa <HAL_RCC_OscConfig+0x646>
 8009a20:	2301      	movs	r3, #1
 8009a22:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a26:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009a2a:	fa93 f3a3 	rbit	r3, r3
 8009a2e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8009a32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a36:	fab3 f383 	clz	r3, r3
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009a40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	461a      	mov	r2, r3
 8009a48:	2300      	movs	r3, #0
 8009a4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a4c:	f7fd fcae 	bl	80073ac <HAL_GetTick>
 8009a50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a54:	e00a      	b.n	8009a6c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a56:	f7fd fca9 	bl	80073ac <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009a60:	1ad3      	subs	r3, r2, r3
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d902      	bls.n	8009a6c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	f000 bd5a 	b.w	800a520 <HAL_RCC_OscConfig+0x106c>
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a76:	fa93 f3a3 	rbit	r3, r3
 8009a7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8009a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a82:	fab3 f383 	clz	r3, r3
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	095b      	lsrs	r3, r3, #5
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	f043 0301 	orr.w	r3, r3, #1
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d104      	bne.n	8009aa0 <HAL_RCC_OscConfig+0x5ec>
 8009a96:	4b01      	ldr	r3, [pc, #4]	; (8009a9c <HAL_RCC_OscConfig+0x5e8>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	e015      	b.n	8009ac8 <HAL_RCC_OscConfig+0x614>
 8009a9c:	40021000 	.word	0x40021000
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009aaa:	fa93 f3a3 	rbit	r3, r3
 8009aae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009ab8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009abc:	fa93 f3a3 	rbit	r3, r3
 8009ac0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009ac4:	4bc8      	ldr	r3, [pc, #800]	; (8009de8 <HAL_RCC_OscConfig+0x934>)
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	2202      	movs	r2, #2
 8009aca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8009ace:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009ad2:	fa92 f2a2 	rbit	r2, r2
 8009ad6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8009ada:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009ade:	fab2 f282 	clz	r2, r2
 8009ae2:	b2d2      	uxtb	r2, r2
 8009ae4:	f042 0220 	orr.w	r2, r2, #32
 8009ae8:	b2d2      	uxtb	r2, r2
 8009aea:	f002 021f 	and.w	r2, r2, #31
 8009aee:	2101      	movs	r1, #1
 8009af0:	fa01 f202 	lsl.w	r2, r1, r2
 8009af4:	4013      	ands	r3, r2
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1ad      	bne.n	8009a56 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009afe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 0308 	and.w	r3, r3, #8
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f000 8110 	beq.w	8009d30 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	699b      	ldr	r3, [r3, #24]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d079      	beq.n	8009c14 <HAL_RCC_OscConfig+0x760>
 8009b20:	2301      	movs	r3, #1
 8009b22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009b2a:	fa93 f3a3 	rbit	r3, r3
 8009b2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8009b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b36:	fab3 f383 	clz	r3, r3
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	4bab      	ldr	r3, [pc, #684]	; (8009dec <HAL_RCC_OscConfig+0x938>)
 8009b40:	4413      	add	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	461a      	mov	r2, r3
 8009b46:	2301      	movs	r3, #1
 8009b48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b4a:	f7fd fc2f 	bl	80073ac <HAL_GetTick>
 8009b4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b52:	e00a      	b.n	8009b6a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b54:	f7fd fc2a 	bl	80073ac <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d902      	bls.n	8009b6a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	f000 bcdb 	b.w	800a520 <HAL_RCC_OscConfig+0x106c>
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b74:	fa93 f3a3 	rbit	r3, r3
 8009b78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009b84:	2202      	movs	r2, #2
 8009b86:	601a      	str	r2, [r3, #0]
 8009b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b8c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	fa93 f2a3 	rbit	r2, r3
 8009b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b9e:	601a      	str	r2, [r3, #0]
 8009ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ba8:	2202      	movs	r2, #2
 8009baa:	601a      	str	r2, [r3, #0]
 8009bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	fa93 f2a3 	rbit	r2, r3
 8009bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009bc2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009bc4:	4b88      	ldr	r3, [pc, #544]	; (8009de8 <HAL_RCC_OscConfig+0x934>)
 8009bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bcc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009bd0:	2102      	movs	r1, #2
 8009bd2:	6019      	str	r1, [r3, #0]
 8009bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bd8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	fa93 f1a3 	rbit	r1, r3
 8009be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009be6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009bea:	6019      	str	r1, [r3, #0]
  return result;
 8009bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bf0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	fab3 f383 	clz	r3, r3
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	f003 031f 	and.w	r3, r3, #31
 8009c06:	2101      	movs	r1, #1
 8009c08:	fa01 f303 	lsl.w	r3, r1, r3
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d0a0      	beq.n	8009b54 <HAL_RCC_OscConfig+0x6a0>
 8009c12:	e08d      	b.n	8009d30 <HAL_RCC_OscConfig+0x87c>
 8009c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c24:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	fa93 f2a3 	rbit	r2, r3
 8009c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009c36:	601a      	str	r2, [r3, #0]
  return result;
 8009c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009c40:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c42:	fab3 f383 	clz	r3, r3
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	461a      	mov	r2, r3
 8009c4a:	4b68      	ldr	r3, [pc, #416]	; (8009dec <HAL_RCC_OscConfig+0x938>)
 8009c4c:	4413      	add	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	461a      	mov	r2, r3
 8009c52:	2300      	movs	r3, #0
 8009c54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c56:	f7fd fba9 	bl	80073ac <HAL_GetTick>
 8009c5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c5e:	e00a      	b.n	8009c76 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c60:	f7fd fba4 	bl	80073ac <HAL_GetTick>
 8009c64:	4602      	mov	r2, r0
 8009c66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d902      	bls.n	8009c76 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8009c70:	2303      	movs	r3, #3
 8009c72:	f000 bc55 	b.w	800a520 <HAL_RCC_OscConfig+0x106c>
 8009c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009c7e:	2202      	movs	r2, #2
 8009c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	fa93 f2a3 	rbit	r2, r3
 8009c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c94:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009ca2:	2202      	movs	r2, #2
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009caa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	fa93 f2a3 	rbit	r2, r3
 8009cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	601a      	str	r2, [r3, #0]
 8009cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	fa93 f2a3 	rbit	r2, r3
 8009cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cdc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009ce0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ce2:	4b41      	ldr	r3, [pc, #260]	; (8009de8 <HAL_RCC_OscConfig+0x934>)
 8009ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009cee:	2102      	movs	r1, #2
 8009cf0:	6019      	str	r1, [r3, #0]
 8009cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cf6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	fa93 f1a3 	rbit	r1, r3
 8009d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d04:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009d08:	6019      	str	r1, [r3, #0]
  return result;
 8009d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d0e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	fab3 f383 	clz	r3, r3
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	f003 031f 	and.w	r3, r3, #31
 8009d24:	2101      	movs	r1, #1
 8009d26:	fa01 f303 	lsl.w	r3, r1, r3
 8009d2a:	4013      	ands	r3, r2
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d197      	bne.n	8009c60 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 0304 	and.w	r3, r3, #4
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 81a1 	beq.w	800a088 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d46:	2300      	movs	r3, #0
 8009d48:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d4c:	4b26      	ldr	r3, [pc, #152]	; (8009de8 <HAL_RCC_OscConfig+0x934>)
 8009d4e:	69db      	ldr	r3, [r3, #28]
 8009d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d116      	bne.n	8009d86 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d58:	4b23      	ldr	r3, [pc, #140]	; (8009de8 <HAL_RCC_OscConfig+0x934>)
 8009d5a:	69db      	ldr	r3, [r3, #28]
 8009d5c:	4a22      	ldr	r2, [pc, #136]	; (8009de8 <HAL_RCC_OscConfig+0x934>)
 8009d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d62:	61d3      	str	r3, [r2, #28]
 8009d64:	4b20      	ldr	r3, [pc, #128]	; (8009de8 <HAL_RCC_OscConfig+0x934>)
 8009d66:	69db      	ldr	r3, [r3, #28]
 8009d68:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8009d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d70:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009d74:	601a      	str	r2, [r3, #0]
 8009d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d7a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009d7e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8009d80:	2301      	movs	r3, #1
 8009d82:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d86:	4b1a      	ldr	r3, [pc, #104]	; (8009df0 <HAL_RCC_OscConfig+0x93c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d11a      	bne.n	8009dc8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d92:	4b17      	ldr	r3, [pc, #92]	; (8009df0 <HAL_RCC_OscConfig+0x93c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a16      	ldr	r2, [pc, #88]	; (8009df0 <HAL_RCC_OscConfig+0x93c>)
 8009d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d9e:	f7fd fb05 	bl	80073ac <HAL_GetTick>
 8009da2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009da6:	e009      	b.n	8009dbc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009da8:	f7fd fb00 	bl	80073ac <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	2b64      	cmp	r3, #100	; 0x64
 8009db6:	d901      	bls.n	8009dbc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e3b1      	b.n	800a520 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009dbc:	4b0c      	ldr	r3, [pc, #48]	; (8009df0 <HAL_RCC_OscConfig+0x93c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d0ef      	beq.n	8009da8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d10d      	bne.n	8009df4 <HAL_RCC_OscConfig+0x940>
 8009dd8:	4b03      	ldr	r3, [pc, #12]	; (8009de8 <HAL_RCC_OscConfig+0x934>)
 8009dda:	6a1b      	ldr	r3, [r3, #32]
 8009ddc:	4a02      	ldr	r2, [pc, #8]	; (8009de8 <HAL_RCC_OscConfig+0x934>)
 8009dde:	f043 0301 	orr.w	r3, r3, #1
 8009de2:	6213      	str	r3, [r2, #32]
 8009de4:	e03c      	b.n	8009e60 <HAL_RCC_OscConfig+0x9ac>
 8009de6:	bf00      	nop
 8009de8:	40021000 	.word	0x40021000
 8009dec:	10908120 	.word	0x10908120
 8009df0:	40007000 	.word	0x40007000
 8009df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009df8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10c      	bne.n	8009e1e <HAL_RCC_OscConfig+0x96a>
 8009e04:	4bc1      	ldr	r3, [pc, #772]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 8009e06:	6a1b      	ldr	r3, [r3, #32]
 8009e08:	4ac0      	ldr	r2, [pc, #768]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 8009e0a:	f023 0301 	bic.w	r3, r3, #1
 8009e0e:	6213      	str	r3, [r2, #32]
 8009e10:	4bbe      	ldr	r3, [pc, #760]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 8009e12:	6a1b      	ldr	r3, [r3, #32]
 8009e14:	4abd      	ldr	r2, [pc, #756]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 8009e16:	f023 0304 	bic.w	r3, r3, #4
 8009e1a:	6213      	str	r3, [r2, #32]
 8009e1c:	e020      	b.n	8009e60 <HAL_RCC_OscConfig+0x9ac>
 8009e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	2b05      	cmp	r3, #5
 8009e2c:	d10c      	bne.n	8009e48 <HAL_RCC_OscConfig+0x994>
 8009e2e:	4bb7      	ldr	r3, [pc, #732]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 8009e30:	6a1b      	ldr	r3, [r3, #32]
 8009e32:	4ab6      	ldr	r2, [pc, #728]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 8009e34:	f043 0304 	orr.w	r3, r3, #4
 8009e38:	6213      	str	r3, [r2, #32]
 8009e3a:	4bb4      	ldr	r3, [pc, #720]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 8009e3c:	6a1b      	ldr	r3, [r3, #32]
 8009e3e:	4ab3      	ldr	r2, [pc, #716]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 8009e40:	f043 0301 	orr.w	r3, r3, #1
 8009e44:	6213      	str	r3, [r2, #32]
 8009e46:	e00b      	b.n	8009e60 <HAL_RCC_OscConfig+0x9ac>
 8009e48:	4bb0      	ldr	r3, [pc, #704]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 8009e4a:	6a1b      	ldr	r3, [r3, #32]
 8009e4c:	4aaf      	ldr	r2, [pc, #700]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 8009e4e:	f023 0301 	bic.w	r3, r3, #1
 8009e52:	6213      	str	r3, [r2, #32]
 8009e54:	4bad      	ldr	r3, [pc, #692]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 8009e56:	6a1b      	ldr	r3, [r3, #32]
 8009e58:	4aac      	ldr	r2, [pc, #688]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 8009e5a:	f023 0304 	bic.w	r3, r3, #4
 8009e5e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f000 8081 	beq.w	8009f74 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e72:	f7fd fa9b 	bl	80073ac <HAL_GetTick>
 8009e76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e7a:	e00b      	b.n	8009e94 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e7c:	f7fd fa96 	bl	80073ac <HAL_GetTick>
 8009e80:	4602      	mov	r2, r0
 8009e82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d901      	bls.n	8009e94 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8009e90:	2303      	movs	r3, #3
 8009e92:	e345      	b.n	800a520 <HAL_RCC_OscConfig+0x106c>
 8009e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e98:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009e9c:	2202      	movs	r2, #2
 8009e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ea4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	fa93 f2a3 	rbit	r2, r3
 8009eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009eb2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009eb6:	601a      	str	r2, [r3, #0]
 8009eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ebc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009ec0:	2202      	movs	r2, #2
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ec8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	fa93 f2a3 	rbit	r2, r3
 8009ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ed6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009eda:	601a      	str	r2, [r3, #0]
  return result;
 8009edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ee0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009ee4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ee6:	fab3 f383 	clz	r3, r3
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	095b      	lsrs	r3, r3, #5
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	f043 0302 	orr.w	r3, r3, #2
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	d102      	bne.n	8009f00 <HAL_RCC_OscConfig+0xa4c>
 8009efa:	4b84      	ldr	r3, [pc, #528]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	e013      	b.n	8009f28 <HAL_RCC_OscConfig+0xa74>
 8009f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f04:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009f08:	2202      	movs	r2, #2
 8009f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f10:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	fa93 f2a3 	rbit	r2, r3
 8009f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f1e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8009f22:	601a      	str	r2, [r3, #0]
 8009f24:	4b79      	ldr	r3, [pc, #484]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009f2c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009f30:	2102      	movs	r1, #2
 8009f32:	6011      	str	r1, [r2, #0]
 8009f34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009f38:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009f3c:	6812      	ldr	r2, [r2, #0]
 8009f3e:	fa92 f1a2 	rbit	r1, r2
 8009f42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009f46:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009f4a:	6011      	str	r1, [r2, #0]
  return result;
 8009f4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009f50:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009f54:	6812      	ldr	r2, [r2, #0]
 8009f56:	fab2 f282 	clz	r2, r2
 8009f5a:	b2d2      	uxtb	r2, r2
 8009f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f60:	b2d2      	uxtb	r2, r2
 8009f62:	f002 021f 	and.w	r2, r2, #31
 8009f66:	2101      	movs	r1, #1
 8009f68:	fa01 f202 	lsl.w	r2, r1, r2
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d084      	beq.n	8009e7c <HAL_RCC_OscConfig+0x9c8>
 8009f72:	e07f      	b.n	800a074 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f74:	f7fd fa1a 	bl	80073ac <HAL_GetTick>
 8009f78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f7c:	e00b      	b.n	8009f96 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f7e:	f7fd fa15 	bl	80073ac <HAL_GetTick>
 8009f82:	4602      	mov	r2, r0
 8009f84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d901      	bls.n	8009f96 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e2c4      	b.n	800a520 <HAL_RCC_OscConfig+0x106c>
 8009f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f9a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009fa6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	fa93 f2a3 	rbit	r2, r3
 8009fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009fb4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8009fb8:	601a      	str	r2, [r3, #0]
 8009fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009fbe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	601a      	str	r2, [r3, #0]
 8009fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009fca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	fa93 f2a3 	rbit	r2, r3
 8009fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009fd8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009fdc:	601a      	str	r2, [r3, #0]
  return result;
 8009fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009fe2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009fe6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009fe8:	fab3 f383 	clz	r3, r3
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	095b      	lsrs	r3, r3, #5
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	f043 0302 	orr.w	r3, r3, #2
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	d102      	bne.n	800a002 <HAL_RCC_OscConfig+0xb4e>
 8009ffc:	4b43      	ldr	r3, [pc, #268]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 8009ffe:	6a1b      	ldr	r3, [r3, #32]
 800a000:	e013      	b.n	800a02a <HAL_RCC_OscConfig+0xb76>
 800a002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a006:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800a00a:	2202      	movs	r2, #2
 800a00c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a00e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a012:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	fa93 f2a3 	rbit	r2, r3
 800a01c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a020:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	4b39      	ldr	r3, [pc, #228]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 800a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a02e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800a032:	2102      	movs	r1, #2
 800a034:	6011      	str	r1, [r2, #0]
 800a036:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a03a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800a03e:	6812      	ldr	r2, [r2, #0]
 800a040:	fa92 f1a2 	rbit	r1, r2
 800a044:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a048:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800a04c:	6011      	str	r1, [r2, #0]
  return result;
 800a04e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a052:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800a056:	6812      	ldr	r2, [r2, #0]
 800a058:	fab2 f282 	clz	r2, r2
 800a05c:	b2d2      	uxtb	r2, r2
 800a05e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a062:	b2d2      	uxtb	r2, r2
 800a064:	f002 021f 	and.w	r2, r2, #31
 800a068:	2101      	movs	r1, #1
 800a06a:	fa01 f202 	lsl.w	r2, r1, r2
 800a06e:	4013      	ands	r3, r2
 800a070:	2b00      	cmp	r3, #0
 800a072:	d184      	bne.n	8009f7e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a074:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d105      	bne.n	800a088 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a07c:	4b23      	ldr	r3, [pc, #140]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 800a07e:	69db      	ldr	r3, [r3, #28]
 800a080:	4a22      	ldr	r2, [pc, #136]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 800a082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a086:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a08c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	69db      	ldr	r3, [r3, #28]
 800a094:	2b00      	cmp	r3, #0
 800a096:	f000 8242 	beq.w	800a51e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a09a:	4b1c      	ldr	r3, [pc, #112]	; (800a10c <HAL_RCC_OscConfig+0xc58>)
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f003 030c 	and.w	r3, r3, #12
 800a0a2:	2b08      	cmp	r3, #8
 800a0a4:	f000 8213 	beq.w	800a4ce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a0a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	69db      	ldr	r3, [r3, #28]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	f040 8162 	bne.w	800a37e <HAL_RCC_OscConfig+0xeca>
 800a0ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0be:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800a0c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a0c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0cc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	fa93 f2a3 	rbit	r2, r3
 800a0d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0da:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800a0de:	601a      	str	r2, [r3, #0]
  return result;
 800a0e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a0e4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800a0e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0ea:	fab3 f383 	clz	r3, r3
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a0f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a100:	f7fd f954 	bl	80073ac <HAL_GetTick>
 800a104:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a108:	e00c      	b.n	800a124 <HAL_RCC_OscConfig+0xc70>
 800a10a:	bf00      	nop
 800a10c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a110:	f7fd f94c 	bl	80073ac <HAL_GetTick>
 800a114:	4602      	mov	r2, r0
 800a116:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d901      	bls.n	800a124 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e1fd      	b.n	800a520 <HAL_RCC_OscConfig+0x106c>
 800a124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a128:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800a12c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a136:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	fa93 f2a3 	rbit	r2, r3
 800a140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a144:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800a148:	601a      	str	r2, [r3, #0]
  return result;
 800a14a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a14e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800a152:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a154:	fab3 f383 	clz	r3, r3
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	095b      	lsrs	r3, r3, #5
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	f043 0301 	orr.w	r3, r3, #1
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b01      	cmp	r3, #1
 800a166:	d102      	bne.n	800a16e <HAL_RCC_OscConfig+0xcba>
 800a168:	4bb0      	ldr	r3, [pc, #704]	; (800a42c <HAL_RCC_OscConfig+0xf78>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	e027      	b.n	800a1be <HAL_RCC_OscConfig+0xd0a>
 800a16e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a172:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800a176:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a17a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a17c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a180:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	fa93 f2a3 	rbit	r2, r3
 800a18a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a18e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a198:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800a19c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a1a0:	601a      	str	r2, [r3, #0]
 800a1a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a1a6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	fa93 f2a3 	rbit	r2, r3
 800a1b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a1b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	4b9c      	ldr	r3, [pc, #624]	; (800a42c <HAL_RCC_OscConfig+0xf78>)
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a1c2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800a1c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800a1ca:	6011      	str	r1, [r2, #0]
 800a1cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a1d0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800a1d4:	6812      	ldr	r2, [r2, #0]
 800a1d6:	fa92 f1a2 	rbit	r1, r2
 800a1da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a1de:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800a1e2:	6011      	str	r1, [r2, #0]
  return result;
 800a1e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a1e8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800a1ec:	6812      	ldr	r2, [r2, #0]
 800a1ee:	fab2 f282 	clz	r2, r2
 800a1f2:	b2d2      	uxtb	r2, r2
 800a1f4:	f042 0220 	orr.w	r2, r2, #32
 800a1f8:	b2d2      	uxtb	r2, r2
 800a1fa:	f002 021f 	and.w	r2, r2, #31
 800a1fe:	2101      	movs	r1, #1
 800a200:	fa01 f202 	lsl.w	r2, r1, r2
 800a204:	4013      	ands	r3, r2
 800a206:	2b00      	cmp	r3, #0
 800a208:	d182      	bne.n	800a110 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a20a:	4b88      	ldr	r3, [pc, #544]	; (800a42c <HAL_RCC_OscConfig+0xf78>)
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a216:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a21e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a222:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	430b      	orrs	r3, r1
 800a22c:	497f      	ldr	r1, [pc, #508]	; (800a42c <HAL_RCC_OscConfig+0xf78>)
 800a22e:	4313      	orrs	r3, r2
 800a230:	604b      	str	r3, [r1, #4]
 800a232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a236:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800a23a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a23e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a244:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	fa93 f2a3 	rbit	r2, r3
 800a24e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a252:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a256:	601a      	str	r2, [r3, #0]
  return result;
 800a258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a25c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a260:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a262:	fab3 f383 	clz	r3, r3
 800a266:	b2db      	uxtb	r3, r3
 800a268:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a26c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	461a      	mov	r2, r3
 800a274:	2301      	movs	r3, #1
 800a276:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a278:	f7fd f898 	bl	80073ac <HAL_GetTick>
 800a27c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a280:	e009      	b.n	800a296 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a282:	f7fd f893 	bl	80073ac <HAL_GetTick>
 800a286:	4602      	mov	r2, r0
 800a288:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d901      	bls.n	800a296 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e144      	b.n	800a520 <HAL_RCC_OscConfig+0x106c>
 800a296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a29a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800a29e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a2a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a2a8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	fa93 f2a3 	rbit	r2, r3
 800a2b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a2b6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800a2ba:	601a      	str	r2, [r3, #0]
  return result;
 800a2bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a2c0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800a2c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a2c6:	fab3 f383 	clz	r3, r3
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	095b      	lsrs	r3, r3, #5
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	f043 0301 	orr.w	r3, r3, #1
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d102      	bne.n	800a2e0 <HAL_RCC_OscConfig+0xe2c>
 800a2da:	4b54      	ldr	r3, [pc, #336]	; (800a42c <HAL_RCC_OscConfig+0xf78>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	e027      	b.n	800a330 <HAL_RCC_OscConfig+0xe7c>
 800a2e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a2e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800a2e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a2ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a2f2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	fa93 f2a3 	rbit	r2, r3
 800a2fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a300:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800a304:	601a      	str	r2, [r3, #0]
 800a306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a30a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800a30e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a312:	601a      	str	r2, [r3, #0]
 800a314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a318:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	fa93 f2a3 	rbit	r2, r3
 800a322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a326:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800a32a:	601a      	str	r2, [r3, #0]
 800a32c:	4b3f      	ldr	r3, [pc, #252]	; (800a42c <HAL_RCC_OscConfig+0xf78>)
 800a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a330:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a334:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800a338:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800a33c:	6011      	str	r1, [r2, #0]
 800a33e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a342:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800a346:	6812      	ldr	r2, [r2, #0]
 800a348:	fa92 f1a2 	rbit	r1, r2
 800a34c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a350:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800a354:	6011      	str	r1, [r2, #0]
  return result;
 800a356:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a35a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800a35e:	6812      	ldr	r2, [r2, #0]
 800a360:	fab2 f282 	clz	r2, r2
 800a364:	b2d2      	uxtb	r2, r2
 800a366:	f042 0220 	orr.w	r2, r2, #32
 800a36a:	b2d2      	uxtb	r2, r2
 800a36c:	f002 021f 	and.w	r2, r2, #31
 800a370:	2101      	movs	r1, #1
 800a372:	fa01 f202 	lsl.w	r2, r1, r2
 800a376:	4013      	ands	r3, r2
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d082      	beq.n	800a282 <HAL_RCC_OscConfig+0xdce>
 800a37c:	e0cf      	b.n	800a51e <HAL_RCC_OscConfig+0x106a>
 800a37e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a382:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a386:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a38a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a38c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a390:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	fa93 f2a3 	rbit	r2, r3
 800a39a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a39e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800a3a2:	601a      	str	r2, [r3, #0]
  return result;
 800a3a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a3a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800a3ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3ae:	fab3 f383 	clz	r3, r3
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800a3b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	461a      	mov	r2, r3
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3c4:	f7fc fff2 	bl	80073ac <HAL_GetTick>
 800a3c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a3cc:	e009      	b.n	800a3e2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a3ce:	f7fc ffed 	bl	80073ac <HAL_GetTick>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d901      	bls.n	800a3e2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	e09e      	b.n	800a520 <HAL_RCC_OscConfig+0x106c>
 800a3e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a3e6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800a3ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a3ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a3f4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	fa93 f2a3 	rbit	r2, r3
 800a3fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a402:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a406:	601a      	str	r2, [r3, #0]
  return result;
 800a408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a40c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800a410:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a412:	fab3 f383 	clz	r3, r3
 800a416:	b2db      	uxtb	r3, r3
 800a418:	095b      	lsrs	r3, r3, #5
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	f043 0301 	orr.w	r3, r3, #1
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b01      	cmp	r3, #1
 800a424:	d104      	bne.n	800a430 <HAL_RCC_OscConfig+0xf7c>
 800a426:	4b01      	ldr	r3, [pc, #4]	; (800a42c <HAL_RCC_OscConfig+0xf78>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	e029      	b.n	800a480 <HAL_RCC_OscConfig+0xfcc>
 800a42c:	40021000 	.word	0x40021000
 800a430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a434:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a43c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a43e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a442:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	fa93 f2a3 	rbit	r2, r3
 800a44c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a450:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800a454:	601a      	str	r2, [r3, #0]
 800a456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a45a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a45e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a468:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	fa93 f2a3 	rbit	r2, r3
 800a472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a476:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800a47a:	601a      	str	r2, [r3, #0]
 800a47c:	4b2b      	ldr	r3, [pc, #172]	; (800a52c <HAL_RCC_OscConfig+0x1078>)
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a484:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800a488:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800a48c:	6011      	str	r1, [r2, #0]
 800a48e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a492:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800a496:	6812      	ldr	r2, [r2, #0]
 800a498:	fa92 f1a2 	rbit	r1, r2
 800a49c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a4a0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800a4a4:	6011      	str	r1, [r2, #0]
  return result;
 800a4a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800a4aa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800a4ae:	6812      	ldr	r2, [r2, #0]
 800a4b0:	fab2 f282 	clz	r2, r2
 800a4b4:	b2d2      	uxtb	r2, r2
 800a4b6:	f042 0220 	orr.w	r2, r2, #32
 800a4ba:	b2d2      	uxtb	r2, r2
 800a4bc:	f002 021f 	and.w	r2, r2, #31
 800a4c0:	2101      	movs	r1, #1
 800a4c2:	fa01 f202 	lsl.w	r2, r1, r2
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d180      	bne.n	800a3ce <HAL_RCC_OscConfig+0xf1a>
 800a4cc:	e027      	b.n	800a51e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a4ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a4d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	69db      	ldr	r3, [r3, #28]
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d101      	bne.n	800a4e2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e01e      	b.n	800a520 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a4e2:	4b12      	ldr	r3, [pc, #72]	; (800a52c <HAL_RCC_OscConfig+0x1078>)
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800a4ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800a4ee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a4f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a4f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6a1b      	ldr	r3, [r3, #32]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d10b      	bne.n	800a51a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800a502:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800a506:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a50a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a50e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800a516:	429a      	cmp	r2, r3
 800a518:	d001      	beq.n	800a51e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e000      	b.n	800a520 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	40021000 	.word	0x40021000

0800a530 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b09e      	sub	sp, #120	; 0x78
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800a53a:	2300      	movs	r3, #0
 800a53c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d101      	bne.n	800a548 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	e162      	b.n	800a80e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a548:	4b90      	ldr	r3, [pc, #576]	; (800a78c <HAL_RCC_ClockConfig+0x25c>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 0307 	and.w	r3, r3, #7
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	429a      	cmp	r2, r3
 800a554:	d910      	bls.n	800a578 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a556:	4b8d      	ldr	r3, [pc, #564]	; (800a78c <HAL_RCC_ClockConfig+0x25c>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f023 0207 	bic.w	r2, r3, #7
 800a55e:	498b      	ldr	r1, [pc, #556]	; (800a78c <HAL_RCC_ClockConfig+0x25c>)
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	4313      	orrs	r3, r2
 800a564:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a566:	4b89      	ldr	r3, [pc, #548]	; (800a78c <HAL_RCC_ClockConfig+0x25c>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 0307 	and.w	r3, r3, #7
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	429a      	cmp	r2, r3
 800a572:	d001      	beq.n	800a578 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e14a      	b.n	800a80e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 0302 	and.w	r3, r3, #2
 800a580:	2b00      	cmp	r3, #0
 800a582:	d008      	beq.n	800a596 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a584:	4b82      	ldr	r3, [pc, #520]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	497f      	ldr	r1, [pc, #508]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a592:	4313      	orrs	r3, r2
 800a594:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 80dc 	beq.w	800a75c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d13c      	bne.n	800a626 <HAL_RCC_ClockConfig+0xf6>
 800a5ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a5b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5b4:	fa93 f3a3 	rbit	r3, r3
 800a5b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800a5ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5bc:	fab3 f383 	clz	r3, r3
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	095b      	lsrs	r3, r3, #5
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	f043 0301 	orr.w	r3, r3, #1
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d102      	bne.n	800a5d6 <HAL_RCC_ClockConfig+0xa6>
 800a5d0:	4b6f      	ldr	r3, [pc, #444]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	e00f      	b.n	800a5f6 <HAL_RCC_ClockConfig+0xc6>
 800a5d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a5da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a5de:	fa93 f3a3 	rbit	r3, r3
 800a5e2:	667b      	str	r3, [r7, #100]	; 0x64
 800a5e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a5e8:	663b      	str	r3, [r7, #96]	; 0x60
 800a5ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5ec:	fa93 f3a3 	rbit	r3, r3
 800a5f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5f2:	4b67      	ldr	r3, [pc, #412]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a5fa:	65ba      	str	r2, [r7, #88]	; 0x58
 800a5fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5fe:	fa92 f2a2 	rbit	r2, r2
 800a602:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800a604:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a606:	fab2 f282 	clz	r2, r2
 800a60a:	b2d2      	uxtb	r2, r2
 800a60c:	f042 0220 	orr.w	r2, r2, #32
 800a610:	b2d2      	uxtb	r2, r2
 800a612:	f002 021f 	and.w	r2, r2, #31
 800a616:	2101      	movs	r1, #1
 800a618:	fa01 f202 	lsl.w	r2, r1, r2
 800a61c:	4013      	ands	r3, r2
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d17b      	bne.n	800a71a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e0f3      	b.n	800a80e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d13c      	bne.n	800a6a8 <HAL_RCC_ClockConfig+0x178>
 800a62e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a632:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a636:	fa93 f3a3 	rbit	r3, r3
 800a63a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800a63c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a63e:	fab3 f383 	clz	r3, r3
 800a642:	b2db      	uxtb	r3, r3
 800a644:	095b      	lsrs	r3, r3, #5
 800a646:	b2db      	uxtb	r3, r3
 800a648:	f043 0301 	orr.w	r3, r3, #1
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d102      	bne.n	800a658 <HAL_RCC_ClockConfig+0x128>
 800a652:	4b4f      	ldr	r3, [pc, #316]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	e00f      	b.n	800a678 <HAL_RCC_ClockConfig+0x148>
 800a658:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a65c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a65e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a660:	fa93 f3a3 	rbit	r3, r3
 800a664:	647b      	str	r3, [r7, #68]	; 0x44
 800a666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a66a:	643b      	str	r3, [r7, #64]	; 0x40
 800a66c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a66e:	fa93 f3a3 	rbit	r3, r3
 800a672:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a674:	4b46      	ldr	r3, [pc, #280]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a678:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a67c:	63ba      	str	r2, [r7, #56]	; 0x38
 800a67e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a680:	fa92 f2a2 	rbit	r2, r2
 800a684:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800a686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a688:	fab2 f282 	clz	r2, r2
 800a68c:	b2d2      	uxtb	r2, r2
 800a68e:	f042 0220 	orr.w	r2, r2, #32
 800a692:	b2d2      	uxtb	r2, r2
 800a694:	f002 021f 	and.w	r2, r2, #31
 800a698:	2101      	movs	r1, #1
 800a69a:	fa01 f202 	lsl.w	r2, r1, r2
 800a69e:	4013      	ands	r3, r2
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d13a      	bne.n	800a71a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e0b2      	b.n	800a80e <HAL_RCC_ClockConfig+0x2de>
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ae:	fa93 f3a3 	rbit	r3, r3
 800a6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6b6:	fab3 f383 	clz	r3, r3
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	095b      	lsrs	r3, r3, #5
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	f043 0301 	orr.w	r3, r3, #1
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d102      	bne.n	800a6d0 <HAL_RCC_ClockConfig+0x1a0>
 800a6ca:	4b31      	ldr	r3, [pc, #196]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	e00d      	b.n	800a6ec <HAL_RCC_ClockConfig+0x1bc>
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d6:	fa93 f3a3 	rbit	r3, r3
 800a6da:	627b      	str	r3, [r7, #36]	; 0x24
 800a6dc:	2302      	movs	r3, #2
 800a6de:	623b      	str	r3, [r7, #32]
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	fa93 f3a3 	rbit	r3, r3
 800a6e6:	61fb      	str	r3, [r7, #28]
 800a6e8:	4b29      	ldr	r3, [pc, #164]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ec:	2202      	movs	r2, #2
 800a6ee:	61ba      	str	r2, [r7, #24]
 800a6f0:	69ba      	ldr	r2, [r7, #24]
 800a6f2:	fa92 f2a2 	rbit	r2, r2
 800a6f6:	617a      	str	r2, [r7, #20]
  return result;
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	fab2 f282 	clz	r2, r2
 800a6fe:	b2d2      	uxtb	r2, r2
 800a700:	f042 0220 	orr.w	r2, r2, #32
 800a704:	b2d2      	uxtb	r2, r2
 800a706:	f002 021f 	and.w	r2, r2, #31
 800a70a:	2101      	movs	r1, #1
 800a70c:	fa01 f202 	lsl.w	r2, r1, r2
 800a710:	4013      	ands	r3, r2
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	e079      	b.n	800a80e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a71a:	4b1d      	ldr	r3, [pc, #116]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	f023 0203 	bic.w	r2, r3, #3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	491a      	ldr	r1, [pc, #104]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a728:	4313      	orrs	r3, r2
 800a72a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a72c:	f7fc fe3e 	bl	80073ac <HAL_GetTick>
 800a730:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a732:	e00a      	b.n	800a74a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a734:	f7fc fe3a 	bl	80073ac <HAL_GetTick>
 800a738:	4602      	mov	r2, r0
 800a73a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a742:	4293      	cmp	r3, r2
 800a744:	d901      	bls.n	800a74a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800a746:	2303      	movs	r3, #3
 800a748:	e061      	b.n	800a80e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a74a:	4b11      	ldr	r3, [pc, #68]	; (800a790 <HAL_RCC_ClockConfig+0x260>)
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	f003 020c 	and.w	r2, r3, #12
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	429a      	cmp	r2, r3
 800a75a:	d1eb      	bne.n	800a734 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a75c:	4b0b      	ldr	r3, [pc, #44]	; (800a78c <HAL_RCC_ClockConfig+0x25c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 0307 	and.w	r3, r3, #7
 800a764:	683a      	ldr	r2, [r7, #0]
 800a766:	429a      	cmp	r2, r3
 800a768:	d214      	bcs.n	800a794 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a76a:	4b08      	ldr	r3, [pc, #32]	; (800a78c <HAL_RCC_ClockConfig+0x25c>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f023 0207 	bic.w	r2, r3, #7
 800a772:	4906      	ldr	r1, [pc, #24]	; (800a78c <HAL_RCC_ClockConfig+0x25c>)
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	4313      	orrs	r3, r2
 800a778:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a77a:	4b04      	ldr	r3, [pc, #16]	; (800a78c <HAL_RCC_ClockConfig+0x25c>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f003 0307 	and.w	r3, r3, #7
 800a782:	683a      	ldr	r2, [r7, #0]
 800a784:	429a      	cmp	r2, r3
 800a786:	d005      	beq.n	800a794 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	e040      	b.n	800a80e <HAL_RCC_ClockConfig+0x2de>
 800a78c:	40022000 	.word	0x40022000
 800a790:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 0304 	and.w	r3, r3, #4
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d008      	beq.n	800a7b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a7a0:	4b1d      	ldr	r3, [pc, #116]	; (800a818 <HAL_RCC_ClockConfig+0x2e8>)
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	491a      	ldr	r1, [pc, #104]	; (800a818 <HAL_RCC_ClockConfig+0x2e8>)
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 0308 	and.w	r3, r3, #8
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d009      	beq.n	800a7d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a7be:	4b16      	ldr	r3, [pc, #88]	; (800a818 <HAL_RCC_ClockConfig+0x2e8>)
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	00db      	lsls	r3, r3, #3
 800a7cc:	4912      	ldr	r1, [pc, #72]	; (800a818 <HAL_RCC_ClockConfig+0x2e8>)
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800a7d2:	f000 f829 	bl	800a828 <HAL_RCC_GetSysClockFreq>
 800a7d6:	4601      	mov	r1, r0
 800a7d8:	4b0f      	ldr	r3, [pc, #60]	; (800a818 <HAL_RCC_ClockConfig+0x2e8>)
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7e0:	22f0      	movs	r2, #240	; 0xf0
 800a7e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7e4:	693a      	ldr	r2, [r7, #16]
 800a7e6:	fa92 f2a2 	rbit	r2, r2
 800a7ea:	60fa      	str	r2, [r7, #12]
  return result;
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	fab2 f282 	clz	r2, r2
 800a7f2:	b2d2      	uxtb	r2, r2
 800a7f4:	40d3      	lsrs	r3, r2
 800a7f6:	4a09      	ldr	r2, [pc, #36]	; (800a81c <HAL_RCC_ClockConfig+0x2ec>)
 800a7f8:	5cd3      	ldrb	r3, [r2, r3]
 800a7fa:	fa21 f303 	lsr.w	r3, r1, r3
 800a7fe:	4a08      	ldr	r2, [pc, #32]	; (800a820 <HAL_RCC_ClockConfig+0x2f0>)
 800a800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800a802:	4b08      	ldr	r3, [pc, #32]	; (800a824 <HAL_RCC_ClockConfig+0x2f4>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4618      	mov	r0, r3
 800a808:	f7fc fd8c 	bl	8007324 <HAL_InitTick>
  
  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3778      	adds	r7, #120	; 0x78
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	40021000 	.word	0x40021000
 800a81c:	0800ec20 	.word	0x0800ec20
 800a820:	20000064 	.word	0x20000064
 800a824:	20000068 	.word	0x20000068

0800a828 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a828:	b480      	push	{r7}
 800a82a:	b08b      	sub	sp, #44	; 0x2c
 800a82c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a82e:	2300      	movs	r3, #0
 800a830:	61fb      	str	r3, [r7, #28]
 800a832:	2300      	movs	r3, #0
 800a834:	61bb      	str	r3, [r7, #24]
 800a836:	2300      	movs	r3, #0
 800a838:	627b      	str	r3, [r7, #36]	; 0x24
 800a83a:	2300      	movs	r3, #0
 800a83c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a83e:	2300      	movs	r3, #0
 800a840:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800a842:	4b29      	ldr	r3, [pc, #164]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	f003 030c 	and.w	r3, r3, #12
 800a84e:	2b04      	cmp	r3, #4
 800a850:	d002      	beq.n	800a858 <HAL_RCC_GetSysClockFreq+0x30>
 800a852:	2b08      	cmp	r3, #8
 800a854:	d003      	beq.n	800a85e <HAL_RCC_GetSysClockFreq+0x36>
 800a856:	e03c      	b.n	800a8d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a858:	4b24      	ldr	r3, [pc, #144]	; (800a8ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800a85a:	623b      	str	r3, [r7, #32]
      break;
 800a85c:	e03c      	b.n	800a8d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800a864:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800a868:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	fa92 f2a2 	rbit	r2, r2
 800a870:	607a      	str	r2, [r7, #4]
  return result;
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	fab2 f282 	clz	r2, r2
 800a878:	b2d2      	uxtb	r2, r2
 800a87a:	40d3      	lsrs	r3, r2
 800a87c:	4a1c      	ldr	r2, [pc, #112]	; (800a8f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800a87e:	5cd3      	ldrb	r3, [r2, r3]
 800a880:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800a882:	4b19      	ldr	r3, [pc, #100]	; (800a8e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a886:	f003 030f 	and.w	r3, r3, #15
 800a88a:	220f      	movs	r2, #15
 800a88c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a88e:	693a      	ldr	r2, [r7, #16]
 800a890:	fa92 f2a2 	rbit	r2, r2
 800a894:	60fa      	str	r2, [r7, #12]
  return result;
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	fab2 f282 	clz	r2, r2
 800a89c:	b2d2      	uxtb	r2, r2
 800a89e:	40d3      	lsrs	r3, r2
 800a8a0:	4a14      	ldr	r2, [pc, #80]	; (800a8f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a8a2:	5cd3      	ldrb	r3, [r2, r3]
 800a8a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d008      	beq.n	800a8c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a8b0:	4a0e      	ldr	r2, [pc, #56]	; (800a8ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	fb02 f303 	mul.w	r3, r2, r3
 800a8be:	627b      	str	r3, [r7, #36]	; 0x24
 800a8c0:	e004      	b.n	800a8cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	4a0c      	ldr	r2, [pc, #48]	; (800a8f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a8c6:	fb02 f303 	mul.w	r3, r2, r3
 800a8ca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	623b      	str	r3, [r7, #32]
      break;
 800a8d0:	e002      	b.n	800a8d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a8d2:	4b06      	ldr	r3, [pc, #24]	; (800a8ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800a8d4:	623b      	str	r3, [r7, #32]
      break;
 800a8d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a8d8:	6a3b      	ldr	r3, [r7, #32]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	372c      	adds	r7, #44	; 0x2c
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	40021000 	.word	0x40021000
 800a8ec:	007a1200 	.word	0x007a1200
 800a8f0:	0800ec38 	.word	0x0800ec38
 800a8f4:	0800ec48 	.word	0x0800ec48
 800a8f8:	003d0900 	.word	0x003d0900

0800a8fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a900:	4b03      	ldr	r3, [pc, #12]	; (800a910 <HAL_RCC_GetHCLKFreq+0x14>)
 800a902:	681b      	ldr	r3, [r3, #0]
}
 800a904:	4618      	mov	r0, r3
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	20000064 	.word	0x20000064

0800a914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800a91a:	f7ff ffef 	bl	800a8fc <HAL_RCC_GetHCLKFreq>
 800a91e:	4601      	mov	r1, r0
 800a920:	4b0b      	ldr	r3, [pc, #44]	; (800a950 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a928:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a92c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	fa92 f2a2 	rbit	r2, r2
 800a934:	603a      	str	r2, [r7, #0]
  return result;
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	fab2 f282 	clz	r2, r2
 800a93c:	b2d2      	uxtb	r2, r2
 800a93e:	40d3      	lsrs	r3, r2
 800a940:	4a04      	ldr	r2, [pc, #16]	; (800a954 <HAL_RCC_GetPCLK1Freq+0x40>)
 800a942:	5cd3      	ldrb	r3, [r2, r3]
 800a944:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800a948:	4618      	mov	r0, r3
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	40021000 	.word	0x40021000
 800a954:	0800ec30 	.word	0x0800ec30

0800a958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800a95e:	f7ff ffcd 	bl	800a8fc <HAL_RCC_GetHCLKFreq>
 800a962:	4601      	mov	r1, r0
 800a964:	4b0b      	ldr	r3, [pc, #44]	; (800a994 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800a96c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a970:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	fa92 f2a2 	rbit	r2, r2
 800a978:	603a      	str	r2, [r7, #0]
  return result;
 800a97a:	683a      	ldr	r2, [r7, #0]
 800a97c:	fab2 f282 	clz	r2, r2
 800a980:	b2d2      	uxtb	r2, r2
 800a982:	40d3      	lsrs	r3, r2
 800a984:	4a04      	ldr	r2, [pc, #16]	; (800a998 <HAL_RCC_GetPCLK2Freq+0x40>)
 800a986:	5cd3      	ldrb	r3, [r2, r3]
 800a988:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800a98c:	4618      	mov	r0, r3
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	40021000 	.word	0x40021000
 800a998:	0800ec30 	.word	0x0800ec30

0800a99c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b092      	sub	sp, #72	; 0x48
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f000 80d4 	beq.w	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a9c0:	4b4e      	ldr	r3, [pc, #312]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9c2:	69db      	ldr	r3, [r3, #28]
 800a9c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10e      	bne.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9cc:	4b4b      	ldr	r3, [pc, #300]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9ce:	69db      	ldr	r3, [r3, #28]
 800a9d0:	4a4a      	ldr	r2, [pc, #296]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9d6:	61d3      	str	r3, [r2, #28]
 800a9d8:	4b48      	ldr	r3, [pc, #288]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9da:	69db      	ldr	r3, [r3, #28]
 800a9dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9e0:	60bb      	str	r3, [r7, #8]
 800a9e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9ea:	4b45      	ldr	r3, [pc, #276]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d118      	bne.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a9f6:	4b42      	ldr	r3, [pc, #264]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a41      	ldr	r2, [pc, #260]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a9fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa02:	f7fc fcd3 	bl	80073ac <HAL_GetTick>
 800aa06:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa08:	e008      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa0a:	f7fc fccf 	bl	80073ac <HAL_GetTick>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	2b64      	cmp	r3, #100	; 0x64
 800aa16:	d901      	bls.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800aa18:	2303      	movs	r3, #3
 800aa1a:	e169      	b.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa1c:	4b38      	ldr	r3, [pc, #224]	; (800ab00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d0f0      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800aa28:	4b34      	ldr	r3, [pc, #208]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa2a:	6a1b      	ldr	r3, [r3, #32]
 800aa2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa30:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800aa32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 8084 	beq.w	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d07c      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aa48:	4b2c      	ldr	r3, [pc, #176]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa4a:	6a1b      	ldr	r3, [r3, #32]
 800aa4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aa56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5a:	fa93 f3a3 	rbit	r3, r3
 800aa5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800aa60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800aa62:	fab3 f383 	clz	r3, r3
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	461a      	mov	r2, r3
 800aa6a:	4b26      	ldr	r3, [pc, #152]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800aa6c:	4413      	add	r3, r2
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	461a      	mov	r2, r3
 800aa72:	2301      	movs	r3, #1
 800aa74:	6013      	str	r3, [r2, #0]
 800aa76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aa7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7e:	fa93 f3a3 	rbit	r3, r3
 800aa82:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800aa84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800aa86:	fab3 f383 	clz	r3, r3
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	4b1d      	ldr	r3, [pc, #116]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800aa90:	4413      	add	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	461a      	mov	r2, r3
 800aa96:	2300      	movs	r3, #0
 800aa98:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800aa9a:	4a18      	ldr	r2, [pc, #96]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa9e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800aaa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa2:	f003 0301 	and.w	r3, r3, #1
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d04b      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaaa:	f7fc fc7f 	bl	80073ac <HAL_GetTick>
 800aaae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aab0:	e00a      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aab2:	f7fc fc7b 	bl	80073ac <HAL_GetTick>
 800aab6:	4602      	mov	r2, r0
 800aab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d901      	bls.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800aac4:	2303      	movs	r3, #3
 800aac6:	e113      	b.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800aac8:	2302      	movs	r3, #2
 800aaca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aace:	fa93 f3a3 	rbit	r3, r3
 800aad2:	627b      	str	r3, [r7, #36]	; 0x24
 800aad4:	2302      	movs	r3, #2
 800aad6:	623b      	str	r3, [r7, #32]
 800aad8:	6a3b      	ldr	r3, [r7, #32]
 800aada:	fa93 f3a3 	rbit	r3, r3
 800aade:	61fb      	str	r3, [r7, #28]
  return result;
 800aae0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aae2:	fab3 f383 	clz	r3, r3
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	095b      	lsrs	r3, r3, #5
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	f043 0302 	orr.w	r3, r3, #2
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d108      	bne.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800aaf6:	4b01      	ldr	r3, [pc, #4]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	e00d      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800aafc:	40021000 	.word	0x40021000
 800ab00:	40007000 	.word	0x40007000
 800ab04:	10908100 	.word	0x10908100
 800ab08:	2302      	movs	r3, #2
 800ab0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	fa93 f3a3 	rbit	r3, r3
 800ab12:	617b      	str	r3, [r7, #20]
 800ab14:	4b78      	ldr	r3, [pc, #480]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	2202      	movs	r2, #2
 800ab1a:	613a      	str	r2, [r7, #16]
 800ab1c:	693a      	ldr	r2, [r7, #16]
 800ab1e:	fa92 f2a2 	rbit	r2, r2
 800ab22:	60fa      	str	r2, [r7, #12]
  return result;
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	fab2 f282 	clz	r2, r2
 800ab2a:	b2d2      	uxtb	r2, r2
 800ab2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab30:	b2d2      	uxtb	r2, r2
 800ab32:	f002 021f 	and.w	r2, r2, #31
 800ab36:	2101      	movs	r1, #1
 800ab38:	fa01 f202 	lsl.w	r2, r1, r2
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d0b7      	beq.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800ab42:	4b6d      	ldr	r3, [pc, #436]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ab44:	6a1b      	ldr	r3, [r3, #32]
 800ab46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	496a      	ldr	r1, [pc, #424]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ab50:	4313      	orrs	r3, r2
 800ab52:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ab54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d105      	bne.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab5c:	4b66      	ldr	r3, [pc, #408]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ab5e:	69db      	ldr	r3, [r3, #28]
 800ab60:	4a65      	ldr	r2, [pc, #404]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ab62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 0301 	and.w	r3, r3, #1
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d008      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ab74:	4b60      	ldr	r3, [pc, #384]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ab76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab78:	f023 0203 	bic.w	r2, r3, #3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	495d      	ldr	r1, [pc, #372]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ab82:	4313      	orrs	r3, r2
 800ab84:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 0302 	and.w	r3, r3, #2
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d008      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ab92:	4b59      	ldr	r3, [pc, #356]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ab94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	4956      	ldr	r1, [pc, #344]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800aba0:	4313      	orrs	r3, r2
 800aba2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 0304 	and.w	r3, r3, #4
 800abac:	2b00      	cmp	r3, #0
 800abae:	d008      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800abb0:	4b51      	ldr	r3, [pc, #324]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800abb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	494e      	ldr	r1, [pc, #312]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800abbe:	4313      	orrs	r3, r2
 800abc0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 0320 	and.w	r3, r3, #32
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d008      	beq.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800abce:	4b4a      	ldr	r3, [pc, #296]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800abd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd2:	f023 0210 	bic.w	r2, r3, #16
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	69db      	ldr	r3, [r3, #28]
 800abda:	4947      	ldr	r1, [pc, #284]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800abdc:	4313      	orrs	r3, r2
 800abde:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d008      	beq.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800abec:	4b42      	ldr	r3, [pc, #264]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf8:	493f      	ldr	r1, [pc, #252]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800abfa:	4313      	orrs	r3, r2
 800abfc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d008      	beq.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ac0a:	4b3b      	ldr	r3, [pc, #236]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ac0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac0e:	f023 0220 	bic.w	r2, r3, #32
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	4938      	ldr	r1, [pc, #224]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f003 0308 	and.w	r3, r3, #8
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d008      	beq.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ac28:	4b33      	ldr	r3, [pc, #204]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ac2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	695b      	ldr	r3, [r3, #20]
 800ac34:	4930      	ldr	r1, [pc, #192]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ac36:	4313      	orrs	r3, r2
 800ac38:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0310 	and.w	r3, r3, #16
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d008      	beq.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ac46:	4b2c      	ldr	r3, [pc, #176]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ac48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	4929      	ldr	r1, [pc, #164]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ac54:	4313      	orrs	r3, r2
 800ac56:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d008      	beq.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ac64:	4b24      	ldr	r3, [pc, #144]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac70:	4921      	ldr	r1, [pc, #132]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ac72:	4313      	orrs	r3, r2
 800ac74:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d008      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800ac82:	4b1d      	ldr	r3, [pc, #116]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ac84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac86:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8e:	491a      	ldr	r1, [pc, #104]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800ac90:	4313      	orrs	r3, r2
 800ac92:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d008      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800aca0:	4b15      	ldr	r3, [pc, #84]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800aca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acac:	4912      	ldr	r1, [pc, #72]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800acae:	4313      	orrs	r3, r2
 800acb0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d008      	beq.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800acbe:	4b0e      	ldr	r3, [pc, #56]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800acc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acca:	490b      	ldr	r1, [pc, #44]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800accc:	4313      	orrs	r3, r2
 800acce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d008      	beq.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800acdc:	4b06      	ldr	r3, [pc, #24]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800acde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ace8:	4903      	ldr	r1, [pc, #12]	; (800acf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800acea:	4313      	orrs	r3, r2
 800acec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3748      	adds	r7, #72	; 0x48
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	40021000 	.word	0x40021000

0800acfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e09d      	b.n	800ae4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d108      	bne.n	800ad28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad1e:	d009      	beq.n	800ad34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	61da      	str	r2, [r3, #28]
 800ad26:	e005      	b.n	800ad34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d106      	bne.n	800ad54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7fc f8a8 	bl	8006ea4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2202      	movs	r2, #2
 800ad58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ad74:	d902      	bls.n	800ad7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ad76:	2300      	movs	r3, #0
 800ad78:	60fb      	str	r3, [r7, #12]
 800ad7a:	e002      	b.n	800ad82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ad7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ad8a:	d007      	beq.n	800ad9c <HAL_SPI_Init+0xa0>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ad94:	d002      	beq.n	800ad9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800adac:	431a      	orrs	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	f003 0302 	and.w	r3, r3, #2
 800adb6:	431a      	orrs	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	695b      	ldr	r3, [r3, #20]
 800adbc:	f003 0301 	and.w	r3, r3, #1
 800adc0:	431a      	orrs	r2, r3
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	699b      	ldr	r3, [r3, #24]
 800adc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800adca:	431a      	orrs	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800add4:	431a      	orrs	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a1b      	ldr	r3, [r3, #32]
 800adda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adde:	ea42 0103 	orr.w	r1, r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	430a      	orrs	r2, r1
 800adf0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	0c1b      	lsrs	r3, r3, #16
 800adf8:	f003 0204 	and.w	r2, r3, #4
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae00:	f003 0310 	and.w	r3, r3, #16
 800ae04:	431a      	orrs	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae0a:	f003 0308 	and.w	r3, r3, #8
 800ae0e:	431a      	orrs	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ae18:	ea42 0103 	orr.w	r1, r2, r3
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	430a      	orrs	r2, r1
 800ae28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	69da      	ldr	r2, [r3, #28]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b082      	sub	sp, #8
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d101      	bne.n	800ae64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	e049      	b.n	800aef8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d106      	bne.n	800ae7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7fc f855 	bl	8006f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2202      	movs	r2, #2
 800ae82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	4619      	mov	r1, r3
 800ae90:	4610      	mov	r0, r2
 800ae92:	f000 fd27 	bl	800b8e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2201      	movs	r2, #1
 800aeca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2201      	movs	r2, #1
 800aed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2201      	movs	r2, #1
 800aeea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2201      	movs	r2, #1
 800aef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aef6:	2300      	movs	r3, #0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	2b01      	cmp	r3, #1
 800af12:	d001      	beq.n	800af18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	e04a      	b.n	800afae <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2202      	movs	r2, #2
 800af1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68da      	ldr	r2, [r3, #12]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f042 0201 	orr.w	r2, r2, #1
 800af2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a21      	ldr	r2, [pc, #132]	; (800afbc <HAL_TIM_Base_Start_IT+0xbc>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d018      	beq.n	800af6c <HAL_TIM_Base_Start_IT+0x6c>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af42:	d013      	beq.n	800af6c <HAL_TIM_Base_Start_IT+0x6c>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a1d      	ldr	r2, [pc, #116]	; (800afc0 <HAL_TIM_Base_Start_IT+0xc0>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d00e      	beq.n	800af6c <HAL_TIM_Base_Start_IT+0x6c>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a1c      	ldr	r2, [pc, #112]	; (800afc4 <HAL_TIM_Base_Start_IT+0xc4>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d009      	beq.n	800af6c <HAL_TIM_Base_Start_IT+0x6c>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a1a      	ldr	r2, [pc, #104]	; (800afc8 <HAL_TIM_Base_Start_IT+0xc8>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d004      	beq.n	800af6c <HAL_TIM_Base_Start_IT+0x6c>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a19      	ldr	r2, [pc, #100]	; (800afcc <HAL_TIM_Base_Start_IT+0xcc>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d115      	bne.n	800af98 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	689a      	ldr	r2, [r3, #8]
 800af72:	4b17      	ldr	r3, [pc, #92]	; (800afd0 <HAL_TIM_Base_Start_IT+0xd0>)
 800af74:	4013      	ands	r3, r2
 800af76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2b06      	cmp	r3, #6
 800af7c:	d015      	beq.n	800afaa <HAL_TIM_Base_Start_IT+0xaa>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af84:	d011      	beq.n	800afaa <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f042 0201 	orr.w	r2, r2, #1
 800af94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af96:	e008      	b.n	800afaa <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f042 0201 	orr.w	r2, r2, #1
 800afa6:	601a      	str	r2, [r3, #0]
 800afa8:	e000      	b.n	800afac <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	40012c00 	.word	0x40012c00
 800afc0:	40000400 	.word	0x40000400
 800afc4:	40000800 	.word	0x40000800
 800afc8:	40013400 	.word	0x40013400
 800afcc:	40014000 	.word	0x40014000
 800afd0:	00010007 	.word	0x00010007

0800afd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	e049      	b.n	800b07a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afec:	b2db      	uxtb	r3, r3
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d106      	bne.n	800b000 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 f841 	bl	800b082 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2202      	movs	r2, #2
 800b004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	3304      	adds	r3, #4
 800b010:	4619      	mov	r1, r3
 800b012:	4610      	mov	r0, r2
 800b014:	f000 fc66 	bl	800b8e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b082:	b480      	push	{r7}
 800b084:	b083      	sub	sp, #12
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b08a:	bf00      	nop
 800b08c:	370c      	adds	r7, #12
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
	...

0800b098 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d109      	bne.n	800b0bc <HAL_TIM_PWM_Start+0x24>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	bf14      	ite	ne
 800b0b4:	2301      	movne	r3, #1
 800b0b6:	2300      	moveq	r3, #0
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	e03c      	b.n	800b136 <HAL_TIM_PWM_Start+0x9e>
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	2b04      	cmp	r3, #4
 800b0c0:	d109      	bne.n	800b0d6 <HAL_TIM_PWM_Start+0x3e>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	bf14      	ite	ne
 800b0ce:	2301      	movne	r3, #1
 800b0d0:	2300      	moveq	r3, #0
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	e02f      	b.n	800b136 <HAL_TIM_PWM_Start+0x9e>
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	2b08      	cmp	r3, #8
 800b0da:	d109      	bne.n	800b0f0 <HAL_TIM_PWM_Start+0x58>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	bf14      	ite	ne
 800b0e8:	2301      	movne	r3, #1
 800b0ea:	2300      	moveq	r3, #0
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	e022      	b.n	800b136 <HAL_TIM_PWM_Start+0x9e>
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	2b0c      	cmp	r3, #12
 800b0f4:	d109      	bne.n	800b10a <HAL_TIM_PWM_Start+0x72>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	bf14      	ite	ne
 800b102:	2301      	movne	r3, #1
 800b104:	2300      	moveq	r3, #0
 800b106:	b2db      	uxtb	r3, r3
 800b108:	e015      	b.n	800b136 <HAL_TIM_PWM_Start+0x9e>
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b10      	cmp	r3, #16
 800b10e:	d109      	bne.n	800b124 <HAL_TIM_PWM_Start+0x8c>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b116:	b2db      	uxtb	r3, r3
 800b118:	2b01      	cmp	r3, #1
 800b11a:	bf14      	ite	ne
 800b11c:	2301      	movne	r3, #1
 800b11e:	2300      	moveq	r3, #0
 800b120:	b2db      	uxtb	r3, r3
 800b122:	e008      	b.n	800b136 <HAL_TIM_PWM_Start+0x9e>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	bf14      	ite	ne
 800b130:	2301      	movne	r3, #1
 800b132:	2300      	moveq	r3, #0
 800b134:	b2db      	uxtb	r3, r3
 800b136:	2b00      	cmp	r3, #0
 800b138:	d001      	beq.n	800b13e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b13a:	2301      	movs	r3, #1
 800b13c:	e097      	b.n	800b26e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d104      	bne.n	800b14e <HAL_TIM_PWM_Start+0xb6>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2202      	movs	r2, #2
 800b148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b14c:	e023      	b.n	800b196 <HAL_TIM_PWM_Start+0xfe>
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	2b04      	cmp	r3, #4
 800b152:	d104      	bne.n	800b15e <HAL_TIM_PWM_Start+0xc6>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2202      	movs	r2, #2
 800b158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b15c:	e01b      	b.n	800b196 <HAL_TIM_PWM_Start+0xfe>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	2b08      	cmp	r3, #8
 800b162:	d104      	bne.n	800b16e <HAL_TIM_PWM_Start+0xd6>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2202      	movs	r2, #2
 800b168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b16c:	e013      	b.n	800b196 <HAL_TIM_PWM_Start+0xfe>
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	2b0c      	cmp	r3, #12
 800b172:	d104      	bne.n	800b17e <HAL_TIM_PWM_Start+0xe6>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2202      	movs	r2, #2
 800b178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b17c:	e00b      	b.n	800b196 <HAL_TIM_PWM_Start+0xfe>
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	2b10      	cmp	r3, #16
 800b182:	d104      	bne.n	800b18e <HAL_TIM_PWM_Start+0xf6>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2202      	movs	r2, #2
 800b188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b18c:	e003      	b.n	800b196 <HAL_TIM_PWM_Start+0xfe>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2202      	movs	r2, #2
 800b192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2201      	movs	r2, #1
 800b19c:	6839      	ldr	r1, [r7, #0]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f000 ffa0 	bl	800c0e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a33      	ldr	r2, [pc, #204]	; (800b278 <HAL_TIM_PWM_Start+0x1e0>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d013      	beq.n	800b1d6 <HAL_TIM_PWM_Start+0x13e>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a32      	ldr	r2, [pc, #200]	; (800b27c <HAL_TIM_PWM_Start+0x1e4>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d00e      	beq.n	800b1d6 <HAL_TIM_PWM_Start+0x13e>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a30      	ldr	r2, [pc, #192]	; (800b280 <HAL_TIM_PWM_Start+0x1e8>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d009      	beq.n	800b1d6 <HAL_TIM_PWM_Start+0x13e>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a2f      	ldr	r2, [pc, #188]	; (800b284 <HAL_TIM_PWM_Start+0x1ec>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d004      	beq.n	800b1d6 <HAL_TIM_PWM_Start+0x13e>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a2d      	ldr	r2, [pc, #180]	; (800b288 <HAL_TIM_PWM_Start+0x1f0>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d101      	bne.n	800b1da <HAL_TIM_PWM_Start+0x142>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e000      	b.n	800b1dc <HAL_TIM_PWM_Start+0x144>
 800b1da:	2300      	movs	r3, #0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d007      	beq.n	800b1f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a20      	ldr	r2, [pc, #128]	; (800b278 <HAL_TIM_PWM_Start+0x1e0>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d018      	beq.n	800b22c <HAL_TIM_PWM_Start+0x194>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b202:	d013      	beq.n	800b22c <HAL_TIM_PWM_Start+0x194>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a20      	ldr	r2, [pc, #128]	; (800b28c <HAL_TIM_PWM_Start+0x1f4>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d00e      	beq.n	800b22c <HAL_TIM_PWM_Start+0x194>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a1f      	ldr	r2, [pc, #124]	; (800b290 <HAL_TIM_PWM_Start+0x1f8>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d009      	beq.n	800b22c <HAL_TIM_PWM_Start+0x194>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a17      	ldr	r2, [pc, #92]	; (800b27c <HAL_TIM_PWM_Start+0x1e4>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d004      	beq.n	800b22c <HAL_TIM_PWM_Start+0x194>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a16      	ldr	r2, [pc, #88]	; (800b280 <HAL_TIM_PWM_Start+0x1e8>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d115      	bne.n	800b258 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	689a      	ldr	r2, [r3, #8]
 800b232:	4b18      	ldr	r3, [pc, #96]	; (800b294 <HAL_TIM_PWM_Start+0x1fc>)
 800b234:	4013      	ands	r3, r2
 800b236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2b06      	cmp	r3, #6
 800b23c:	d015      	beq.n	800b26a <HAL_TIM_PWM_Start+0x1d2>
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b244:	d011      	beq.n	800b26a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f042 0201 	orr.w	r2, r2, #1
 800b254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b256:	e008      	b.n	800b26a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f042 0201 	orr.w	r2, r2, #1
 800b266:	601a      	str	r2, [r3, #0]
 800b268:	e000      	b.n	800b26c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b26a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	40012c00 	.word	0x40012c00
 800b27c:	40013400 	.word	0x40013400
 800b280:	40014000 	.word	0x40014000
 800b284:	40014400 	.word	0x40014400
 800b288:	40014800 	.word	0x40014800
 800b28c:	40000400 	.word	0x40000400
 800b290:	40000800 	.word	0x40000800
 800b294:	00010007 	.word	0x00010007

0800b298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	f003 0302 	and.w	r3, r3, #2
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	d122      	bne.n	800b2f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68db      	ldr	r3, [r3, #12]
 800b2b4:	f003 0302 	and.w	r3, r3, #2
 800b2b8:	2b02      	cmp	r3, #2
 800b2ba:	d11b      	bne.n	800b2f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f06f 0202 	mvn.w	r2, #2
 800b2c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	699b      	ldr	r3, [r3, #24]
 800b2d2:	f003 0303 	and.w	r3, r3, #3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d003      	beq.n	800b2e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fae3 	bl	800b8a6 <HAL_TIM_IC_CaptureCallback>
 800b2e0:	e005      	b.n	800b2ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 fad5 	bl	800b892 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 fae6 	bl	800b8ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	f003 0304 	and.w	r3, r3, #4
 800b2fe:	2b04      	cmp	r3, #4
 800b300:	d122      	bne.n	800b348 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	f003 0304 	and.w	r3, r3, #4
 800b30c:	2b04      	cmp	r3, #4
 800b30e:	d11b      	bne.n	800b348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f06f 0204 	mvn.w	r2, #4
 800b318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2202      	movs	r2, #2
 800b31e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d003      	beq.n	800b336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fab9 	bl	800b8a6 <HAL_TIM_IC_CaptureCallback>
 800b334:	e005      	b.n	800b342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 faab 	bl	800b892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fabc 	bl	800b8ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	f003 0308 	and.w	r3, r3, #8
 800b352:	2b08      	cmp	r3, #8
 800b354:	d122      	bne.n	800b39c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	f003 0308 	and.w	r3, r3, #8
 800b360:	2b08      	cmp	r3, #8
 800b362:	d11b      	bne.n	800b39c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f06f 0208 	mvn.w	r2, #8
 800b36c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2204      	movs	r2, #4
 800b372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	69db      	ldr	r3, [r3, #28]
 800b37a:	f003 0303 	and.w	r3, r3, #3
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d003      	beq.n	800b38a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fa8f 	bl	800b8a6 <HAL_TIM_IC_CaptureCallback>
 800b388:	e005      	b.n	800b396 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fa81 	bl	800b892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fa92 	bl	800b8ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	f003 0310 	and.w	r3, r3, #16
 800b3a6:	2b10      	cmp	r3, #16
 800b3a8:	d122      	bne.n	800b3f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	f003 0310 	and.w	r3, r3, #16
 800b3b4:	2b10      	cmp	r3, #16
 800b3b6:	d11b      	bne.n	800b3f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f06f 0210 	mvn.w	r2, #16
 800b3c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2208      	movs	r2, #8
 800b3c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	69db      	ldr	r3, [r3, #28]
 800b3ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d003      	beq.n	800b3de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fa65 	bl	800b8a6 <HAL_TIM_IC_CaptureCallback>
 800b3dc:	e005      	b.n	800b3ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fa57 	bl	800b892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 fa68 	bl	800b8ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	691b      	ldr	r3, [r3, #16]
 800b3f6:	f003 0301 	and.w	r3, r3, #1
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d10e      	bne.n	800b41c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	f003 0301 	and.w	r3, r3, #1
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d107      	bne.n	800b41c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f06f 0201 	mvn.w	r2, #1
 800b414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7f9 feb4 	bl	8005184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	691b      	ldr	r3, [r3, #16]
 800b422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b426:	2b80      	cmp	r3, #128	; 0x80
 800b428:	d10e      	bne.n	800b448 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b434:	2b80      	cmp	r3, #128	; 0x80
 800b436:	d107      	bne.n	800b448 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 fefe 	bl	800c244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	691b      	ldr	r3, [r3, #16]
 800b44e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b456:	d10e      	bne.n	800b476 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b462:	2b80      	cmp	r3, #128	; 0x80
 800b464:	d107      	bne.n	800b476 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b46e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fef1 	bl	800c258 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b480:	2b40      	cmp	r3, #64	; 0x40
 800b482:	d10e      	bne.n	800b4a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b48e:	2b40      	cmp	r3, #64	; 0x40
 800b490:	d107      	bne.n	800b4a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b49a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fa16 	bl	800b8ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	f003 0320 	and.w	r3, r3, #32
 800b4ac:	2b20      	cmp	r3, #32
 800b4ae:	d10e      	bne.n	800b4ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	f003 0320 	and.w	r3, r3, #32
 800b4ba:	2b20      	cmp	r3, #32
 800b4bc:	d107      	bne.n	800b4ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f06f 0220 	mvn.w	r2, #32
 800b4c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 feb1 	bl	800c230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b4ce:	bf00      	nop
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
	...

0800b4d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d101      	bne.n	800b4f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b4f2:	2302      	movs	r3, #2
 800b4f4:	e0ff      	b.n	800b6f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2b14      	cmp	r3, #20
 800b502:	f200 80f0 	bhi.w	800b6e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b506:	a201      	add	r2, pc, #4	; (adr r2, 800b50c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b50c:	0800b561 	.word	0x0800b561
 800b510:	0800b6e7 	.word	0x0800b6e7
 800b514:	0800b6e7 	.word	0x0800b6e7
 800b518:	0800b6e7 	.word	0x0800b6e7
 800b51c:	0800b5a1 	.word	0x0800b5a1
 800b520:	0800b6e7 	.word	0x0800b6e7
 800b524:	0800b6e7 	.word	0x0800b6e7
 800b528:	0800b6e7 	.word	0x0800b6e7
 800b52c:	0800b5e3 	.word	0x0800b5e3
 800b530:	0800b6e7 	.word	0x0800b6e7
 800b534:	0800b6e7 	.word	0x0800b6e7
 800b538:	0800b6e7 	.word	0x0800b6e7
 800b53c:	0800b623 	.word	0x0800b623
 800b540:	0800b6e7 	.word	0x0800b6e7
 800b544:	0800b6e7 	.word	0x0800b6e7
 800b548:	0800b6e7 	.word	0x0800b6e7
 800b54c:	0800b665 	.word	0x0800b665
 800b550:	0800b6e7 	.word	0x0800b6e7
 800b554:	0800b6e7 	.word	0x0800b6e7
 800b558:	0800b6e7 	.word	0x0800b6e7
 800b55c:	0800b6a5 	.word	0x0800b6a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	68b9      	ldr	r1, [r7, #8]
 800b566:	4618      	mov	r0, r3
 800b568:	f000 fa4c 	bl	800ba04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	699a      	ldr	r2, [r3, #24]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f042 0208 	orr.w	r2, r2, #8
 800b57a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	699a      	ldr	r2, [r3, #24]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f022 0204 	bic.w	r2, r2, #4
 800b58a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	6999      	ldr	r1, [r3, #24]
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	691a      	ldr	r2, [r3, #16]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	430a      	orrs	r2, r1
 800b59c:	619a      	str	r2, [r3, #24]
      break;
 800b59e:	e0a5      	b.n	800b6ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	68b9      	ldr	r1, [r7, #8]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f000 fabc 	bl	800bb24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	699a      	ldr	r2, [r3, #24]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	699a      	ldr	r2, [r3, #24]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	6999      	ldr	r1, [r3, #24]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	021a      	lsls	r2, r3, #8
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	430a      	orrs	r2, r1
 800b5de:	619a      	str	r2, [r3, #24]
      break;
 800b5e0:	e084      	b.n	800b6ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	68b9      	ldr	r1, [r7, #8]
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 fb25 	bl	800bc38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	69da      	ldr	r2, [r3, #28]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f042 0208 	orr.w	r2, r2, #8
 800b5fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	69da      	ldr	r2, [r3, #28]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f022 0204 	bic.w	r2, r2, #4
 800b60c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	69d9      	ldr	r1, [r3, #28]
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	691a      	ldr	r2, [r3, #16]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	430a      	orrs	r2, r1
 800b61e:	61da      	str	r2, [r3, #28]
      break;
 800b620:	e064      	b.n	800b6ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68b9      	ldr	r1, [r7, #8]
 800b628:	4618      	mov	r0, r3
 800b62a:	f000 fb8d 	bl	800bd48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	69da      	ldr	r2, [r3, #28]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b63c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	69da      	ldr	r2, [r3, #28]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b64c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	69d9      	ldr	r1, [r3, #28]
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	021a      	lsls	r2, r3, #8
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	430a      	orrs	r2, r1
 800b660:	61da      	str	r2, [r3, #28]
      break;
 800b662:	e043      	b.n	800b6ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68b9      	ldr	r1, [r7, #8]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f000 fbd6 	bl	800be1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f042 0208 	orr.w	r2, r2, #8
 800b67e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f022 0204 	bic.w	r2, r2, #4
 800b68e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	691a      	ldr	r2, [r3, #16]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	430a      	orrs	r2, r1
 800b6a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b6a2:	e023      	b.n	800b6ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68b9      	ldr	r1, [r7, #8]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 fc1a 	bl	800bee4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b6ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	021a      	lsls	r2, r3, #8
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	430a      	orrs	r2, r1
 800b6e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b6e4:	e002      	b.n	800b6ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	75fb      	strb	r3, [r7, #23]
      break;
 800b6ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3718      	adds	r7, #24
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop

0800b700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b70a:	2300      	movs	r3, #0
 800b70c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b714:	2b01      	cmp	r3, #1
 800b716:	d101      	bne.n	800b71c <HAL_TIM_ConfigClockSource+0x1c>
 800b718:	2302      	movs	r3, #2
 800b71a:	e0b6      	b.n	800b88a <HAL_TIM_ConfigClockSource+0x18a>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2201      	movs	r2, #1
 800b720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2202      	movs	r2, #2
 800b728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b73a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b73e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b746:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b758:	d03e      	beq.n	800b7d8 <HAL_TIM_ConfigClockSource+0xd8>
 800b75a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b75e:	f200 8087 	bhi.w	800b870 <HAL_TIM_ConfigClockSource+0x170>
 800b762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b766:	f000 8086 	beq.w	800b876 <HAL_TIM_ConfigClockSource+0x176>
 800b76a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b76e:	d87f      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x170>
 800b770:	2b70      	cmp	r3, #112	; 0x70
 800b772:	d01a      	beq.n	800b7aa <HAL_TIM_ConfigClockSource+0xaa>
 800b774:	2b70      	cmp	r3, #112	; 0x70
 800b776:	d87b      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x170>
 800b778:	2b60      	cmp	r3, #96	; 0x60
 800b77a:	d050      	beq.n	800b81e <HAL_TIM_ConfigClockSource+0x11e>
 800b77c:	2b60      	cmp	r3, #96	; 0x60
 800b77e:	d877      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x170>
 800b780:	2b50      	cmp	r3, #80	; 0x50
 800b782:	d03c      	beq.n	800b7fe <HAL_TIM_ConfigClockSource+0xfe>
 800b784:	2b50      	cmp	r3, #80	; 0x50
 800b786:	d873      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x170>
 800b788:	2b40      	cmp	r3, #64	; 0x40
 800b78a:	d058      	beq.n	800b83e <HAL_TIM_ConfigClockSource+0x13e>
 800b78c:	2b40      	cmp	r3, #64	; 0x40
 800b78e:	d86f      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x170>
 800b790:	2b30      	cmp	r3, #48	; 0x30
 800b792:	d064      	beq.n	800b85e <HAL_TIM_ConfigClockSource+0x15e>
 800b794:	2b30      	cmp	r3, #48	; 0x30
 800b796:	d86b      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x170>
 800b798:	2b20      	cmp	r3, #32
 800b79a:	d060      	beq.n	800b85e <HAL_TIM_ConfigClockSource+0x15e>
 800b79c:	2b20      	cmp	r3, #32
 800b79e:	d867      	bhi.n	800b870 <HAL_TIM_ConfigClockSource+0x170>
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d05c      	beq.n	800b85e <HAL_TIM_ConfigClockSource+0x15e>
 800b7a4:	2b10      	cmp	r3, #16
 800b7a6:	d05a      	beq.n	800b85e <HAL_TIM_ConfigClockSource+0x15e>
 800b7a8:	e062      	b.n	800b870 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6818      	ldr	r0, [r3, #0]
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	6899      	ldr	r1, [r3, #8]
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	685a      	ldr	r2, [r3, #4]
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	f000 fc73 	bl	800c0a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b7cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68ba      	ldr	r2, [r7, #8]
 800b7d4:	609a      	str	r2, [r3, #8]
      break;
 800b7d6:	e04f      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6818      	ldr	r0, [r3, #0]
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	6899      	ldr	r1, [r3, #8]
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	685a      	ldr	r2, [r3, #4]
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	f000 fc5c 	bl	800c0a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	689a      	ldr	r2, [r3, #8]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b7fa:	609a      	str	r2, [r3, #8]
      break;
 800b7fc:	e03c      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6818      	ldr	r0, [r3, #0]
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	6859      	ldr	r1, [r3, #4]
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	461a      	mov	r2, r3
 800b80c:	f000 fbd0 	bl	800bfb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2150      	movs	r1, #80	; 0x50
 800b816:	4618      	mov	r0, r3
 800b818:	f000 fc29 	bl	800c06e <TIM_ITRx_SetConfig>
      break;
 800b81c:	e02c      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6818      	ldr	r0, [r3, #0]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	6859      	ldr	r1, [r3, #4]
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	461a      	mov	r2, r3
 800b82c:	f000 fbef 	bl	800c00e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2160      	movs	r1, #96	; 0x60
 800b836:	4618      	mov	r0, r3
 800b838:	f000 fc19 	bl	800c06e <TIM_ITRx_SetConfig>
      break;
 800b83c:	e01c      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6818      	ldr	r0, [r3, #0]
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	6859      	ldr	r1, [r3, #4]
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	461a      	mov	r2, r3
 800b84c:	f000 fbb0 	bl	800bfb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2140      	movs	r1, #64	; 0x40
 800b856:	4618      	mov	r0, r3
 800b858:	f000 fc09 	bl	800c06e <TIM_ITRx_SetConfig>
      break;
 800b85c:	e00c      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4619      	mov	r1, r3
 800b868:	4610      	mov	r0, r2
 800b86a:	f000 fc00 	bl	800c06e <TIM_ITRx_SetConfig>
      break;
 800b86e:	e003      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	73fb      	strb	r3, [r7, #15]
      break;
 800b874:	e000      	b.n	800b878 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800b876:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b888:	7bfb      	ldrb	r3, [r7, #15]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b892:	b480      	push	{r7}
 800b894:	b083      	sub	sp, #12
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b89a:	bf00      	nop
 800b89c:	370c      	adds	r7, #12
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr

0800b8a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b8a6:	b480      	push	{r7}
 800b8a8:	b083      	sub	sp, #12
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b8ae:	bf00      	nop
 800b8b0:	370c      	adds	r7, #12
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr

0800b8ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b8ba:	b480      	push	{r7}
 800b8bc:	b083      	sub	sp, #12
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b8c2:	bf00      	nop
 800b8c4:	370c      	adds	r7, #12
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr

0800b8ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b8ce:	b480      	push	{r7}
 800b8d0:	b083      	sub	sp, #12
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b8d6:	bf00      	nop
 800b8d8:	370c      	adds	r7, #12
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr
	...

0800b8e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4a3c      	ldr	r2, [pc, #240]	; (800b9e8 <TIM_Base_SetConfig+0x104>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d00f      	beq.n	800b91c <TIM_Base_SetConfig+0x38>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b902:	d00b      	beq.n	800b91c <TIM_Base_SetConfig+0x38>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	4a39      	ldr	r2, [pc, #228]	; (800b9ec <TIM_Base_SetConfig+0x108>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d007      	beq.n	800b91c <TIM_Base_SetConfig+0x38>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	4a38      	ldr	r2, [pc, #224]	; (800b9f0 <TIM_Base_SetConfig+0x10c>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d003      	beq.n	800b91c <TIM_Base_SetConfig+0x38>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	4a37      	ldr	r2, [pc, #220]	; (800b9f4 <TIM_Base_SetConfig+0x110>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d108      	bne.n	800b92e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	4313      	orrs	r3, r2
 800b92c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	4a2d      	ldr	r2, [pc, #180]	; (800b9e8 <TIM_Base_SetConfig+0x104>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d01b      	beq.n	800b96e <TIM_Base_SetConfig+0x8a>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b93c:	d017      	beq.n	800b96e <TIM_Base_SetConfig+0x8a>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	4a2a      	ldr	r2, [pc, #168]	; (800b9ec <TIM_Base_SetConfig+0x108>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d013      	beq.n	800b96e <TIM_Base_SetConfig+0x8a>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	4a29      	ldr	r2, [pc, #164]	; (800b9f0 <TIM_Base_SetConfig+0x10c>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d00f      	beq.n	800b96e <TIM_Base_SetConfig+0x8a>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	4a28      	ldr	r2, [pc, #160]	; (800b9f4 <TIM_Base_SetConfig+0x110>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d00b      	beq.n	800b96e <TIM_Base_SetConfig+0x8a>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	4a27      	ldr	r2, [pc, #156]	; (800b9f8 <TIM_Base_SetConfig+0x114>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d007      	beq.n	800b96e <TIM_Base_SetConfig+0x8a>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	4a26      	ldr	r2, [pc, #152]	; (800b9fc <TIM_Base_SetConfig+0x118>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d003      	beq.n	800b96e <TIM_Base_SetConfig+0x8a>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	4a25      	ldr	r2, [pc, #148]	; (800ba00 <TIM_Base_SetConfig+0x11c>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d108      	bne.n	800b980 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	68fa      	ldr	r2, [r7, #12]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	695b      	ldr	r3, [r3, #20]
 800b98a:	4313      	orrs	r3, r2
 800b98c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	689a      	ldr	r2, [r3, #8]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a10      	ldr	r2, [pc, #64]	; (800b9e8 <TIM_Base_SetConfig+0x104>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d00f      	beq.n	800b9cc <TIM_Base_SetConfig+0xe8>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4a11      	ldr	r2, [pc, #68]	; (800b9f4 <TIM_Base_SetConfig+0x110>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d00b      	beq.n	800b9cc <TIM_Base_SetConfig+0xe8>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	4a10      	ldr	r2, [pc, #64]	; (800b9f8 <TIM_Base_SetConfig+0x114>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d007      	beq.n	800b9cc <TIM_Base_SetConfig+0xe8>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	4a0f      	ldr	r2, [pc, #60]	; (800b9fc <TIM_Base_SetConfig+0x118>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d003      	beq.n	800b9cc <TIM_Base_SetConfig+0xe8>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	4a0e      	ldr	r2, [pc, #56]	; (800ba00 <TIM_Base_SetConfig+0x11c>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d103      	bne.n	800b9d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	691a      	ldr	r2, [r3, #16]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	615a      	str	r2, [r3, #20]
}
 800b9da:	bf00      	nop
 800b9dc:	3714      	adds	r7, #20
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	40012c00 	.word	0x40012c00
 800b9ec:	40000400 	.word	0x40000400
 800b9f0:	40000800 	.word	0x40000800
 800b9f4:	40013400 	.word	0x40013400
 800b9f8:	40014000 	.word	0x40014000
 800b9fc:	40014400 	.word	0x40014400
 800ba00:	40014800 	.word	0x40014800

0800ba04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b087      	sub	sp, #28
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6a1b      	ldr	r3, [r3, #32]
 800ba12:	f023 0201 	bic.w	r2, r3, #1
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6a1b      	ldr	r3, [r3, #32]
 800ba1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	699b      	ldr	r3, [r3, #24]
 800ba2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f023 0303 	bic.w	r3, r3, #3
 800ba3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	f023 0302 	bic.w	r3, r3, #2
 800ba50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	697a      	ldr	r2, [r7, #20]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	4a2c      	ldr	r2, [pc, #176]	; (800bb10 <TIM_OC1_SetConfig+0x10c>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d00f      	beq.n	800ba84 <TIM_OC1_SetConfig+0x80>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	4a2b      	ldr	r2, [pc, #172]	; (800bb14 <TIM_OC1_SetConfig+0x110>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d00b      	beq.n	800ba84 <TIM_OC1_SetConfig+0x80>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4a2a      	ldr	r2, [pc, #168]	; (800bb18 <TIM_OC1_SetConfig+0x114>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d007      	beq.n	800ba84 <TIM_OC1_SetConfig+0x80>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4a29      	ldr	r2, [pc, #164]	; (800bb1c <TIM_OC1_SetConfig+0x118>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d003      	beq.n	800ba84 <TIM_OC1_SetConfig+0x80>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	4a28      	ldr	r2, [pc, #160]	; (800bb20 <TIM_OC1_SetConfig+0x11c>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d10c      	bne.n	800ba9e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	f023 0308 	bic.w	r3, r3, #8
 800ba8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f023 0304 	bic.w	r3, r3, #4
 800ba9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4a1b      	ldr	r2, [pc, #108]	; (800bb10 <TIM_OC1_SetConfig+0x10c>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d00f      	beq.n	800bac6 <TIM_OC1_SetConfig+0xc2>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4a1a      	ldr	r2, [pc, #104]	; (800bb14 <TIM_OC1_SetConfig+0x110>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d00b      	beq.n	800bac6 <TIM_OC1_SetConfig+0xc2>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4a19      	ldr	r2, [pc, #100]	; (800bb18 <TIM_OC1_SetConfig+0x114>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d007      	beq.n	800bac6 <TIM_OC1_SetConfig+0xc2>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4a18      	ldr	r2, [pc, #96]	; (800bb1c <TIM_OC1_SetConfig+0x118>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d003      	beq.n	800bac6 <TIM_OC1_SetConfig+0xc2>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4a17      	ldr	r2, [pc, #92]	; (800bb20 <TIM_OC1_SetConfig+0x11c>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d111      	bne.n	800baea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bacc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	695b      	ldr	r3, [r3, #20]
 800bada:	693a      	ldr	r2, [r7, #16]
 800badc:	4313      	orrs	r3, r2
 800bade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	693a      	ldr	r2, [r7, #16]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	693a      	ldr	r2, [r7, #16]
 800baee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	68fa      	ldr	r2, [r7, #12]
 800baf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	685a      	ldr	r2, [r3, #4]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	697a      	ldr	r2, [r7, #20]
 800bb02:	621a      	str	r2, [r3, #32]
}
 800bb04:	bf00      	nop
 800bb06:	371c      	adds	r7, #28
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr
 800bb10:	40012c00 	.word	0x40012c00
 800bb14:	40013400 	.word	0x40013400
 800bb18:	40014000 	.word	0x40014000
 800bb1c:	40014400 	.word	0x40014400
 800bb20:	40014800 	.word	0x40014800

0800bb24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b087      	sub	sp, #28
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6a1b      	ldr	r3, [r3, #32]
 800bb32:	f023 0210 	bic.w	r2, r3, #16
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6a1b      	ldr	r3, [r3, #32]
 800bb3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	699b      	ldr	r3, [r3, #24]
 800bb4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bb52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	021b      	lsls	r3, r3, #8
 800bb66:	68fa      	ldr	r2, [r7, #12]
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	f023 0320 	bic.w	r3, r3, #32
 800bb72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	011b      	lsls	r3, r3, #4
 800bb7a:	697a      	ldr	r2, [r7, #20]
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a28      	ldr	r2, [pc, #160]	; (800bc24 <TIM_OC2_SetConfig+0x100>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d003      	beq.n	800bb90 <TIM_OC2_SetConfig+0x6c>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4a27      	ldr	r2, [pc, #156]	; (800bc28 <TIM_OC2_SetConfig+0x104>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d10d      	bne.n	800bbac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	011b      	lsls	r3, r3, #4
 800bb9e:	697a      	ldr	r2, [r7, #20]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4a1d      	ldr	r2, [pc, #116]	; (800bc24 <TIM_OC2_SetConfig+0x100>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d00f      	beq.n	800bbd4 <TIM_OC2_SetConfig+0xb0>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4a1c      	ldr	r2, [pc, #112]	; (800bc28 <TIM_OC2_SetConfig+0x104>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d00b      	beq.n	800bbd4 <TIM_OC2_SetConfig+0xb0>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4a1b      	ldr	r2, [pc, #108]	; (800bc2c <TIM_OC2_SetConfig+0x108>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d007      	beq.n	800bbd4 <TIM_OC2_SetConfig+0xb0>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a1a      	ldr	r2, [pc, #104]	; (800bc30 <TIM_OC2_SetConfig+0x10c>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d003      	beq.n	800bbd4 <TIM_OC2_SetConfig+0xb0>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4a19      	ldr	r2, [pc, #100]	; (800bc34 <TIM_OC2_SetConfig+0x110>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d113      	bne.n	800bbfc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bbda:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bbe2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	695b      	ldr	r3, [r3, #20]
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	693a      	ldr	r2, [r7, #16]
 800bbec:	4313      	orrs	r3, r2
 800bbee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	699b      	ldr	r3, [r3, #24]
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	693a      	ldr	r2, [r7, #16]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	693a      	ldr	r2, [r7, #16]
 800bc00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	685a      	ldr	r2, [r3, #4]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	621a      	str	r2, [r3, #32]
}
 800bc16:	bf00      	nop
 800bc18:	371c      	adds	r7, #28
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	40012c00 	.word	0x40012c00
 800bc28:	40013400 	.word	0x40013400
 800bc2c:	40014000 	.word	0x40014000
 800bc30:	40014400 	.word	0x40014400
 800bc34:	40014800 	.word	0x40014800

0800bc38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b087      	sub	sp, #28
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a1b      	ldr	r3, [r3, #32]
 800bc46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6a1b      	ldr	r3, [r3, #32]
 800bc52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	69db      	ldr	r3, [r3, #28]
 800bc5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f023 0303 	bic.w	r3, r3, #3
 800bc72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	021b      	lsls	r3, r3, #8
 800bc8c:	697a      	ldr	r2, [r7, #20]
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4a27      	ldr	r2, [pc, #156]	; (800bd34 <TIM_OC3_SetConfig+0xfc>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d003      	beq.n	800bca2 <TIM_OC3_SetConfig+0x6a>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4a26      	ldr	r2, [pc, #152]	; (800bd38 <TIM_OC3_SetConfig+0x100>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d10d      	bne.n	800bcbe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	021b      	lsls	r3, r3, #8
 800bcb0:	697a      	ldr	r2, [r7, #20]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bcbc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a1c      	ldr	r2, [pc, #112]	; (800bd34 <TIM_OC3_SetConfig+0xfc>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d00f      	beq.n	800bce6 <TIM_OC3_SetConfig+0xae>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a1b      	ldr	r2, [pc, #108]	; (800bd38 <TIM_OC3_SetConfig+0x100>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d00b      	beq.n	800bce6 <TIM_OC3_SetConfig+0xae>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a1a      	ldr	r2, [pc, #104]	; (800bd3c <TIM_OC3_SetConfig+0x104>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d007      	beq.n	800bce6 <TIM_OC3_SetConfig+0xae>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a19      	ldr	r2, [pc, #100]	; (800bd40 <TIM_OC3_SetConfig+0x108>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d003      	beq.n	800bce6 <TIM_OC3_SetConfig+0xae>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a18      	ldr	r2, [pc, #96]	; (800bd44 <TIM_OC3_SetConfig+0x10c>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d113      	bne.n	800bd0e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bcf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	695b      	ldr	r3, [r3, #20]
 800bcfa:	011b      	lsls	r3, r3, #4
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	699b      	ldr	r3, [r3, #24]
 800bd06:	011b      	lsls	r3, r3, #4
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	693a      	ldr	r2, [r7, #16]
 800bd12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	685a      	ldr	r2, [r3, #4]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	697a      	ldr	r2, [r7, #20]
 800bd26:	621a      	str	r2, [r3, #32]
}
 800bd28:	bf00      	nop
 800bd2a:	371c      	adds	r7, #28
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr
 800bd34:	40012c00 	.word	0x40012c00
 800bd38:	40013400 	.word	0x40013400
 800bd3c:	40014000 	.word	0x40014000
 800bd40:	40014400 	.word	0x40014400
 800bd44:	40014800 	.word	0x40014800

0800bd48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b087      	sub	sp, #28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6a1b      	ldr	r3, [r3, #32]
 800bd56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a1b      	ldr	r3, [r3, #32]
 800bd62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	69db      	ldr	r3, [r3, #28]
 800bd6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	021b      	lsls	r3, r3, #8
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	031b      	lsls	r3, r3, #12
 800bd9e:	693a      	ldr	r2, [r7, #16]
 800bda0:	4313      	orrs	r3, r2
 800bda2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4a18      	ldr	r2, [pc, #96]	; (800be08 <TIM_OC4_SetConfig+0xc0>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d00f      	beq.n	800bdcc <TIM_OC4_SetConfig+0x84>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a17      	ldr	r2, [pc, #92]	; (800be0c <TIM_OC4_SetConfig+0xc4>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d00b      	beq.n	800bdcc <TIM_OC4_SetConfig+0x84>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a16      	ldr	r2, [pc, #88]	; (800be10 <TIM_OC4_SetConfig+0xc8>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d007      	beq.n	800bdcc <TIM_OC4_SetConfig+0x84>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4a15      	ldr	r2, [pc, #84]	; (800be14 <TIM_OC4_SetConfig+0xcc>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d003      	beq.n	800bdcc <TIM_OC4_SetConfig+0x84>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a14      	ldr	r2, [pc, #80]	; (800be18 <TIM_OC4_SetConfig+0xd0>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d109      	bne.n	800bde0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bdd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	695b      	ldr	r3, [r3, #20]
 800bdd8:	019b      	lsls	r3, r3, #6
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	697a      	ldr	r2, [r7, #20]
 800bde4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	685a      	ldr	r2, [r3, #4]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	693a      	ldr	r2, [r7, #16]
 800bdf8:	621a      	str	r2, [r3, #32]
}
 800bdfa:	bf00      	nop
 800bdfc:	371c      	adds	r7, #28
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	40012c00 	.word	0x40012c00
 800be0c:	40013400 	.word	0x40013400
 800be10:	40014000 	.word	0x40014000
 800be14:	40014400 	.word	0x40014400
 800be18:	40014800 	.word	0x40014800

0800be1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b087      	sub	sp, #28
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6a1b      	ldr	r3, [r3, #32]
 800be2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a1b      	ldr	r3, [r3, #32]
 800be36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	4313      	orrs	r3, r2
 800be58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800be60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	041b      	lsls	r3, r3, #16
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	4313      	orrs	r3, r2
 800be6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a17      	ldr	r2, [pc, #92]	; (800bed0 <TIM_OC5_SetConfig+0xb4>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d00f      	beq.n	800be96 <TIM_OC5_SetConfig+0x7a>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4a16      	ldr	r2, [pc, #88]	; (800bed4 <TIM_OC5_SetConfig+0xb8>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d00b      	beq.n	800be96 <TIM_OC5_SetConfig+0x7a>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a15      	ldr	r2, [pc, #84]	; (800bed8 <TIM_OC5_SetConfig+0xbc>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d007      	beq.n	800be96 <TIM_OC5_SetConfig+0x7a>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4a14      	ldr	r2, [pc, #80]	; (800bedc <TIM_OC5_SetConfig+0xc0>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d003      	beq.n	800be96 <TIM_OC5_SetConfig+0x7a>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4a13      	ldr	r2, [pc, #76]	; (800bee0 <TIM_OC5_SetConfig+0xc4>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d109      	bne.n	800beaa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	695b      	ldr	r3, [r3, #20]
 800bea2:	021b      	lsls	r3, r3, #8
 800bea4:	697a      	ldr	r2, [r7, #20]
 800bea6:	4313      	orrs	r3, r2
 800bea8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	697a      	ldr	r2, [r7, #20]
 800beae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	693a      	ldr	r2, [r7, #16]
 800bec2:	621a      	str	r2, [r3, #32]
}
 800bec4:	bf00      	nop
 800bec6:	371c      	adds	r7, #28
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr
 800bed0:	40012c00 	.word	0x40012c00
 800bed4:	40013400 	.word	0x40013400
 800bed8:	40014000 	.word	0x40014000
 800bedc:	40014400 	.word	0x40014400
 800bee0:	40014800 	.word	0x40014800

0800bee4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b087      	sub	sp, #28
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6a1b      	ldr	r3, [r3, #32]
 800bef2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a1b      	ldr	r3, [r3, #32]
 800befe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bf12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	021b      	lsls	r3, r3, #8
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	4313      	orrs	r3, r2
 800bf22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	051b      	lsls	r3, r3, #20
 800bf32:	693a      	ldr	r2, [r7, #16]
 800bf34:	4313      	orrs	r3, r2
 800bf36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	4a18      	ldr	r2, [pc, #96]	; (800bf9c <TIM_OC6_SetConfig+0xb8>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d00f      	beq.n	800bf60 <TIM_OC6_SetConfig+0x7c>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	4a17      	ldr	r2, [pc, #92]	; (800bfa0 <TIM_OC6_SetConfig+0xbc>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d00b      	beq.n	800bf60 <TIM_OC6_SetConfig+0x7c>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4a16      	ldr	r2, [pc, #88]	; (800bfa4 <TIM_OC6_SetConfig+0xc0>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d007      	beq.n	800bf60 <TIM_OC6_SetConfig+0x7c>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a15      	ldr	r2, [pc, #84]	; (800bfa8 <TIM_OC6_SetConfig+0xc4>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d003      	beq.n	800bf60 <TIM_OC6_SetConfig+0x7c>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a14      	ldr	r2, [pc, #80]	; (800bfac <TIM_OC6_SetConfig+0xc8>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d109      	bne.n	800bf74 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	695b      	ldr	r3, [r3, #20]
 800bf6c:	029b      	lsls	r3, r3, #10
 800bf6e:	697a      	ldr	r2, [r7, #20]
 800bf70:	4313      	orrs	r3, r2
 800bf72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	697a      	ldr	r2, [r7, #20]
 800bf78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	693a      	ldr	r2, [r7, #16]
 800bf8c:	621a      	str	r2, [r3, #32]
}
 800bf8e:	bf00      	nop
 800bf90:	371c      	adds	r7, #28
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	40012c00 	.word	0x40012c00
 800bfa0:	40013400 	.word	0x40013400
 800bfa4:	40014000 	.word	0x40014000
 800bfa8:	40014400 	.word	0x40014400
 800bfac:	40014800 	.word	0x40014800

0800bfb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b087      	sub	sp, #28
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6a1b      	ldr	r3, [r3, #32]
 800bfc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6a1b      	ldr	r3, [r3, #32]
 800bfc6:	f023 0201 	bic.w	r2, r3, #1
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	699b      	ldr	r3, [r3, #24]
 800bfd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bfda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	011b      	lsls	r3, r3, #4
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	f023 030a 	bic.w	r3, r3, #10
 800bfec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bfee:	697a      	ldr	r2, [r7, #20]
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	693a      	ldr	r2, [r7, #16]
 800bffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	697a      	ldr	r2, [r7, #20]
 800c000:	621a      	str	r2, [r3, #32]
}
 800c002:	bf00      	nop
 800c004:	371c      	adds	r7, #28
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr

0800c00e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c00e:	b480      	push	{r7}
 800c010:	b087      	sub	sp, #28
 800c012:	af00      	add	r7, sp, #0
 800c014:	60f8      	str	r0, [r7, #12]
 800c016:	60b9      	str	r1, [r7, #8]
 800c018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	6a1b      	ldr	r3, [r3, #32]
 800c01e:	f023 0210 	bic.w	r2, r3, #16
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	699b      	ldr	r3, [r3, #24]
 800c02a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6a1b      	ldr	r3, [r3, #32]
 800c030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	031b      	lsls	r3, r3, #12
 800c03e:	697a      	ldr	r2, [r7, #20]
 800c040:	4313      	orrs	r3, r2
 800c042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c04a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	011b      	lsls	r3, r3, #4
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	4313      	orrs	r3, r2
 800c054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	697a      	ldr	r2, [r7, #20]
 800c05a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	693a      	ldr	r2, [r7, #16]
 800c060:	621a      	str	r2, [r3, #32]
}
 800c062:	bf00      	nop
 800c064:	371c      	adds	r7, #28
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr

0800c06e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c06e:	b480      	push	{r7}
 800c070:	b085      	sub	sp, #20
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
 800c076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c086:	683a      	ldr	r2, [r7, #0]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	f043 0307 	orr.w	r3, r3, #7
 800c090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	609a      	str	r2, [r3, #8]
}
 800c098:	bf00      	nop
 800c09a:	3714      	adds	r7, #20
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b087      	sub	sp, #28
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	607a      	str	r2, [r7, #4]
 800c0b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	021a      	lsls	r2, r3, #8
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	431a      	orrs	r2, r3
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	697a      	ldr	r2, [r7, #20]
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	697a      	ldr	r2, [r7, #20]
 800c0d6:	609a      	str	r2, [r3, #8]
}
 800c0d8:	bf00      	nop
 800c0da:	371c      	adds	r7, #28
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	f003 031f 	and.w	r3, r3, #31
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	6a1a      	ldr	r2, [r3, #32]
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	43db      	mvns	r3, r3
 800c106:	401a      	ands	r2, r3
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	6a1a      	ldr	r2, [r3, #32]
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	f003 031f 	and.w	r3, r3, #31
 800c116:	6879      	ldr	r1, [r7, #4]
 800c118:	fa01 f303 	lsl.w	r3, r1, r3
 800c11c:	431a      	orrs	r2, r3
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	621a      	str	r2, [r3, #32]
}
 800c122:	bf00      	nop
 800c124:	371c      	adds	r7, #28
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr
	...

0800c130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c140:	2b01      	cmp	r3, #1
 800c142:	d101      	bne.n	800c148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c144:	2302      	movs	r3, #2
 800c146:	e063      	b.n	800c210 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2201      	movs	r2, #1
 800c14c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2202      	movs	r2, #2
 800c154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a2b      	ldr	r2, [pc, #172]	; (800c21c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d004      	beq.n	800c17c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a2a      	ldr	r2, [pc, #168]	; (800c220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d108      	bne.n	800c18e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c182:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	4313      	orrs	r3, r2
 800c18c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c194:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	4313      	orrs	r3, r2
 800c19e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68fa      	ldr	r2, [r7, #12]
 800c1a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a1b      	ldr	r2, [pc, #108]	; (800c21c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d018      	beq.n	800c1e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1ba:	d013      	beq.n	800c1e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a18      	ldr	r2, [pc, #96]	; (800c224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d00e      	beq.n	800c1e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a17      	ldr	r2, [pc, #92]	; (800c228 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d009      	beq.n	800c1e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4a12      	ldr	r2, [pc, #72]	; (800c220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d004      	beq.n	800c1e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4a13      	ldr	r2, [pc, #76]	; (800c22c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d10c      	bne.n	800c1fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	68ba      	ldr	r2, [r7, #8]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2201      	movs	r2, #1
 800c202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c20e:	2300      	movs	r3, #0
}
 800c210:	4618      	mov	r0, r3
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	40012c00 	.word	0x40012c00
 800c220:	40013400 	.word	0x40013400
 800c224:	40000400 	.word	0x40000400
 800c228:	40000800 	.word	0x40000800
 800c22c:	40014000 	.word	0x40014000

0800c230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c238:	bf00      	nop
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c24c:	bf00      	nop
 800c24e:	370c      	adds	r7, #12
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c260:	bf00      	nop
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d101      	bne.n	800c27e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c27a:	2301      	movs	r3, #1
 800c27c:	e040      	b.n	800c300 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c282:	2b00      	cmp	r3, #0
 800c284:	d106      	bne.n	800c294 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f7fa feb8 	bl	8007004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2224      	movs	r2, #36	; 0x24
 800c298:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f022 0201 	bic.w	r2, r2, #1
 800c2a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 fc00 	bl	800cab0 <UART_SetConfig>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d101      	bne.n	800c2ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e022      	b.n	800c300 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d002      	beq.n	800c2c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fdc8 	bl	800ce58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	685a      	ldr	r2, [r3, #4]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c2d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	689a      	ldr	r2, [r3, #8]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c2e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	681a      	ldr	r2, [r3, #0]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f042 0201 	orr.w	r2, r2, #1
 800c2f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 fe4f 	bl	800cf9c <UART_CheckIdleState>
 800c2fe:	4603      	mov	r3, r0
}
 800c300:	4618      	mov	r0, r3
 800c302:	3708      	adds	r7, #8
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b08a      	sub	sp, #40	; 0x28
 800c30c:	af02      	add	r7, sp, #8
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	603b      	str	r3, [r7, #0]
 800c314:	4613      	mov	r3, r2
 800c316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c31c:	2b20      	cmp	r3, #32
 800c31e:	d178      	bne.n	800c412 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d002      	beq.n	800c32c <HAL_UART_Transmit+0x24>
 800c326:	88fb      	ldrh	r3, [r7, #6]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d101      	bne.n	800c330 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	e071      	b.n	800c414 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2200      	movs	r2, #0
 800c334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2221      	movs	r2, #33	; 0x21
 800c33c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c33e:	f7fb f835 	bl	80073ac <HAL_GetTick>
 800c342:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	88fa      	ldrh	r2, [r7, #6]
 800c348:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	88fa      	ldrh	r2, [r7, #6]
 800c350:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c35c:	d108      	bne.n	800c370 <HAL_UART_Transmit+0x68>
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	691b      	ldr	r3, [r3, #16]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d104      	bne.n	800c370 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800c366:	2300      	movs	r3, #0
 800c368:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	61bb      	str	r3, [r7, #24]
 800c36e:	e003      	b.n	800c378 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c374:	2300      	movs	r3, #0
 800c376:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c378:	e030      	b.n	800c3dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	9300      	str	r3, [sp, #0]
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	2200      	movs	r2, #0
 800c382:	2180      	movs	r1, #128	; 0x80
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	f000 feb1 	bl	800d0ec <UART_WaitOnFlagUntilTimeout>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d004      	beq.n	800c39a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2220      	movs	r2, #32
 800c394:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800c396:	2303      	movs	r3, #3
 800c398:	e03c      	b.n	800c414 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d10b      	bne.n	800c3b8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	881a      	ldrh	r2, [r3, #0]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c3ac:	b292      	uxth	r2, r2
 800c3ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	3302      	adds	r3, #2
 800c3b4:	61bb      	str	r3, [r7, #24]
 800c3b6:	e008      	b.n	800c3ca <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	781a      	ldrb	r2, [r3, #0]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	b292      	uxth	r2, r2
 800c3c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c3c4:	69fb      	ldr	r3, [r7, #28]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	b29a      	uxth	r2, r3
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1c8      	bne.n	800c37a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	2140      	movs	r1, #64	; 0x40
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f000 fe7a 	bl	800d0ec <UART_WaitOnFlagUntilTimeout>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d004      	beq.n	800c408 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2220      	movs	r2, #32
 800c402:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800c404:	2303      	movs	r3, #3
 800c406:	e005      	b.n	800c414 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2220      	movs	r2, #32
 800c40c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800c40e:	2300      	movs	r3, #0
 800c410:	e000      	b.n	800c414 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800c412:	2302      	movs	r3, #2
  }
}
 800c414:	4618      	mov	r0, r3
 800c416:	3720      	adds	r7, #32
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b08a      	sub	sp, #40	; 0x28
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	4613      	mov	r3, r2
 800c428:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c430:	2b20      	cmp	r3, #32
 800c432:	d132      	bne.n	800c49a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d002      	beq.n	800c440 <HAL_UART_Receive_IT+0x24>
 800c43a:	88fb      	ldrh	r3, [r7, #6]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d101      	bne.n	800c444 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c440:	2301      	movs	r3, #1
 800c442:	e02b      	b.n	800c49c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2200      	movs	r2, #0
 800c448:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d018      	beq.n	800c48a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	e853 3f00 	ldrex	r3, [r3]
 800c464:	613b      	str	r3, [r7, #16]
   return(result);
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c46c:	627b      	str	r3, [r7, #36]	; 0x24
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	461a      	mov	r2, r3
 800c474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c476:	623b      	str	r3, [r7, #32]
 800c478:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47a:	69f9      	ldr	r1, [r7, #28]
 800c47c:	6a3a      	ldr	r2, [r7, #32]
 800c47e:	e841 2300 	strex	r3, r2, [r1]
 800c482:	61bb      	str	r3, [r7, #24]
   return(result);
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1e6      	bne.n	800c458 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c48a:	88fb      	ldrh	r3, [r7, #6]
 800c48c:	461a      	mov	r2, r3
 800c48e:	68b9      	ldr	r1, [r7, #8]
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f000 fe93 	bl	800d1bc <UART_Start_Receive_IT>
 800c496:	4603      	mov	r3, r0
 800c498:	e000      	b.n	800c49c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800c49a:	2302      	movs	r3, #2
  }
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3728      	adds	r7, #40	; 0x28
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b0ba      	sub	sp, #232	; 0xe8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	69db      	ldr	r3, [r3, #28]
 800c4b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	689b      	ldr	r3, [r3, #8]
 800c4c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c4ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c4ce:	f640 030f 	movw	r3, #2063	; 0x80f
 800c4d2:	4013      	ands	r3, r2
 800c4d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c4d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d115      	bne.n	800c50c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c4e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4e4:	f003 0320 	and.w	r3, r3, #32
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00f      	beq.n	800c50c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c4ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4f0:	f003 0320 	and.w	r3, r3, #32
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d009      	beq.n	800c50c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f000 82ab 	beq.w	800ca58 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	4798      	blx	r3
      }
      return;
 800c50a:	e2a5      	b.n	800ca58 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c50c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c510:	2b00      	cmp	r3, #0
 800c512:	f000 8117 	beq.w	800c744 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c51a:	f003 0301 	and.w	r3, r3, #1
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d106      	bne.n	800c530 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c522:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c526:	4b85      	ldr	r3, [pc, #532]	; (800c73c <HAL_UART_IRQHandler+0x298>)
 800c528:	4013      	ands	r3, r2
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 810a 	beq.w	800c744 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c534:	f003 0301 	and.w	r3, r3, #1
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d011      	beq.n	800c560 <HAL_UART_IRQHandler+0xbc>
 800c53c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c544:	2b00      	cmp	r3, #0
 800c546:	d00b      	beq.n	800c560 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2201      	movs	r2, #1
 800c54e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c556:	f043 0201 	orr.w	r2, r3, #1
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c564:	f003 0302 	and.w	r3, r3, #2
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d011      	beq.n	800c590 <HAL_UART_IRQHandler+0xec>
 800c56c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c570:	f003 0301 	and.w	r3, r3, #1
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00b      	beq.n	800c590 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2202      	movs	r2, #2
 800c57e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c586:	f043 0204 	orr.w	r2, r3, #4
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c594:	f003 0304 	and.w	r3, r3, #4
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d011      	beq.n	800c5c0 <HAL_UART_IRQHandler+0x11c>
 800c59c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5a0:	f003 0301 	and.w	r3, r3, #1
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00b      	beq.n	800c5c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2204      	movs	r2, #4
 800c5ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5b6:	f043 0202 	orr.w	r2, r3, #2
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c5c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5c4:	f003 0308 	and.w	r3, r3, #8
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d017      	beq.n	800c5fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c5cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5d0:	f003 0320 	and.w	r3, r3, #32
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d105      	bne.n	800c5e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c5d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d00b      	beq.n	800c5fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2208      	movs	r2, #8
 800c5ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5f2:	f043 0208 	orr.w	r2, r3, #8
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c5fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c604:	2b00      	cmp	r3, #0
 800c606:	d012      	beq.n	800c62e <HAL_UART_IRQHandler+0x18a>
 800c608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c60c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00c      	beq.n	800c62e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c61c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c624:	f043 0220 	orr.w	r2, r3, #32
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c634:	2b00      	cmp	r3, #0
 800c636:	f000 8211 	beq.w	800ca5c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c63e:	f003 0320 	and.w	r3, r3, #32
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00d      	beq.n	800c662 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c64a:	f003 0320 	and.w	r3, r3, #32
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d007      	beq.n	800c662 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c656:	2b00      	cmp	r3, #0
 800c658:	d003      	beq.n	800c662 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	689b      	ldr	r3, [r3, #8]
 800c672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c676:	2b40      	cmp	r3, #64	; 0x40
 800c678:	d005      	beq.n	800c686 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c67a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c67e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c682:	2b00      	cmp	r3, #0
 800c684:	d04f      	beq.n	800c726 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 fe4c 	bl	800d324 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c696:	2b40      	cmp	r3, #64	; 0x40
 800c698:	d141      	bne.n	800c71e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	3308      	adds	r3, #8
 800c6a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c6a8:	e853 3f00 	ldrex	r3, [r3]
 800c6ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c6b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	3308      	adds	r3, #8
 800c6c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c6c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c6ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c6d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c6d6:	e841 2300 	strex	r3, r2, [r1]
 800c6da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c6de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d1d9      	bne.n	800c69a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d013      	beq.n	800c716 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6f2:	4a13      	ldr	r2, [pc, #76]	; (800c740 <HAL_UART_IRQHandler+0x29c>)
 800c6f4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7fc fac8 	bl	8008c90 <HAL_DMA_Abort_IT>
 800c700:	4603      	mov	r3, r0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d017      	beq.n	800c736 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c710:	4610      	mov	r0, r2
 800c712:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c714:	e00f      	b.n	800c736 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 f9b4 	bl	800ca84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c71c:	e00b      	b.n	800c736 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f9b0 	bl	800ca84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c724:	e007      	b.n	800c736 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 f9ac 	bl	800ca84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800c734:	e192      	b.n	800ca5c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c736:	bf00      	nop
    return;
 800c738:	e190      	b.n	800ca5c <HAL_UART_IRQHandler+0x5b8>
 800c73a:	bf00      	nop
 800c73c:	04000120 	.word	0x04000120
 800c740:	0800d3ed 	.word	0x0800d3ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c748:	2b01      	cmp	r3, #1
 800c74a:	f040 814b 	bne.w	800c9e4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c74e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c752:	f003 0310 	and.w	r3, r3, #16
 800c756:	2b00      	cmp	r3, #0
 800c758:	f000 8144 	beq.w	800c9e4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c75c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c760:	f003 0310 	and.w	r3, r3, #16
 800c764:	2b00      	cmp	r3, #0
 800c766:	f000 813d 	beq.w	800c9e4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2210      	movs	r2, #16
 800c770:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c77c:	2b40      	cmp	r3, #64	; 0x40
 800c77e:	f040 80b5 	bne.w	800c8ec <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c78e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c792:	2b00      	cmp	r3, #0
 800c794:	f000 8164 	beq.w	800ca60 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c79e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	f080 815c 	bcs.w	800ca60 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c7ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7b6:	699b      	ldr	r3, [r3, #24]
 800c7b8:	2b20      	cmp	r3, #32
 800c7ba:	f000 8086 	beq.w	800c8ca <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c7ca:	e853 3f00 	ldrex	r3, [r3]
 800c7ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c7d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c7d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c7e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c7ec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c7f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c7f8:	e841 2300 	strex	r3, r2, [r1]
 800c7fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c800:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c804:	2b00      	cmp	r3, #0
 800c806:	d1da      	bne.n	800c7be <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	3308      	adds	r3, #8
 800c80e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c812:	e853 3f00 	ldrex	r3, [r3]
 800c816:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c81a:	f023 0301 	bic.w	r3, r3, #1
 800c81e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	3308      	adds	r3, #8
 800c828:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c82c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c830:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c832:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c834:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c838:	e841 2300 	strex	r3, r2, [r1]
 800c83c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c83e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c840:	2b00      	cmp	r3, #0
 800c842:	d1e1      	bne.n	800c808 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	3308      	adds	r3, #8
 800c84a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c84e:	e853 3f00 	ldrex	r3, [r3]
 800c852:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c85a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	3308      	adds	r3, #8
 800c864:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c868:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c86a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c86e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c870:	e841 2300 	strex	r3, r2, [r1]
 800c874:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1e3      	bne.n	800c844 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2220      	movs	r2, #32
 800c880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c892:	e853 3f00 	ldrex	r3, [r3]
 800c896:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c89a:	f023 0310 	bic.w	r3, r3, #16
 800c89e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c8ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800c8ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c8b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c8b4:	e841 2300 	strex	r3, r2, [r1]
 800c8b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c8ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d1e4      	bne.n	800c88a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fc f9aa 	bl	8008c1e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2202      	movs	r2, #2
 800c8ce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	1ad3      	subs	r3, r2, r3
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 f8d7 	bl	800ca98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c8ea:	e0b9      	b.n	800ca60 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	1ad3      	subs	r3, r2, r3
 800c8fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c906:	b29b      	uxth	r3, r3
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f000 80ab 	beq.w	800ca64 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800c90e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c912:	2b00      	cmp	r3, #0
 800c914:	f000 80a6 	beq.w	800ca64 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c920:	e853 3f00 	ldrex	r3, [r3]
 800c924:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c92c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	461a      	mov	r2, r3
 800c936:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c93a:	647b      	str	r3, [r7, #68]	; 0x44
 800c93c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c93e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c942:	e841 2300 	strex	r3, r2, [r1]
 800c946:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1e4      	bne.n	800c918 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	3308      	adds	r3, #8
 800c954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c958:	e853 3f00 	ldrex	r3, [r3]
 800c95c:	623b      	str	r3, [r7, #32]
   return(result);
 800c95e:	6a3b      	ldr	r3, [r7, #32]
 800c960:	f023 0301 	bic.w	r3, r3, #1
 800c964:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	3308      	adds	r3, #8
 800c96e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c972:	633a      	str	r2, [r7, #48]	; 0x30
 800c974:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c97a:	e841 2300 	strex	r3, r2, [r1]
 800c97e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1e3      	bne.n	800c94e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2220      	movs	r2, #32
 800c98a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	e853 3f00 	ldrex	r3, [r3]
 800c9a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f023 0310 	bic.w	r3, r3, #16
 800c9ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c9bc:	61fb      	str	r3, [r7, #28]
 800c9be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c0:	69b9      	ldr	r1, [r7, #24]
 800c9c2:	69fa      	ldr	r2, [r7, #28]
 800c9c4:	e841 2300 	strex	r3, r2, [r1]
 800c9c8:	617b      	str	r3, [r7, #20]
   return(result);
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d1e4      	bne.n	800c99a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2202      	movs	r2, #2
 800c9d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c9d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c9da:	4619      	mov	r1, r3
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 f85b 	bl	800ca98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c9e2:	e03f      	b.n	800ca64 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c9e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d00e      	beq.n	800ca0e <HAL_UART_IRQHandler+0x56a>
 800c9f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c9f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d008      	beq.n	800ca0e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ca04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 fed8 	bl	800d7bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca0c:	e02d      	b.n	800ca6a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ca0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00e      	beq.n	800ca38 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ca1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d008      	beq.n	800ca38 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d01c      	beq.n	800ca68 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	4798      	blx	r3
    }
    return;
 800ca36:	e017      	b.n	800ca68 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ca38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d012      	beq.n	800ca6a <HAL_UART_IRQHandler+0x5c6>
 800ca44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d00c      	beq.n	800ca6a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 fce1 	bl	800d418 <UART_EndTransmit_IT>
    return;
 800ca56:	e008      	b.n	800ca6a <HAL_UART_IRQHandler+0x5c6>
      return;
 800ca58:	bf00      	nop
 800ca5a:	e006      	b.n	800ca6a <HAL_UART_IRQHandler+0x5c6>
    return;
 800ca5c:	bf00      	nop
 800ca5e:	e004      	b.n	800ca6a <HAL_UART_IRQHandler+0x5c6>
      return;
 800ca60:	bf00      	nop
 800ca62:	e002      	b.n	800ca6a <HAL_UART_IRQHandler+0x5c6>
      return;
 800ca64:	bf00      	nop
 800ca66:	e000      	b.n	800ca6a <HAL_UART_IRQHandler+0x5c6>
    return;
 800ca68:	bf00      	nop
  }

}
 800ca6a:	37e8      	adds	r7, #232	; 0xe8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ca78:	bf00      	nop
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b083      	sub	sp, #12
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ca8c:	bf00      	nop
 800ca8e:	370c      	adds	r7, #12
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	460b      	mov	r3, r1
 800caa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800caa4:	bf00      	nop
 800caa6:	370c      	adds	r7, #12
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b088      	sub	sp, #32
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	689a      	ldr	r2, [r3, #8]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	691b      	ldr	r3, [r3, #16]
 800cac4:	431a      	orrs	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	695b      	ldr	r3, [r3, #20]
 800caca:	431a      	orrs	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	69db      	ldr	r3, [r3, #28]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800cade:	f023 030c 	bic.w	r3, r3, #12
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	6812      	ldr	r2, [r2, #0]
 800cae6:	6979      	ldr	r1, [r7, #20]
 800cae8:	430b      	orrs	r3, r1
 800caea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	68da      	ldr	r2, [r3, #12]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	430a      	orrs	r2, r1
 800cb00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	699b      	ldr	r3, [r3, #24]
 800cb06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6a1b      	ldr	r3, [r3, #32]
 800cb0c:	697a      	ldr	r2, [r7, #20]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	697a      	ldr	r2, [r7, #20]
 800cb22:	430a      	orrs	r2, r1
 800cb24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4aa7      	ldr	r2, [pc, #668]	; (800cdc8 <UART_SetConfig+0x318>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d120      	bne.n	800cb72 <UART_SetConfig+0xc2>
 800cb30:	4ba6      	ldr	r3, [pc, #664]	; (800cdcc <UART_SetConfig+0x31c>)
 800cb32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb34:	f003 0303 	and.w	r3, r3, #3
 800cb38:	2b03      	cmp	r3, #3
 800cb3a:	d817      	bhi.n	800cb6c <UART_SetConfig+0xbc>
 800cb3c:	a201      	add	r2, pc, #4	; (adr r2, 800cb44 <UART_SetConfig+0x94>)
 800cb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb42:	bf00      	nop
 800cb44:	0800cb55 	.word	0x0800cb55
 800cb48:	0800cb61 	.word	0x0800cb61
 800cb4c:	0800cb67 	.word	0x0800cb67
 800cb50:	0800cb5b 	.word	0x0800cb5b
 800cb54:	2301      	movs	r3, #1
 800cb56:	77fb      	strb	r3, [r7, #31]
 800cb58:	e0b5      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cb5a:	2302      	movs	r3, #2
 800cb5c:	77fb      	strb	r3, [r7, #31]
 800cb5e:	e0b2      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cb60:	2304      	movs	r3, #4
 800cb62:	77fb      	strb	r3, [r7, #31]
 800cb64:	e0af      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cb66:	2308      	movs	r3, #8
 800cb68:	77fb      	strb	r3, [r7, #31]
 800cb6a:	e0ac      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cb6c:	2310      	movs	r3, #16
 800cb6e:	77fb      	strb	r3, [r7, #31]
 800cb70:	e0a9      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a96      	ldr	r2, [pc, #600]	; (800cdd0 <UART_SetConfig+0x320>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d124      	bne.n	800cbc6 <UART_SetConfig+0x116>
 800cb7c:	4b93      	ldr	r3, [pc, #588]	; (800cdcc <UART_SetConfig+0x31c>)
 800cb7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cb84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb88:	d011      	beq.n	800cbae <UART_SetConfig+0xfe>
 800cb8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb8e:	d817      	bhi.n	800cbc0 <UART_SetConfig+0x110>
 800cb90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb94:	d011      	beq.n	800cbba <UART_SetConfig+0x10a>
 800cb96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb9a:	d811      	bhi.n	800cbc0 <UART_SetConfig+0x110>
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d003      	beq.n	800cba8 <UART_SetConfig+0xf8>
 800cba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cba4:	d006      	beq.n	800cbb4 <UART_SetConfig+0x104>
 800cba6:	e00b      	b.n	800cbc0 <UART_SetConfig+0x110>
 800cba8:	2300      	movs	r3, #0
 800cbaa:	77fb      	strb	r3, [r7, #31]
 800cbac:	e08b      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cbae:	2302      	movs	r3, #2
 800cbb0:	77fb      	strb	r3, [r7, #31]
 800cbb2:	e088      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cbb4:	2304      	movs	r3, #4
 800cbb6:	77fb      	strb	r3, [r7, #31]
 800cbb8:	e085      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cbba:	2308      	movs	r3, #8
 800cbbc:	77fb      	strb	r3, [r7, #31]
 800cbbe:	e082      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cbc0:	2310      	movs	r3, #16
 800cbc2:	77fb      	strb	r3, [r7, #31]
 800cbc4:	e07f      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4a82      	ldr	r2, [pc, #520]	; (800cdd4 <UART_SetConfig+0x324>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d124      	bne.n	800cc1a <UART_SetConfig+0x16a>
 800cbd0:	4b7e      	ldr	r3, [pc, #504]	; (800cdcc <UART_SetConfig+0x31c>)
 800cbd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800cbd8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800cbdc:	d011      	beq.n	800cc02 <UART_SetConfig+0x152>
 800cbde:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800cbe2:	d817      	bhi.n	800cc14 <UART_SetConfig+0x164>
 800cbe4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cbe8:	d011      	beq.n	800cc0e <UART_SetConfig+0x15e>
 800cbea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cbee:	d811      	bhi.n	800cc14 <UART_SetConfig+0x164>
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d003      	beq.n	800cbfc <UART_SetConfig+0x14c>
 800cbf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cbf8:	d006      	beq.n	800cc08 <UART_SetConfig+0x158>
 800cbfa:	e00b      	b.n	800cc14 <UART_SetConfig+0x164>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	77fb      	strb	r3, [r7, #31]
 800cc00:	e061      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cc02:	2302      	movs	r3, #2
 800cc04:	77fb      	strb	r3, [r7, #31]
 800cc06:	e05e      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cc08:	2304      	movs	r3, #4
 800cc0a:	77fb      	strb	r3, [r7, #31]
 800cc0c:	e05b      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cc0e:	2308      	movs	r3, #8
 800cc10:	77fb      	strb	r3, [r7, #31]
 800cc12:	e058      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cc14:	2310      	movs	r3, #16
 800cc16:	77fb      	strb	r3, [r7, #31]
 800cc18:	e055      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4a6e      	ldr	r2, [pc, #440]	; (800cdd8 <UART_SetConfig+0x328>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d124      	bne.n	800cc6e <UART_SetConfig+0x1be>
 800cc24:	4b69      	ldr	r3, [pc, #420]	; (800cdcc <UART_SetConfig+0x31c>)
 800cc26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc28:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800cc2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cc30:	d011      	beq.n	800cc56 <UART_SetConfig+0x1a6>
 800cc32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cc36:	d817      	bhi.n	800cc68 <UART_SetConfig+0x1b8>
 800cc38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc3c:	d011      	beq.n	800cc62 <UART_SetConfig+0x1b2>
 800cc3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc42:	d811      	bhi.n	800cc68 <UART_SetConfig+0x1b8>
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d003      	beq.n	800cc50 <UART_SetConfig+0x1a0>
 800cc48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc4c:	d006      	beq.n	800cc5c <UART_SetConfig+0x1ac>
 800cc4e:	e00b      	b.n	800cc68 <UART_SetConfig+0x1b8>
 800cc50:	2300      	movs	r3, #0
 800cc52:	77fb      	strb	r3, [r7, #31]
 800cc54:	e037      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cc56:	2302      	movs	r3, #2
 800cc58:	77fb      	strb	r3, [r7, #31]
 800cc5a:	e034      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cc5c:	2304      	movs	r3, #4
 800cc5e:	77fb      	strb	r3, [r7, #31]
 800cc60:	e031      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cc62:	2308      	movs	r3, #8
 800cc64:	77fb      	strb	r3, [r7, #31]
 800cc66:	e02e      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cc68:	2310      	movs	r3, #16
 800cc6a:	77fb      	strb	r3, [r7, #31]
 800cc6c:	e02b      	b.n	800ccc6 <UART_SetConfig+0x216>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4a5a      	ldr	r2, [pc, #360]	; (800cddc <UART_SetConfig+0x32c>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d124      	bne.n	800ccc2 <UART_SetConfig+0x212>
 800cc78:	4b54      	ldr	r3, [pc, #336]	; (800cdcc <UART_SetConfig+0x31c>)
 800cc7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc7c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800cc80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cc84:	d011      	beq.n	800ccaa <UART_SetConfig+0x1fa>
 800cc86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800cc8a:	d817      	bhi.n	800ccbc <UART_SetConfig+0x20c>
 800cc8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc90:	d011      	beq.n	800ccb6 <UART_SetConfig+0x206>
 800cc92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc96:	d811      	bhi.n	800ccbc <UART_SetConfig+0x20c>
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d003      	beq.n	800cca4 <UART_SetConfig+0x1f4>
 800cc9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cca0:	d006      	beq.n	800ccb0 <UART_SetConfig+0x200>
 800cca2:	e00b      	b.n	800ccbc <UART_SetConfig+0x20c>
 800cca4:	2300      	movs	r3, #0
 800cca6:	77fb      	strb	r3, [r7, #31]
 800cca8:	e00d      	b.n	800ccc6 <UART_SetConfig+0x216>
 800ccaa:	2302      	movs	r3, #2
 800ccac:	77fb      	strb	r3, [r7, #31]
 800ccae:	e00a      	b.n	800ccc6 <UART_SetConfig+0x216>
 800ccb0:	2304      	movs	r3, #4
 800ccb2:	77fb      	strb	r3, [r7, #31]
 800ccb4:	e007      	b.n	800ccc6 <UART_SetConfig+0x216>
 800ccb6:	2308      	movs	r3, #8
 800ccb8:	77fb      	strb	r3, [r7, #31]
 800ccba:	e004      	b.n	800ccc6 <UART_SetConfig+0x216>
 800ccbc:	2310      	movs	r3, #16
 800ccbe:	77fb      	strb	r3, [r7, #31]
 800ccc0:	e001      	b.n	800ccc6 <UART_SetConfig+0x216>
 800ccc2:	2310      	movs	r3, #16
 800ccc4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	69db      	ldr	r3, [r3, #28]
 800ccca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccce:	d15b      	bne.n	800cd88 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800ccd0:	7ffb      	ldrb	r3, [r7, #31]
 800ccd2:	2b08      	cmp	r3, #8
 800ccd4:	d827      	bhi.n	800cd26 <UART_SetConfig+0x276>
 800ccd6:	a201      	add	r2, pc, #4	; (adr r2, 800ccdc <UART_SetConfig+0x22c>)
 800ccd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccdc:	0800cd01 	.word	0x0800cd01
 800cce0:	0800cd09 	.word	0x0800cd09
 800cce4:	0800cd11 	.word	0x0800cd11
 800cce8:	0800cd27 	.word	0x0800cd27
 800ccec:	0800cd17 	.word	0x0800cd17
 800ccf0:	0800cd27 	.word	0x0800cd27
 800ccf4:	0800cd27 	.word	0x0800cd27
 800ccf8:	0800cd27 	.word	0x0800cd27
 800ccfc:	0800cd1f 	.word	0x0800cd1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd00:	f7fd fe08 	bl	800a914 <HAL_RCC_GetPCLK1Freq>
 800cd04:	61b8      	str	r0, [r7, #24]
        break;
 800cd06:	e013      	b.n	800cd30 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd08:	f7fd fe26 	bl	800a958 <HAL_RCC_GetPCLK2Freq>
 800cd0c:	61b8      	str	r0, [r7, #24]
        break;
 800cd0e:	e00f      	b.n	800cd30 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd10:	4b33      	ldr	r3, [pc, #204]	; (800cde0 <UART_SetConfig+0x330>)
 800cd12:	61bb      	str	r3, [r7, #24]
        break;
 800cd14:	e00c      	b.n	800cd30 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd16:	f7fd fd87 	bl	800a828 <HAL_RCC_GetSysClockFreq>
 800cd1a:	61b8      	str	r0, [r7, #24]
        break;
 800cd1c:	e008      	b.n	800cd30 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd22:	61bb      	str	r3, [r7, #24]
        break;
 800cd24:	e004      	b.n	800cd30 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800cd26:	2300      	movs	r3, #0
 800cd28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	77bb      	strb	r3, [r7, #30]
        break;
 800cd2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	f000 8082 	beq.w	800ce3c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cd38:	69bb      	ldr	r3, [r7, #24]
 800cd3a:	005a      	lsls	r2, r3, #1
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	085b      	lsrs	r3, r3, #1
 800cd42:	441a      	add	r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	2b0f      	cmp	r3, #15
 800cd52:	d916      	bls.n	800cd82 <UART_SetConfig+0x2d2>
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd5a:	d212      	bcs.n	800cd82 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	f023 030f 	bic.w	r3, r3, #15
 800cd64:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	085b      	lsrs	r3, r3, #1
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	f003 0307 	and.w	r3, r3, #7
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	89fb      	ldrh	r3, [r7, #14]
 800cd74:	4313      	orrs	r3, r2
 800cd76:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	89fa      	ldrh	r2, [r7, #14]
 800cd7e:	60da      	str	r2, [r3, #12]
 800cd80:	e05c      	b.n	800ce3c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800cd82:	2301      	movs	r3, #1
 800cd84:	77bb      	strb	r3, [r7, #30]
 800cd86:	e059      	b.n	800ce3c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd88:	7ffb      	ldrb	r3, [r7, #31]
 800cd8a:	2b08      	cmp	r3, #8
 800cd8c:	d835      	bhi.n	800cdfa <UART_SetConfig+0x34a>
 800cd8e:	a201      	add	r2, pc, #4	; (adr r2, 800cd94 <UART_SetConfig+0x2e4>)
 800cd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd94:	0800cdb9 	.word	0x0800cdb9
 800cd98:	0800cdc1 	.word	0x0800cdc1
 800cd9c:	0800cde5 	.word	0x0800cde5
 800cda0:	0800cdfb 	.word	0x0800cdfb
 800cda4:	0800cdeb 	.word	0x0800cdeb
 800cda8:	0800cdfb 	.word	0x0800cdfb
 800cdac:	0800cdfb 	.word	0x0800cdfb
 800cdb0:	0800cdfb 	.word	0x0800cdfb
 800cdb4:	0800cdf3 	.word	0x0800cdf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cdb8:	f7fd fdac 	bl	800a914 <HAL_RCC_GetPCLK1Freq>
 800cdbc:	61b8      	str	r0, [r7, #24]
        break;
 800cdbe:	e021      	b.n	800ce04 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cdc0:	f7fd fdca 	bl	800a958 <HAL_RCC_GetPCLK2Freq>
 800cdc4:	61b8      	str	r0, [r7, #24]
        break;
 800cdc6:	e01d      	b.n	800ce04 <UART_SetConfig+0x354>
 800cdc8:	40013800 	.word	0x40013800
 800cdcc:	40021000 	.word	0x40021000
 800cdd0:	40004400 	.word	0x40004400
 800cdd4:	40004800 	.word	0x40004800
 800cdd8:	40004c00 	.word	0x40004c00
 800cddc:	40005000 	.word	0x40005000
 800cde0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cde4:	4b1b      	ldr	r3, [pc, #108]	; (800ce54 <UART_SetConfig+0x3a4>)
 800cde6:	61bb      	str	r3, [r7, #24]
        break;
 800cde8:	e00c      	b.n	800ce04 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cdea:	f7fd fd1d 	bl	800a828 <HAL_RCC_GetSysClockFreq>
 800cdee:	61b8      	str	r0, [r7, #24]
        break;
 800cdf0:	e008      	b.n	800ce04 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cdf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdf6:	61bb      	str	r3, [r7, #24]
        break;
 800cdf8:	e004      	b.n	800ce04 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	77bb      	strb	r3, [r7, #30]
        break;
 800ce02:	bf00      	nop
    }

    if (pclk != 0U)
 800ce04:	69bb      	ldr	r3, [r7, #24]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d018      	beq.n	800ce3c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	085a      	lsrs	r2, r3, #1
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	441a      	add	r2, r3
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	2b0f      	cmp	r3, #15
 800ce22:	d909      	bls.n	800ce38 <UART_SetConfig+0x388>
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce2a:	d205      	bcs.n	800ce38 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	b29a      	uxth	r2, r3
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	60da      	str	r2, [r3, #12]
 800ce36:	e001      	b.n	800ce3c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ce48:	7fbb      	ldrb	r3, [r7, #30]
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3720      	adds	r7, #32
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	007a1200 	.word	0x007a1200

0800ce58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce64:	f003 0301 	and.w	r3, r3, #1
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d00a      	beq.n	800ce82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	430a      	orrs	r2, r1
 800ce80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce86:	f003 0302 	and.w	r3, r3, #2
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00a      	beq.n	800cea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	430a      	orrs	r2, r1
 800cea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea8:	f003 0304 	and.w	r3, r3, #4
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d00a      	beq.n	800cec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	430a      	orrs	r2, r1
 800cec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceca:	f003 0308 	and.w	r3, r3, #8
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d00a      	beq.n	800cee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	430a      	orrs	r2, r1
 800cee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceec:	f003 0310 	and.w	r3, r3, #16
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00a      	beq.n	800cf0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	689b      	ldr	r3, [r3, #8]
 800cefa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	430a      	orrs	r2, r1
 800cf08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf0e:	f003 0320 	and.w	r3, r3, #32
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d00a      	beq.n	800cf2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	689b      	ldr	r3, [r3, #8]
 800cf1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	430a      	orrs	r2, r1
 800cf2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d01a      	beq.n	800cf6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	430a      	orrs	r2, r1
 800cf4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf56:	d10a      	bne.n	800cf6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	430a      	orrs	r2, r1
 800cf6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d00a      	beq.n	800cf90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	430a      	orrs	r2, r1
 800cf8e:	605a      	str	r2, [r3, #4]
  }
}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b098      	sub	sp, #96	; 0x60
 800cfa0:	af02      	add	r7, sp, #8
 800cfa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cfac:	f7fa f9fe 	bl	80073ac <HAL_GetTick>
 800cfb0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f003 0308 	and.w	r3, r3, #8
 800cfbc:	2b08      	cmp	r3, #8
 800cfbe:	d12e      	bne.n	800d01e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cfc4:	9300      	str	r3, [sp, #0]
 800cfc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 f88c 	bl	800d0ec <UART_WaitOnFlagUntilTimeout>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d021      	beq.n	800d01e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe2:	e853 3f00 	ldrex	r3, [r3]
 800cfe6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cfe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfee:	653b      	str	r3, [r7, #80]	; 0x50
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	461a      	mov	r2, r3
 800cff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cff8:	647b      	str	r3, [r7, #68]	; 0x44
 800cffa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cffc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d000:	e841 2300 	strex	r3, r2, [r1]
 800d004:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1e6      	bne.n	800cfda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2220      	movs	r2, #32
 800d010:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d01a:	2303      	movs	r3, #3
 800d01c:	e062      	b.n	800d0e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f003 0304 	and.w	r3, r3, #4
 800d028:	2b04      	cmp	r3, #4
 800d02a:	d149      	bne.n	800d0c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d02c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d030:	9300      	str	r3, [sp, #0]
 800d032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d034:	2200      	movs	r2, #0
 800d036:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 f856 	bl	800d0ec <UART_WaitOnFlagUntilTimeout>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d03c      	beq.n	800d0c0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04e:	e853 3f00 	ldrex	r3, [r3]
 800d052:	623b      	str	r3, [r7, #32]
   return(result);
 800d054:	6a3b      	ldr	r3, [r7, #32]
 800d056:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d05a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	461a      	mov	r2, r3
 800d062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d064:	633b      	str	r3, [r7, #48]	; 0x30
 800d066:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d068:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d06a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d06c:	e841 2300 	strex	r3, r2, [r1]
 800d070:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d074:	2b00      	cmp	r3, #0
 800d076:	d1e6      	bne.n	800d046 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	3308      	adds	r3, #8
 800d07e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	e853 3f00 	ldrex	r3, [r3]
 800d086:	60fb      	str	r3, [r7, #12]
   return(result);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f023 0301 	bic.w	r3, r3, #1
 800d08e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	3308      	adds	r3, #8
 800d096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d098:	61fa      	str	r2, [r7, #28]
 800d09a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d09c:	69b9      	ldr	r1, [r7, #24]
 800d09e:	69fa      	ldr	r2, [r7, #28]
 800d0a0:	e841 2300 	strex	r3, r2, [r1]
 800d0a4:	617b      	str	r3, [r7, #20]
   return(result);
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1e5      	bne.n	800d078 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2220      	movs	r2, #32
 800d0b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0bc:	2303      	movs	r3, #3
 800d0be:	e011      	b.n	800d0e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2220      	movs	r2, #32
 800d0c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2220      	movs	r2, #32
 800d0ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800d0e2:	2300      	movs	r3, #0
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3758      	adds	r7, #88	; 0x58
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	603b      	str	r3, [r7, #0]
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0fc:	e049      	b.n	800d192 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d104:	d045      	beq.n	800d192 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d106:	f7fa f951 	bl	80073ac <HAL_GetTick>
 800d10a:	4602      	mov	r2, r0
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	1ad3      	subs	r3, r2, r3
 800d110:	69ba      	ldr	r2, [r7, #24]
 800d112:	429a      	cmp	r2, r3
 800d114:	d302      	bcc.n	800d11c <UART_WaitOnFlagUntilTimeout+0x30>
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d101      	bne.n	800d120 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d11c:	2303      	movs	r3, #3
 800d11e:	e048      	b.n	800d1b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f003 0304 	and.w	r3, r3, #4
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d031      	beq.n	800d192 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	69db      	ldr	r3, [r3, #28]
 800d134:	f003 0308 	and.w	r3, r3, #8
 800d138:	2b08      	cmp	r3, #8
 800d13a:	d110      	bne.n	800d15e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	2208      	movs	r2, #8
 800d142:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f000 f8ed 	bl	800d324 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2208      	movs	r2, #8
 800d14e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2200      	movs	r2, #0
 800d156:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800d15a:	2301      	movs	r3, #1
 800d15c:	e029      	b.n	800d1b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	69db      	ldr	r3, [r3, #28]
 800d164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d16c:	d111      	bne.n	800d192 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f000 f8d3 	bl	800d324 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2220      	movs	r2, #32
 800d182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2200      	movs	r2, #0
 800d18a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800d18e:	2303      	movs	r3, #3
 800d190:	e00f      	b.n	800d1b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	69da      	ldr	r2, [r3, #28]
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	4013      	ands	r3, r2
 800d19c:	68ba      	ldr	r2, [r7, #8]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	bf0c      	ite	eq
 800d1a2:	2301      	moveq	r3, #1
 800d1a4:	2300      	movne	r3, #0
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	79fb      	ldrb	r3, [r7, #7]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d0a6      	beq.n	800d0fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d1b0:	2300      	movs	r3, #0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
	...

0800d1bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b097      	sub	sp, #92	; 0x5c
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	68ba      	ldr	r2, [r7, #8]
 800d1ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	88fa      	ldrh	r2, [r7, #6]
 800d1d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	88fa      	ldrh	r2, [r7, #6]
 800d1dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1ee:	d10e      	bne.n	800d20e <UART_Start_Receive_IT+0x52>
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	691b      	ldr	r3, [r3, #16]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d105      	bne.n	800d204 <UART_Start_Receive_IT+0x48>
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d1fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d202:	e01a      	b.n	800d23a <UART_Start_Receive_IT+0x7e>
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	22ff      	movs	r2, #255	; 0xff
 800d208:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d20c:	e015      	b.n	800d23a <UART_Start_Receive_IT+0x7e>
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d10d      	bne.n	800d232 <UART_Start_Receive_IT+0x76>
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	691b      	ldr	r3, [r3, #16]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d104      	bne.n	800d228 <UART_Start_Receive_IT+0x6c>
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	22ff      	movs	r2, #255	; 0xff
 800d222:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d226:	e008      	b.n	800d23a <UART_Start_Receive_IT+0x7e>
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	227f      	movs	r2, #127	; 0x7f
 800d22c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d230:	e003      	b.n	800d23a <UART_Start_Receive_IT+0x7e>
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2200      	movs	r2, #0
 800d236:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2200      	movs	r2, #0
 800d23e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2222      	movs	r2, #34	; 0x22
 800d246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	3308      	adds	r3, #8
 800d250:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d254:	e853 3f00 	ldrex	r3, [r3]
 800d258:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25c:	f043 0301 	orr.w	r3, r3, #1
 800d260:	657b      	str	r3, [r7, #84]	; 0x54
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	3308      	adds	r3, #8
 800d268:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d26a:	64ba      	str	r2, [r7, #72]	; 0x48
 800d26c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d26e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d272:	e841 2300 	strex	r3, r2, [r1]
 800d276:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1e5      	bne.n	800d24a <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d286:	d107      	bne.n	800d298 <UART_Start_Receive_IT+0xdc>
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	691b      	ldr	r3, [r3, #16]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d103      	bne.n	800d298 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	4a22      	ldr	r2, [pc, #136]	; (800d31c <UART_Start_Receive_IT+0x160>)
 800d294:	669a      	str	r2, [r3, #104]	; 0x68
 800d296:	e002      	b.n	800d29e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	4a21      	ldr	r2, [pc, #132]	; (800d320 <UART_Start_Receive_IT+0x164>)
 800d29c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	691b      	ldr	r3, [r3, #16]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d019      	beq.n	800d2da <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ae:	e853 3f00 	ldrex	r3, [r3]
 800d2b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d2ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2c4:	637b      	str	r3, [r7, #52]	; 0x34
 800d2c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2cc:	e841 2300 	strex	r3, r2, [r1]
 800d2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1e6      	bne.n	800d2a6 <UART_Start_Receive_IT+0xea>
 800d2d8:	e018      	b.n	800d30c <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	e853 3f00 	ldrex	r3, [r3]
 800d2e6:	613b      	str	r3, [r7, #16]
   return(result);
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	f043 0320 	orr.w	r3, r3, #32
 800d2ee:	653b      	str	r3, [r7, #80]	; 0x50
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2f8:	623b      	str	r3, [r7, #32]
 800d2fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2fc:	69f9      	ldr	r1, [r7, #28]
 800d2fe:	6a3a      	ldr	r2, [r7, #32]
 800d300:	e841 2300 	strex	r3, r2, [r1]
 800d304:	61bb      	str	r3, [r7, #24]
   return(result);
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d1e6      	bne.n	800d2da <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800d30c:	2300      	movs	r3, #0
}
 800d30e:	4618      	mov	r0, r3
 800d310:	375c      	adds	r7, #92	; 0x5c
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	0800d615 	.word	0x0800d615
 800d320:	0800d46d 	.word	0x0800d46d

0800d324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d324:	b480      	push	{r7}
 800d326:	b095      	sub	sp, #84	; 0x54
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d334:	e853 3f00 	ldrex	r3, [r3]
 800d338:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d340:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	461a      	mov	r2, r3
 800d348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d34a:	643b      	str	r3, [r7, #64]	; 0x40
 800d34c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d352:	e841 2300 	strex	r3, r2, [r1]
 800d356:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d1e6      	bne.n	800d32c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	3308      	adds	r3, #8
 800d364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d366:	6a3b      	ldr	r3, [r7, #32]
 800d368:	e853 3f00 	ldrex	r3, [r3]
 800d36c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	f023 0301 	bic.w	r3, r3, #1
 800d374:	64bb      	str	r3, [r7, #72]	; 0x48
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	3308      	adds	r3, #8
 800d37c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d37e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d380:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d386:	e841 2300 	strex	r3, r2, [r1]
 800d38a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d1e5      	bne.n	800d35e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d396:	2b01      	cmp	r3, #1
 800d398:	d118      	bne.n	800d3cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	e853 3f00 	ldrex	r3, [r3]
 800d3a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	f023 0310 	bic.w	r3, r3, #16
 800d3ae:	647b      	str	r3, [r7, #68]	; 0x44
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3b8:	61bb      	str	r3, [r7, #24]
 800d3ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3bc:	6979      	ldr	r1, [r7, #20]
 800d3be:	69ba      	ldr	r2, [r7, #24]
 800d3c0:	e841 2300 	strex	r3, r2, [r1]
 800d3c4:	613b      	str	r3, [r7, #16]
   return(result);
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d1e6      	bne.n	800d39a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2220      	movs	r2, #32
 800d3d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	669a      	str	r2, [r3, #104]	; 0x68
}
 800d3e0:	bf00      	nop
 800d3e2:	3754      	adds	r7, #84	; 0x54
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2200      	movs	r2, #0
 800d406:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d40a:	68f8      	ldr	r0, [r7, #12]
 800d40c:	f7ff fb3a 	bl	800ca84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d410:	bf00      	nop
 800d412:	3710      	adds	r7, #16
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b088      	sub	sp, #32
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	e853 3f00 	ldrex	r3, [r3]
 800d42c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d434:	61fb      	str	r3, [r7, #28]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	461a      	mov	r2, r3
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	61bb      	str	r3, [r7, #24]
 800d440:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d442:	6979      	ldr	r1, [r7, #20]
 800d444:	69ba      	ldr	r2, [r7, #24]
 800d446:	e841 2300 	strex	r3, r2, [r1]
 800d44a:	613b      	str	r3, [r7, #16]
   return(result);
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1e6      	bne.n	800d420 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2220      	movs	r2, #32
 800d456:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f7ff fb06 	bl	800ca70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d464:	bf00      	nop
 800d466:	3720      	adds	r7, #32
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}

0800d46c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b09c      	sub	sp, #112	; 0x70
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d47a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d484:	2b22      	cmp	r3, #34	; 0x22
 800d486:	f040 80b9 	bne.w	800d5fc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d490:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d494:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d498:	b2d9      	uxtb	r1, r3
 800d49a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d49e:	b2da      	uxtb	r2, r3
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4a4:	400a      	ands	r2, r1
 800d4a6:	b2d2      	uxtb	r2, r2
 800d4a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4ae:	1c5a      	adds	r2, r3, #1
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	3b01      	subs	r3, #1
 800d4be:	b29a      	uxth	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d4cc:	b29b      	uxth	r3, r3
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f040 809c 	bne.w	800d60c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4dc:	e853 3f00 	ldrex	r3, [r3]
 800d4e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d4e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d4e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d4e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d4f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800d4f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d4f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d4fa:	e841 2300 	strex	r3, r2, [r1]
 800d4fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d502:	2b00      	cmp	r3, #0
 800d504:	d1e6      	bne.n	800d4d4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	3308      	adds	r3, #8
 800d50c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d510:	e853 3f00 	ldrex	r3, [r3]
 800d514:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d518:	f023 0301 	bic.w	r3, r3, #1
 800d51c:	667b      	str	r3, [r7, #100]	; 0x64
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	3308      	adds	r3, #8
 800d524:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d526:	647a      	str	r2, [r7, #68]	; 0x44
 800d528:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d52a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d52c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d52e:	e841 2300 	strex	r3, r2, [r1]
 800d532:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d536:	2b00      	cmp	r3, #0
 800d538:	d1e5      	bne.n	800d506 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2220      	movs	r2, #32
 800d53e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2200      	movs	r2, #0
 800d54c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d018      	beq.n	800d58e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d564:	e853 3f00 	ldrex	r3, [r3]
 800d568:	623b      	str	r3, [r7, #32]
   return(result);
 800d56a:	6a3b      	ldr	r3, [r7, #32]
 800d56c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d570:	663b      	str	r3, [r7, #96]	; 0x60
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	461a      	mov	r2, r3
 800d578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d57a:	633b      	str	r3, [r7, #48]	; 0x30
 800d57c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d57e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d582:	e841 2300 	strex	r3, r2, [r1]
 800d586:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d1e6      	bne.n	800d55c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d592:	2b01      	cmp	r3, #1
 800d594:	d12e      	bne.n	800d5f4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2200      	movs	r2, #0
 800d59a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	e853 3f00 	ldrex	r3, [r3]
 800d5a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f023 0310 	bic.w	r3, r3, #16
 800d5b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5ba:	61fb      	str	r3, [r7, #28]
 800d5bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5be:	69b9      	ldr	r1, [r7, #24]
 800d5c0:	69fa      	ldr	r2, [r7, #28]
 800d5c2:	e841 2300 	strex	r3, r2, [r1]
 800d5c6:	617b      	str	r3, [r7, #20]
   return(result);
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d1e6      	bne.n	800d59c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	69db      	ldr	r3, [r3, #28]
 800d5d4:	f003 0310 	and.w	r3, r3, #16
 800d5d8:	2b10      	cmp	r3, #16
 800d5da:	d103      	bne.n	800d5e4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2210      	movs	r2, #16
 800d5e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f7ff fa53 	bl	800ca98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d5f2:	e00b      	b.n	800d60c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f7f3 ff3f 	bl	8001478 <HAL_UART_RxCpltCallback>
}
 800d5fa:	e007      	b.n	800d60c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	699a      	ldr	r2, [r3, #24]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f042 0208 	orr.w	r2, r2, #8
 800d60a:	619a      	str	r2, [r3, #24]
}
 800d60c:	bf00      	nop
 800d60e:	3770      	adds	r7, #112	; 0x70
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b09c      	sub	sp, #112	; 0x70
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d622:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d62c:	2b22      	cmp	r3, #34	; 0x22
 800d62e:	f040 80b9 	bne.w	800d7a4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d638:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d640:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d642:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800d646:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d64a:	4013      	ands	r3, r2
 800d64c:	b29a      	uxth	r2, r3
 800d64e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d650:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d656:	1c9a      	adds	r2, r3, #2
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d662:	b29b      	uxth	r3, r3
 800d664:	3b01      	subs	r3, #1
 800d666:	b29a      	uxth	r2, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d674:	b29b      	uxth	r3, r3
 800d676:	2b00      	cmp	r3, #0
 800d678:	f040 809c 	bne.w	800d7b4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d684:	e853 3f00 	ldrex	r3, [r3]
 800d688:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d68a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d68c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d690:	667b      	str	r3, [r7, #100]	; 0x64
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	461a      	mov	r2, r3
 800d698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d69a:	657b      	str	r3, [r7, #84]	; 0x54
 800d69c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d69e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d6a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6a2:	e841 2300 	strex	r3, r2, [r1]
 800d6a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d6a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d1e6      	bne.n	800d67c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	3308      	adds	r3, #8
 800d6b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6b8:	e853 3f00 	ldrex	r3, [r3]
 800d6bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c0:	f023 0301 	bic.w	r3, r3, #1
 800d6c4:	663b      	str	r3, [r7, #96]	; 0x60
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	3308      	adds	r3, #8
 800d6cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d6ce:	643a      	str	r2, [r7, #64]	; 0x40
 800d6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d6d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d6d6:	e841 2300 	strex	r3, r2, [r1]
 800d6da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1e5      	bne.n	800d6ae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2220      	movs	r2, #32
 800d6e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d700:	2b00      	cmp	r3, #0
 800d702:	d018      	beq.n	800d736 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70a:	6a3b      	ldr	r3, [r7, #32]
 800d70c:	e853 3f00 	ldrex	r3, [r3]
 800d710:	61fb      	str	r3, [r7, #28]
   return(result);
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	461a      	mov	r2, r3
 800d720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d722:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d724:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d726:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d72a:	e841 2300 	strex	r3, r2, [r1]
 800d72e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d732:	2b00      	cmp	r3, #0
 800d734:	d1e6      	bne.n	800d704 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d12e      	bne.n	800d79c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2200      	movs	r2, #0
 800d742:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	e853 3f00 	ldrex	r3, [r3]
 800d750:	60bb      	str	r3, [r7, #8]
   return(result);
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	f023 0310 	bic.w	r3, r3, #16
 800d758:	65bb      	str	r3, [r7, #88]	; 0x58
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	461a      	mov	r2, r3
 800d760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d762:	61bb      	str	r3, [r7, #24]
 800d764:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d766:	6979      	ldr	r1, [r7, #20]
 800d768:	69ba      	ldr	r2, [r7, #24]
 800d76a:	e841 2300 	strex	r3, r2, [r1]
 800d76e:	613b      	str	r3, [r7, #16]
   return(result);
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d1e6      	bne.n	800d744 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	69db      	ldr	r3, [r3, #28]
 800d77c:	f003 0310 	and.w	r3, r3, #16
 800d780:	2b10      	cmp	r3, #16
 800d782:	d103      	bne.n	800d78c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2210      	movs	r2, #16
 800d78a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d792:	4619      	mov	r1, r3
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f7ff f97f 	bl	800ca98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d79a:	e00b      	b.n	800d7b4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f7f3 fe6b 	bl	8001478 <HAL_UART_RxCpltCallback>
}
 800d7a2:	e007      	b.n	800d7b4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	699a      	ldr	r2, [r3, #24]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f042 0208 	orr.w	r2, r2, #8
 800d7b2:	619a      	str	r2, [r3, #24]
}
 800d7b4:	bf00      	nop
 800d7b6:	3770      	adds	r7, #112	; 0x70
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b083      	sub	sp, #12
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d7c4:	bf00      	nop
 800d7c6:	370c      	adds	r7, #12
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr

0800d7d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b085      	sub	sp, #20
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d7d8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800d7dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d7e4:	b29a      	uxth	r2, r3
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	43db      	mvns	r3, r3
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	4013      	ands	r3, r2
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3714      	adds	r7, #20
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr

0800d806 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d806:	b084      	sub	sp, #16
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	f107 0014 	add.w	r0, r7, #20
 800d814:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2201      	movs	r2, #1
 800d81c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2200      	movs	r2, #0
 800d824:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2200      	movs	r2, #0
 800d834:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d838:	2300      	movs	r3, #0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	370c      	adds	r7, #12
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	b004      	add	sp, #16
 800d846:	4770      	bx	lr

0800d848 <__errno>:
 800d848:	4b01      	ldr	r3, [pc, #4]	; (800d850 <__errno+0x8>)
 800d84a:	6818      	ldr	r0, [r3, #0]
 800d84c:	4770      	bx	lr
 800d84e:	bf00      	nop
 800d850:	20000070 	.word	0x20000070

0800d854 <__libc_init_array>:
 800d854:	b570      	push	{r4, r5, r6, lr}
 800d856:	4d0d      	ldr	r5, [pc, #52]	; (800d88c <__libc_init_array+0x38>)
 800d858:	4c0d      	ldr	r4, [pc, #52]	; (800d890 <__libc_init_array+0x3c>)
 800d85a:	1b64      	subs	r4, r4, r5
 800d85c:	10a4      	asrs	r4, r4, #2
 800d85e:	2600      	movs	r6, #0
 800d860:	42a6      	cmp	r6, r4
 800d862:	d109      	bne.n	800d878 <__libc_init_array+0x24>
 800d864:	4d0b      	ldr	r5, [pc, #44]	; (800d894 <__libc_init_array+0x40>)
 800d866:	4c0c      	ldr	r4, [pc, #48]	; (800d898 <__libc_init_array+0x44>)
 800d868:	f000 fca0 	bl	800e1ac <_init>
 800d86c:	1b64      	subs	r4, r4, r5
 800d86e:	10a4      	asrs	r4, r4, #2
 800d870:	2600      	movs	r6, #0
 800d872:	42a6      	cmp	r6, r4
 800d874:	d105      	bne.n	800d882 <__libc_init_array+0x2e>
 800d876:	bd70      	pop	{r4, r5, r6, pc}
 800d878:	f855 3b04 	ldr.w	r3, [r5], #4
 800d87c:	4798      	blx	r3
 800d87e:	3601      	adds	r6, #1
 800d880:	e7ee      	b.n	800d860 <__libc_init_array+0xc>
 800d882:	f855 3b04 	ldr.w	r3, [r5], #4
 800d886:	4798      	blx	r3
 800d888:	3601      	adds	r6, #1
 800d88a:	e7f2      	b.n	800d872 <__libc_init_array+0x1e>
 800d88c:	0800ec8c 	.word	0x0800ec8c
 800d890:	0800ec8c 	.word	0x0800ec8c
 800d894:	0800ec8c 	.word	0x0800ec8c
 800d898:	0800ec90 	.word	0x0800ec90

0800d89c <memset>:
 800d89c:	4402      	add	r2, r0
 800d89e:	4603      	mov	r3, r0
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d100      	bne.n	800d8a6 <memset+0xa>
 800d8a4:	4770      	bx	lr
 800d8a6:	f803 1b01 	strb.w	r1, [r3], #1
 800d8aa:	e7f9      	b.n	800d8a0 <memset+0x4>

0800d8ac <siprintf>:
 800d8ac:	b40e      	push	{r1, r2, r3}
 800d8ae:	b500      	push	{lr}
 800d8b0:	b09c      	sub	sp, #112	; 0x70
 800d8b2:	ab1d      	add	r3, sp, #116	; 0x74
 800d8b4:	9002      	str	r0, [sp, #8]
 800d8b6:	9006      	str	r0, [sp, #24]
 800d8b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d8bc:	4809      	ldr	r0, [pc, #36]	; (800d8e4 <siprintf+0x38>)
 800d8be:	9107      	str	r1, [sp, #28]
 800d8c0:	9104      	str	r1, [sp, #16]
 800d8c2:	4909      	ldr	r1, [pc, #36]	; (800d8e8 <siprintf+0x3c>)
 800d8c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8c8:	9105      	str	r1, [sp, #20]
 800d8ca:	6800      	ldr	r0, [r0, #0]
 800d8cc:	9301      	str	r3, [sp, #4]
 800d8ce:	a902      	add	r1, sp, #8
 800d8d0:	f000 f87a 	bl	800d9c8 <_svfiprintf_r>
 800d8d4:	9b02      	ldr	r3, [sp, #8]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	701a      	strb	r2, [r3, #0]
 800d8da:	b01c      	add	sp, #112	; 0x70
 800d8dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8e0:	b003      	add	sp, #12
 800d8e2:	4770      	bx	lr
 800d8e4:	20000070 	.word	0x20000070
 800d8e8:	ffff0208 	.word	0xffff0208

0800d8ec <strncpy>:
 800d8ec:	b510      	push	{r4, lr}
 800d8ee:	3901      	subs	r1, #1
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	b132      	cbz	r2, 800d902 <strncpy+0x16>
 800d8f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d8f8:	f803 4b01 	strb.w	r4, [r3], #1
 800d8fc:	3a01      	subs	r2, #1
 800d8fe:	2c00      	cmp	r4, #0
 800d900:	d1f7      	bne.n	800d8f2 <strncpy+0x6>
 800d902:	441a      	add	r2, r3
 800d904:	2100      	movs	r1, #0
 800d906:	4293      	cmp	r3, r2
 800d908:	d100      	bne.n	800d90c <strncpy+0x20>
 800d90a:	bd10      	pop	{r4, pc}
 800d90c:	f803 1b01 	strb.w	r1, [r3], #1
 800d910:	e7f9      	b.n	800d906 <strncpy+0x1a>

0800d912 <__ssputs_r>:
 800d912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d916:	688e      	ldr	r6, [r1, #8]
 800d918:	429e      	cmp	r6, r3
 800d91a:	4682      	mov	sl, r0
 800d91c:	460c      	mov	r4, r1
 800d91e:	4690      	mov	r8, r2
 800d920:	461f      	mov	r7, r3
 800d922:	d838      	bhi.n	800d996 <__ssputs_r+0x84>
 800d924:	898a      	ldrh	r2, [r1, #12]
 800d926:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d92a:	d032      	beq.n	800d992 <__ssputs_r+0x80>
 800d92c:	6825      	ldr	r5, [r4, #0]
 800d92e:	6909      	ldr	r1, [r1, #16]
 800d930:	eba5 0901 	sub.w	r9, r5, r1
 800d934:	6965      	ldr	r5, [r4, #20]
 800d936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d93a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d93e:	3301      	adds	r3, #1
 800d940:	444b      	add	r3, r9
 800d942:	106d      	asrs	r5, r5, #1
 800d944:	429d      	cmp	r5, r3
 800d946:	bf38      	it	cc
 800d948:	461d      	movcc	r5, r3
 800d94a:	0553      	lsls	r3, r2, #21
 800d94c:	d531      	bpl.n	800d9b2 <__ssputs_r+0xa0>
 800d94e:	4629      	mov	r1, r5
 800d950:	f000 fb62 	bl	800e018 <_malloc_r>
 800d954:	4606      	mov	r6, r0
 800d956:	b950      	cbnz	r0, 800d96e <__ssputs_r+0x5c>
 800d958:	230c      	movs	r3, #12
 800d95a:	f8ca 3000 	str.w	r3, [sl]
 800d95e:	89a3      	ldrh	r3, [r4, #12]
 800d960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d964:	81a3      	strh	r3, [r4, #12]
 800d966:	f04f 30ff 	mov.w	r0, #4294967295
 800d96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d96e:	6921      	ldr	r1, [r4, #16]
 800d970:	464a      	mov	r2, r9
 800d972:	f000 fabd 	bl	800def0 <memcpy>
 800d976:	89a3      	ldrh	r3, [r4, #12]
 800d978:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d97c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d980:	81a3      	strh	r3, [r4, #12]
 800d982:	6126      	str	r6, [r4, #16]
 800d984:	6165      	str	r5, [r4, #20]
 800d986:	444e      	add	r6, r9
 800d988:	eba5 0509 	sub.w	r5, r5, r9
 800d98c:	6026      	str	r6, [r4, #0]
 800d98e:	60a5      	str	r5, [r4, #8]
 800d990:	463e      	mov	r6, r7
 800d992:	42be      	cmp	r6, r7
 800d994:	d900      	bls.n	800d998 <__ssputs_r+0x86>
 800d996:	463e      	mov	r6, r7
 800d998:	6820      	ldr	r0, [r4, #0]
 800d99a:	4632      	mov	r2, r6
 800d99c:	4641      	mov	r1, r8
 800d99e:	f000 fab5 	bl	800df0c <memmove>
 800d9a2:	68a3      	ldr	r3, [r4, #8]
 800d9a4:	1b9b      	subs	r3, r3, r6
 800d9a6:	60a3      	str	r3, [r4, #8]
 800d9a8:	6823      	ldr	r3, [r4, #0]
 800d9aa:	4433      	add	r3, r6
 800d9ac:	6023      	str	r3, [r4, #0]
 800d9ae:	2000      	movs	r0, #0
 800d9b0:	e7db      	b.n	800d96a <__ssputs_r+0x58>
 800d9b2:	462a      	mov	r2, r5
 800d9b4:	f000 fba4 	bl	800e100 <_realloc_r>
 800d9b8:	4606      	mov	r6, r0
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	d1e1      	bne.n	800d982 <__ssputs_r+0x70>
 800d9be:	6921      	ldr	r1, [r4, #16]
 800d9c0:	4650      	mov	r0, sl
 800d9c2:	f000 fabd 	bl	800df40 <_free_r>
 800d9c6:	e7c7      	b.n	800d958 <__ssputs_r+0x46>

0800d9c8 <_svfiprintf_r>:
 800d9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9cc:	4698      	mov	r8, r3
 800d9ce:	898b      	ldrh	r3, [r1, #12]
 800d9d0:	061b      	lsls	r3, r3, #24
 800d9d2:	b09d      	sub	sp, #116	; 0x74
 800d9d4:	4607      	mov	r7, r0
 800d9d6:	460d      	mov	r5, r1
 800d9d8:	4614      	mov	r4, r2
 800d9da:	d50e      	bpl.n	800d9fa <_svfiprintf_r+0x32>
 800d9dc:	690b      	ldr	r3, [r1, #16]
 800d9de:	b963      	cbnz	r3, 800d9fa <_svfiprintf_r+0x32>
 800d9e0:	2140      	movs	r1, #64	; 0x40
 800d9e2:	f000 fb19 	bl	800e018 <_malloc_r>
 800d9e6:	6028      	str	r0, [r5, #0]
 800d9e8:	6128      	str	r0, [r5, #16]
 800d9ea:	b920      	cbnz	r0, 800d9f6 <_svfiprintf_r+0x2e>
 800d9ec:	230c      	movs	r3, #12
 800d9ee:	603b      	str	r3, [r7, #0]
 800d9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f4:	e0d1      	b.n	800db9a <_svfiprintf_r+0x1d2>
 800d9f6:	2340      	movs	r3, #64	; 0x40
 800d9f8:	616b      	str	r3, [r5, #20]
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d9fe:	2320      	movs	r3, #32
 800da00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da04:	f8cd 800c 	str.w	r8, [sp, #12]
 800da08:	2330      	movs	r3, #48	; 0x30
 800da0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dbb4 <_svfiprintf_r+0x1ec>
 800da0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da12:	f04f 0901 	mov.w	r9, #1
 800da16:	4623      	mov	r3, r4
 800da18:	469a      	mov	sl, r3
 800da1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da1e:	b10a      	cbz	r2, 800da24 <_svfiprintf_r+0x5c>
 800da20:	2a25      	cmp	r2, #37	; 0x25
 800da22:	d1f9      	bne.n	800da18 <_svfiprintf_r+0x50>
 800da24:	ebba 0b04 	subs.w	fp, sl, r4
 800da28:	d00b      	beq.n	800da42 <_svfiprintf_r+0x7a>
 800da2a:	465b      	mov	r3, fp
 800da2c:	4622      	mov	r2, r4
 800da2e:	4629      	mov	r1, r5
 800da30:	4638      	mov	r0, r7
 800da32:	f7ff ff6e 	bl	800d912 <__ssputs_r>
 800da36:	3001      	adds	r0, #1
 800da38:	f000 80aa 	beq.w	800db90 <_svfiprintf_r+0x1c8>
 800da3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da3e:	445a      	add	r2, fp
 800da40:	9209      	str	r2, [sp, #36]	; 0x24
 800da42:	f89a 3000 	ldrb.w	r3, [sl]
 800da46:	2b00      	cmp	r3, #0
 800da48:	f000 80a2 	beq.w	800db90 <_svfiprintf_r+0x1c8>
 800da4c:	2300      	movs	r3, #0
 800da4e:	f04f 32ff 	mov.w	r2, #4294967295
 800da52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da56:	f10a 0a01 	add.w	sl, sl, #1
 800da5a:	9304      	str	r3, [sp, #16]
 800da5c:	9307      	str	r3, [sp, #28]
 800da5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da62:	931a      	str	r3, [sp, #104]	; 0x68
 800da64:	4654      	mov	r4, sl
 800da66:	2205      	movs	r2, #5
 800da68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da6c:	4851      	ldr	r0, [pc, #324]	; (800dbb4 <_svfiprintf_r+0x1ec>)
 800da6e:	f7f2 fbb7 	bl	80001e0 <memchr>
 800da72:	9a04      	ldr	r2, [sp, #16]
 800da74:	b9d8      	cbnz	r0, 800daae <_svfiprintf_r+0xe6>
 800da76:	06d0      	lsls	r0, r2, #27
 800da78:	bf44      	itt	mi
 800da7a:	2320      	movmi	r3, #32
 800da7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da80:	0711      	lsls	r1, r2, #28
 800da82:	bf44      	itt	mi
 800da84:	232b      	movmi	r3, #43	; 0x2b
 800da86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da8a:	f89a 3000 	ldrb.w	r3, [sl]
 800da8e:	2b2a      	cmp	r3, #42	; 0x2a
 800da90:	d015      	beq.n	800dabe <_svfiprintf_r+0xf6>
 800da92:	9a07      	ldr	r2, [sp, #28]
 800da94:	4654      	mov	r4, sl
 800da96:	2000      	movs	r0, #0
 800da98:	f04f 0c0a 	mov.w	ip, #10
 800da9c:	4621      	mov	r1, r4
 800da9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800daa2:	3b30      	subs	r3, #48	; 0x30
 800daa4:	2b09      	cmp	r3, #9
 800daa6:	d94e      	bls.n	800db46 <_svfiprintf_r+0x17e>
 800daa8:	b1b0      	cbz	r0, 800dad8 <_svfiprintf_r+0x110>
 800daaa:	9207      	str	r2, [sp, #28]
 800daac:	e014      	b.n	800dad8 <_svfiprintf_r+0x110>
 800daae:	eba0 0308 	sub.w	r3, r0, r8
 800dab2:	fa09 f303 	lsl.w	r3, r9, r3
 800dab6:	4313      	orrs	r3, r2
 800dab8:	9304      	str	r3, [sp, #16]
 800daba:	46a2      	mov	sl, r4
 800dabc:	e7d2      	b.n	800da64 <_svfiprintf_r+0x9c>
 800dabe:	9b03      	ldr	r3, [sp, #12]
 800dac0:	1d19      	adds	r1, r3, #4
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	9103      	str	r1, [sp, #12]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	bfbb      	ittet	lt
 800daca:	425b      	neglt	r3, r3
 800dacc:	f042 0202 	orrlt.w	r2, r2, #2
 800dad0:	9307      	strge	r3, [sp, #28]
 800dad2:	9307      	strlt	r3, [sp, #28]
 800dad4:	bfb8      	it	lt
 800dad6:	9204      	strlt	r2, [sp, #16]
 800dad8:	7823      	ldrb	r3, [r4, #0]
 800dada:	2b2e      	cmp	r3, #46	; 0x2e
 800dadc:	d10c      	bne.n	800daf8 <_svfiprintf_r+0x130>
 800dade:	7863      	ldrb	r3, [r4, #1]
 800dae0:	2b2a      	cmp	r3, #42	; 0x2a
 800dae2:	d135      	bne.n	800db50 <_svfiprintf_r+0x188>
 800dae4:	9b03      	ldr	r3, [sp, #12]
 800dae6:	1d1a      	adds	r2, r3, #4
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	9203      	str	r2, [sp, #12]
 800daec:	2b00      	cmp	r3, #0
 800daee:	bfb8      	it	lt
 800daf0:	f04f 33ff 	movlt.w	r3, #4294967295
 800daf4:	3402      	adds	r4, #2
 800daf6:	9305      	str	r3, [sp, #20]
 800daf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dbc4 <_svfiprintf_r+0x1fc>
 800dafc:	7821      	ldrb	r1, [r4, #0]
 800dafe:	2203      	movs	r2, #3
 800db00:	4650      	mov	r0, sl
 800db02:	f7f2 fb6d 	bl	80001e0 <memchr>
 800db06:	b140      	cbz	r0, 800db1a <_svfiprintf_r+0x152>
 800db08:	2340      	movs	r3, #64	; 0x40
 800db0a:	eba0 000a 	sub.w	r0, r0, sl
 800db0e:	fa03 f000 	lsl.w	r0, r3, r0
 800db12:	9b04      	ldr	r3, [sp, #16]
 800db14:	4303      	orrs	r3, r0
 800db16:	3401      	adds	r4, #1
 800db18:	9304      	str	r3, [sp, #16]
 800db1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db1e:	4826      	ldr	r0, [pc, #152]	; (800dbb8 <_svfiprintf_r+0x1f0>)
 800db20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db24:	2206      	movs	r2, #6
 800db26:	f7f2 fb5b 	bl	80001e0 <memchr>
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d038      	beq.n	800dba0 <_svfiprintf_r+0x1d8>
 800db2e:	4b23      	ldr	r3, [pc, #140]	; (800dbbc <_svfiprintf_r+0x1f4>)
 800db30:	bb1b      	cbnz	r3, 800db7a <_svfiprintf_r+0x1b2>
 800db32:	9b03      	ldr	r3, [sp, #12]
 800db34:	3307      	adds	r3, #7
 800db36:	f023 0307 	bic.w	r3, r3, #7
 800db3a:	3308      	adds	r3, #8
 800db3c:	9303      	str	r3, [sp, #12]
 800db3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db40:	4433      	add	r3, r6
 800db42:	9309      	str	r3, [sp, #36]	; 0x24
 800db44:	e767      	b.n	800da16 <_svfiprintf_r+0x4e>
 800db46:	fb0c 3202 	mla	r2, ip, r2, r3
 800db4a:	460c      	mov	r4, r1
 800db4c:	2001      	movs	r0, #1
 800db4e:	e7a5      	b.n	800da9c <_svfiprintf_r+0xd4>
 800db50:	2300      	movs	r3, #0
 800db52:	3401      	adds	r4, #1
 800db54:	9305      	str	r3, [sp, #20]
 800db56:	4619      	mov	r1, r3
 800db58:	f04f 0c0a 	mov.w	ip, #10
 800db5c:	4620      	mov	r0, r4
 800db5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db62:	3a30      	subs	r2, #48	; 0x30
 800db64:	2a09      	cmp	r2, #9
 800db66:	d903      	bls.n	800db70 <_svfiprintf_r+0x1a8>
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d0c5      	beq.n	800daf8 <_svfiprintf_r+0x130>
 800db6c:	9105      	str	r1, [sp, #20]
 800db6e:	e7c3      	b.n	800daf8 <_svfiprintf_r+0x130>
 800db70:	fb0c 2101 	mla	r1, ip, r1, r2
 800db74:	4604      	mov	r4, r0
 800db76:	2301      	movs	r3, #1
 800db78:	e7f0      	b.n	800db5c <_svfiprintf_r+0x194>
 800db7a:	ab03      	add	r3, sp, #12
 800db7c:	9300      	str	r3, [sp, #0]
 800db7e:	462a      	mov	r2, r5
 800db80:	4b0f      	ldr	r3, [pc, #60]	; (800dbc0 <_svfiprintf_r+0x1f8>)
 800db82:	a904      	add	r1, sp, #16
 800db84:	4638      	mov	r0, r7
 800db86:	f3af 8000 	nop.w
 800db8a:	1c42      	adds	r2, r0, #1
 800db8c:	4606      	mov	r6, r0
 800db8e:	d1d6      	bne.n	800db3e <_svfiprintf_r+0x176>
 800db90:	89ab      	ldrh	r3, [r5, #12]
 800db92:	065b      	lsls	r3, r3, #25
 800db94:	f53f af2c 	bmi.w	800d9f0 <_svfiprintf_r+0x28>
 800db98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db9a:	b01d      	add	sp, #116	; 0x74
 800db9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dba0:	ab03      	add	r3, sp, #12
 800dba2:	9300      	str	r3, [sp, #0]
 800dba4:	462a      	mov	r2, r5
 800dba6:	4b06      	ldr	r3, [pc, #24]	; (800dbc0 <_svfiprintf_r+0x1f8>)
 800dba8:	a904      	add	r1, sp, #16
 800dbaa:	4638      	mov	r0, r7
 800dbac:	f000 f87a 	bl	800dca4 <_printf_i>
 800dbb0:	e7eb      	b.n	800db8a <_svfiprintf_r+0x1c2>
 800dbb2:	bf00      	nop
 800dbb4:	0800ec58 	.word	0x0800ec58
 800dbb8:	0800ec62 	.word	0x0800ec62
 800dbbc:	00000000 	.word	0x00000000
 800dbc0:	0800d913 	.word	0x0800d913
 800dbc4:	0800ec5e 	.word	0x0800ec5e

0800dbc8 <_printf_common>:
 800dbc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbcc:	4616      	mov	r6, r2
 800dbce:	4699      	mov	r9, r3
 800dbd0:	688a      	ldr	r2, [r1, #8]
 800dbd2:	690b      	ldr	r3, [r1, #16]
 800dbd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	bfb8      	it	lt
 800dbdc:	4613      	movlt	r3, r2
 800dbde:	6033      	str	r3, [r6, #0]
 800dbe0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dbe4:	4607      	mov	r7, r0
 800dbe6:	460c      	mov	r4, r1
 800dbe8:	b10a      	cbz	r2, 800dbee <_printf_common+0x26>
 800dbea:	3301      	adds	r3, #1
 800dbec:	6033      	str	r3, [r6, #0]
 800dbee:	6823      	ldr	r3, [r4, #0]
 800dbf0:	0699      	lsls	r1, r3, #26
 800dbf2:	bf42      	ittt	mi
 800dbf4:	6833      	ldrmi	r3, [r6, #0]
 800dbf6:	3302      	addmi	r3, #2
 800dbf8:	6033      	strmi	r3, [r6, #0]
 800dbfa:	6825      	ldr	r5, [r4, #0]
 800dbfc:	f015 0506 	ands.w	r5, r5, #6
 800dc00:	d106      	bne.n	800dc10 <_printf_common+0x48>
 800dc02:	f104 0a19 	add.w	sl, r4, #25
 800dc06:	68e3      	ldr	r3, [r4, #12]
 800dc08:	6832      	ldr	r2, [r6, #0]
 800dc0a:	1a9b      	subs	r3, r3, r2
 800dc0c:	42ab      	cmp	r3, r5
 800dc0e:	dc26      	bgt.n	800dc5e <_printf_common+0x96>
 800dc10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dc14:	1e13      	subs	r3, r2, #0
 800dc16:	6822      	ldr	r2, [r4, #0]
 800dc18:	bf18      	it	ne
 800dc1a:	2301      	movne	r3, #1
 800dc1c:	0692      	lsls	r2, r2, #26
 800dc1e:	d42b      	bmi.n	800dc78 <_printf_common+0xb0>
 800dc20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc24:	4649      	mov	r1, r9
 800dc26:	4638      	mov	r0, r7
 800dc28:	47c0      	blx	r8
 800dc2a:	3001      	adds	r0, #1
 800dc2c:	d01e      	beq.n	800dc6c <_printf_common+0xa4>
 800dc2e:	6823      	ldr	r3, [r4, #0]
 800dc30:	68e5      	ldr	r5, [r4, #12]
 800dc32:	6832      	ldr	r2, [r6, #0]
 800dc34:	f003 0306 	and.w	r3, r3, #6
 800dc38:	2b04      	cmp	r3, #4
 800dc3a:	bf08      	it	eq
 800dc3c:	1aad      	subeq	r5, r5, r2
 800dc3e:	68a3      	ldr	r3, [r4, #8]
 800dc40:	6922      	ldr	r2, [r4, #16]
 800dc42:	bf0c      	ite	eq
 800dc44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc48:	2500      	movne	r5, #0
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	bfc4      	itt	gt
 800dc4e:	1a9b      	subgt	r3, r3, r2
 800dc50:	18ed      	addgt	r5, r5, r3
 800dc52:	2600      	movs	r6, #0
 800dc54:	341a      	adds	r4, #26
 800dc56:	42b5      	cmp	r5, r6
 800dc58:	d11a      	bne.n	800dc90 <_printf_common+0xc8>
 800dc5a:	2000      	movs	r0, #0
 800dc5c:	e008      	b.n	800dc70 <_printf_common+0xa8>
 800dc5e:	2301      	movs	r3, #1
 800dc60:	4652      	mov	r2, sl
 800dc62:	4649      	mov	r1, r9
 800dc64:	4638      	mov	r0, r7
 800dc66:	47c0      	blx	r8
 800dc68:	3001      	adds	r0, #1
 800dc6a:	d103      	bne.n	800dc74 <_printf_common+0xac>
 800dc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc74:	3501      	adds	r5, #1
 800dc76:	e7c6      	b.n	800dc06 <_printf_common+0x3e>
 800dc78:	18e1      	adds	r1, r4, r3
 800dc7a:	1c5a      	adds	r2, r3, #1
 800dc7c:	2030      	movs	r0, #48	; 0x30
 800dc7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc82:	4422      	add	r2, r4
 800dc84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc8c:	3302      	adds	r3, #2
 800dc8e:	e7c7      	b.n	800dc20 <_printf_common+0x58>
 800dc90:	2301      	movs	r3, #1
 800dc92:	4622      	mov	r2, r4
 800dc94:	4649      	mov	r1, r9
 800dc96:	4638      	mov	r0, r7
 800dc98:	47c0      	blx	r8
 800dc9a:	3001      	adds	r0, #1
 800dc9c:	d0e6      	beq.n	800dc6c <_printf_common+0xa4>
 800dc9e:	3601      	adds	r6, #1
 800dca0:	e7d9      	b.n	800dc56 <_printf_common+0x8e>
	...

0800dca4 <_printf_i>:
 800dca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dca8:	7e0f      	ldrb	r7, [r1, #24]
 800dcaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dcac:	2f78      	cmp	r7, #120	; 0x78
 800dcae:	4691      	mov	r9, r2
 800dcb0:	4680      	mov	r8, r0
 800dcb2:	460c      	mov	r4, r1
 800dcb4:	469a      	mov	sl, r3
 800dcb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dcba:	d807      	bhi.n	800dccc <_printf_i+0x28>
 800dcbc:	2f62      	cmp	r7, #98	; 0x62
 800dcbe:	d80a      	bhi.n	800dcd6 <_printf_i+0x32>
 800dcc0:	2f00      	cmp	r7, #0
 800dcc2:	f000 80d8 	beq.w	800de76 <_printf_i+0x1d2>
 800dcc6:	2f58      	cmp	r7, #88	; 0x58
 800dcc8:	f000 80a3 	beq.w	800de12 <_printf_i+0x16e>
 800dccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dcd4:	e03a      	b.n	800dd4c <_printf_i+0xa8>
 800dcd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dcda:	2b15      	cmp	r3, #21
 800dcdc:	d8f6      	bhi.n	800dccc <_printf_i+0x28>
 800dcde:	a101      	add	r1, pc, #4	; (adr r1, 800dce4 <_printf_i+0x40>)
 800dce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dce4:	0800dd3d 	.word	0x0800dd3d
 800dce8:	0800dd51 	.word	0x0800dd51
 800dcec:	0800dccd 	.word	0x0800dccd
 800dcf0:	0800dccd 	.word	0x0800dccd
 800dcf4:	0800dccd 	.word	0x0800dccd
 800dcf8:	0800dccd 	.word	0x0800dccd
 800dcfc:	0800dd51 	.word	0x0800dd51
 800dd00:	0800dccd 	.word	0x0800dccd
 800dd04:	0800dccd 	.word	0x0800dccd
 800dd08:	0800dccd 	.word	0x0800dccd
 800dd0c:	0800dccd 	.word	0x0800dccd
 800dd10:	0800de5d 	.word	0x0800de5d
 800dd14:	0800dd81 	.word	0x0800dd81
 800dd18:	0800de3f 	.word	0x0800de3f
 800dd1c:	0800dccd 	.word	0x0800dccd
 800dd20:	0800dccd 	.word	0x0800dccd
 800dd24:	0800de7f 	.word	0x0800de7f
 800dd28:	0800dccd 	.word	0x0800dccd
 800dd2c:	0800dd81 	.word	0x0800dd81
 800dd30:	0800dccd 	.word	0x0800dccd
 800dd34:	0800dccd 	.word	0x0800dccd
 800dd38:	0800de47 	.word	0x0800de47
 800dd3c:	682b      	ldr	r3, [r5, #0]
 800dd3e:	1d1a      	adds	r2, r3, #4
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	602a      	str	r2, [r5, #0]
 800dd44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	e0a3      	b.n	800de98 <_printf_i+0x1f4>
 800dd50:	6820      	ldr	r0, [r4, #0]
 800dd52:	6829      	ldr	r1, [r5, #0]
 800dd54:	0606      	lsls	r6, r0, #24
 800dd56:	f101 0304 	add.w	r3, r1, #4
 800dd5a:	d50a      	bpl.n	800dd72 <_printf_i+0xce>
 800dd5c:	680e      	ldr	r6, [r1, #0]
 800dd5e:	602b      	str	r3, [r5, #0]
 800dd60:	2e00      	cmp	r6, #0
 800dd62:	da03      	bge.n	800dd6c <_printf_i+0xc8>
 800dd64:	232d      	movs	r3, #45	; 0x2d
 800dd66:	4276      	negs	r6, r6
 800dd68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd6c:	485e      	ldr	r0, [pc, #376]	; (800dee8 <_printf_i+0x244>)
 800dd6e:	230a      	movs	r3, #10
 800dd70:	e019      	b.n	800dda6 <_printf_i+0x102>
 800dd72:	680e      	ldr	r6, [r1, #0]
 800dd74:	602b      	str	r3, [r5, #0]
 800dd76:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dd7a:	bf18      	it	ne
 800dd7c:	b236      	sxthne	r6, r6
 800dd7e:	e7ef      	b.n	800dd60 <_printf_i+0xbc>
 800dd80:	682b      	ldr	r3, [r5, #0]
 800dd82:	6820      	ldr	r0, [r4, #0]
 800dd84:	1d19      	adds	r1, r3, #4
 800dd86:	6029      	str	r1, [r5, #0]
 800dd88:	0601      	lsls	r1, r0, #24
 800dd8a:	d501      	bpl.n	800dd90 <_printf_i+0xec>
 800dd8c:	681e      	ldr	r6, [r3, #0]
 800dd8e:	e002      	b.n	800dd96 <_printf_i+0xf2>
 800dd90:	0646      	lsls	r6, r0, #25
 800dd92:	d5fb      	bpl.n	800dd8c <_printf_i+0xe8>
 800dd94:	881e      	ldrh	r6, [r3, #0]
 800dd96:	4854      	ldr	r0, [pc, #336]	; (800dee8 <_printf_i+0x244>)
 800dd98:	2f6f      	cmp	r7, #111	; 0x6f
 800dd9a:	bf0c      	ite	eq
 800dd9c:	2308      	moveq	r3, #8
 800dd9e:	230a      	movne	r3, #10
 800dda0:	2100      	movs	r1, #0
 800dda2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dda6:	6865      	ldr	r5, [r4, #4]
 800dda8:	60a5      	str	r5, [r4, #8]
 800ddaa:	2d00      	cmp	r5, #0
 800ddac:	bfa2      	ittt	ge
 800ddae:	6821      	ldrge	r1, [r4, #0]
 800ddb0:	f021 0104 	bicge.w	r1, r1, #4
 800ddb4:	6021      	strge	r1, [r4, #0]
 800ddb6:	b90e      	cbnz	r6, 800ddbc <_printf_i+0x118>
 800ddb8:	2d00      	cmp	r5, #0
 800ddba:	d04d      	beq.n	800de58 <_printf_i+0x1b4>
 800ddbc:	4615      	mov	r5, r2
 800ddbe:	fbb6 f1f3 	udiv	r1, r6, r3
 800ddc2:	fb03 6711 	mls	r7, r3, r1, r6
 800ddc6:	5dc7      	ldrb	r7, [r0, r7]
 800ddc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ddcc:	4637      	mov	r7, r6
 800ddce:	42bb      	cmp	r3, r7
 800ddd0:	460e      	mov	r6, r1
 800ddd2:	d9f4      	bls.n	800ddbe <_printf_i+0x11a>
 800ddd4:	2b08      	cmp	r3, #8
 800ddd6:	d10b      	bne.n	800ddf0 <_printf_i+0x14c>
 800ddd8:	6823      	ldr	r3, [r4, #0]
 800ddda:	07de      	lsls	r6, r3, #31
 800dddc:	d508      	bpl.n	800ddf0 <_printf_i+0x14c>
 800ddde:	6923      	ldr	r3, [r4, #16]
 800dde0:	6861      	ldr	r1, [r4, #4]
 800dde2:	4299      	cmp	r1, r3
 800dde4:	bfde      	ittt	le
 800dde6:	2330      	movle	r3, #48	; 0x30
 800dde8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ddec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ddf0:	1b52      	subs	r2, r2, r5
 800ddf2:	6122      	str	r2, [r4, #16]
 800ddf4:	f8cd a000 	str.w	sl, [sp]
 800ddf8:	464b      	mov	r3, r9
 800ddfa:	aa03      	add	r2, sp, #12
 800ddfc:	4621      	mov	r1, r4
 800ddfe:	4640      	mov	r0, r8
 800de00:	f7ff fee2 	bl	800dbc8 <_printf_common>
 800de04:	3001      	adds	r0, #1
 800de06:	d14c      	bne.n	800dea2 <_printf_i+0x1fe>
 800de08:	f04f 30ff 	mov.w	r0, #4294967295
 800de0c:	b004      	add	sp, #16
 800de0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de12:	4835      	ldr	r0, [pc, #212]	; (800dee8 <_printf_i+0x244>)
 800de14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800de18:	6829      	ldr	r1, [r5, #0]
 800de1a:	6823      	ldr	r3, [r4, #0]
 800de1c:	f851 6b04 	ldr.w	r6, [r1], #4
 800de20:	6029      	str	r1, [r5, #0]
 800de22:	061d      	lsls	r5, r3, #24
 800de24:	d514      	bpl.n	800de50 <_printf_i+0x1ac>
 800de26:	07df      	lsls	r7, r3, #31
 800de28:	bf44      	itt	mi
 800de2a:	f043 0320 	orrmi.w	r3, r3, #32
 800de2e:	6023      	strmi	r3, [r4, #0]
 800de30:	b91e      	cbnz	r6, 800de3a <_printf_i+0x196>
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	f023 0320 	bic.w	r3, r3, #32
 800de38:	6023      	str	r3, [r4, #0]
 800de3a:	2310      	movs	r3, #16
 800de3c:	e7b0      	b.n	800dda0 <_printf_i+0xfc>
 800de3e:	6823      	ldr	r3, [r4, #0]
 800de40:	f043 0320 	orr.w	r3, r3, #32
 800de44:	6023      	str	r3, [r4, #0]
 800de46:	2378      	movs	r3, #120	; 0x78
 800de48:	4828      	ldr	r0, [pc, #160]	; (800deec <_printf_i+0x248>)
 800de4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800de4e:	e7e3      	b.n	800de18 <_printf_i+0x174>
 800de50:	0659      	lsls	r1, r3, #25
 800de52:	bf48      	it	mi
 800de54:	b2b6      	uxthmi	r6, r6
 800de56:	e7e6      	b.n	800de26 <_printf_i+0x182>
 800de58:	4615      	mov	r5, r2
 800de5a:	e7bb      	b.n	800ddd4 <_printf_i+0x130>
 800de5c:	682b      	ldr	r3, [r5, #0]
 800de5e:	6826      	ldr	r6, [r4, #0]
 800de60:	6961      	ldr	r1, [r4, #20]
 800de62:	1d18      	adds	r0, r3, #4
 800de64:	6028      	str	r0, [r5, #0]
 800de66:	0635      	lsls	r5, r6, #24
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	d501      	bpl.n	800de70 <_printf_i+0x1cc>
 800de6c:	6019      	str	r1, [r3, #0]
 800de6e:	e002      	b.n	800de76 <_printf_i+0x1d2>
 800de70:	0670      	lsls	r0, r6, #25
 800de72:	d5fb      	bpl.n	800de6c <_printf_i+0x1c8>
 800de74:	8019      	strh	r1, [r3, #0]
 800de76:	2300      	movs	r3, #0
 800de78:	6123      	str	r3, [r4, #16]
 800de7a:	4615      	mov	r5, r2
 800de7c:	e7ba      	b.n	800ddf4 <_printf_i+0x150>
 800de7e:	682b      	ldr	r3, [r5, #0]
 800de80:	1d1a      	adds	r2, r3, #4
 800de82:	602a      	str	r2, [r5, #0]
 800de84:	681d      	ldr	r5, [r3, #0]
 800de86:	6862      	ldr	r2, [r4, #4]
 800de88:	2100      	movs	r1, #0
 800de8a:	4628      	mov	r0, r5
 800de8c:	f7f2 f9a8 	bl	80001e0 <memchr>
 800de90:	b108      	cbz	r0, 800de96 <_printf_i+0x1f2>
 800de92:	1b40      	subs	r0, r0, r5
 800de94:	6060      	str	r0, [r4, #4]
 800de96:	6863      	ldr	r3, [r4, #4]
 800de98:	6123      	str	r3, [r4, #16]
 800de9a:	2300      	movs	r3, #0
 800de9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dea0:	e7a8      	b.n	800ddf4 <_printf_i+0x150>
 800dea2:	6923      	ldr	r3, [r4, #16]
 800dea4:	462a      	mov	r2, r5
 800dea6:	4649      	mov	r1, r9
 800dea8:	4640      	mov	r0, r8
 800deaa:	47d0      	blx	sl
 800deac:	3001      	adds	r0, #1
 800deae:	d0ab      	beq.n	800de08 <_printf_i+0x164>
 800deb0:	6823      	ldr	r3, [r4, #0]
 800deb2:	079b      	lsls	r3, r3, #30
 800deb4:	d413      	bmi.n	800dede <_printf_i+0x23a>
 800deb6:	68e0      	ldr	r0, [r4, #12]
 800deb8:	9b03      	ldr	r3, [sp, #12]
 800deba:	4298      	cmp	r0, r3
 800debc:	bfb8      	it	lt
 800debe:	4618      	movlt	r0, r3
 800dec0:	e7a4      	b.n	800de0c <_printf_i+0x168>
 800dec2:	2301      	movs	r3, #1
 800dec4:	4632      	mov	r2, r6
 800dec6:	4649      	mov	r1, r9
 800dec8:	4640      	mov	r0, r8
 800deca:	47d0      	blx	sl
 800decc:	3001      	adds	r0, #1
 800dece:	d09b      	beq.n	800de08 <_printf_i+0x164>
 800ded0:	3501      	adds	r5, #1
 800ded2:	68e3      	ldr	r3, [r4, #12]
 800ded4:	9903      	ldr	r1, [sp, #12]
 800ded6:	1a5b      	subs	r3, r3, r1
 800ded8:	42ab      	cmp	r3, r5
 800deda:	dcf2      	bgt.n	800dec2 <_printf_i+0x21e>
 800dedc:	e7eb      	b.n	800deb6 <_printf_i+0x212>
 800dede:	2500      	movs	r5, #0
 800dee0:	f104 0619 	add.w	r6, r4, #25
 800dee4:	e7f5      	b.n	800ded2 <_printf_i+0x22e>
 800dee6:	bf00      	nop
 800dee8:	0800ec69 	.word	0x0800ec69
 800deec:	0800ec7a 	.word	0x0800ec7a

0800def0 <memcpy>:
 800def0:	440a      	add	r2, r1
 800def2:	4291      	cmp	r1, r2
 800def4:	f100 33ff 	add.w	r3, r0, #4294967295
 800def8:	d100      	bne.n	800defc <memcpy+0xc>
 800defa:	4770      	bx	lr
 800defc:	b510      	push	{r4, lr}
 800defe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df06:	4291      	cmp	r1, r2
 800df08:	d1f9      	bne.n	800defe <memcpy+0xe>
 800df0a:	bd10      	pop	{r4, pc}

0800df0c <memmove>:
 800df0c:	4288      	cmp	r0, r1
 800df0e:	b510      	push	{r4, lr}
 800df10:	eb01 0402 	add.w	r4, r1, r2
 800df14:	d902      	bls.n	800df1c <memmove+0x10>
 800df16:	4284      	cmp	r4, r0
 800df18:	4623      	mov	r3, r4
 800df1a:	d807      	bhi.n	800df2c <memmove+0x20>
 800df1c:	1e43      	subs	r3, r0, #1
 800df1e:	42a1      	cmp	r1, r4
 800df20:	d008      	beq.n	800df34 <memmove+0x28>
 800df22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df2a:	e7f8      	b.n	800df1e <memmove+0x12>
 800df2c:	4402      	add	r2, r0
 800df2e:	4601      	mov	r1, r0
 800df30:	428a      	cmp	r2, r1
 800df32:	d100      	bne.n	800df36 <memmove+0x2a>
 800df34:	bd10      	pop	{r4, pc}
 800df36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df3e:	e7f7      	b.n	800df30 <memmove+0x24>

0800df40 <_free_r>:
 800df40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df42:	2900      	cmp	r1, #0
 800df44:	d044      	beq.n	800dfd0 <_free_r+0x90>
 800df46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df4a:	9001      	str	r0, [sp, #4]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f1a1 0404 	sub.w	r4, r1, #4
 800df52:	bfb8      	it	lt
 800df54:	18e4      	addlt	r4, r4, r3
 800df56:	f000 f913 	bl	800e180 <__malloc_lock>
 800df5a:	4a1e      	ldr	r2, [pc, #120]	; (800dfd4 <_free_r+0x94>)
 800df5c:	9801      	ldr	r0, [sp, #4]
 800df5e:	6813      	ldr	r3, [r2, #0]
 800df60:	b933      	cbnz	r3, 800df70 <_free_r+0x30>
 800df62:	6063      	str	r3, [r4, #4]
 800df64:	6014      	str	r4, [r2, #0]
 800df66:	b003      	add	sp, #12
 800df68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df6c:	f000 b90e 	b.w	800e18c <__malloc_unlock>
 800df70:	42a3      	cmp	r3, r4
 800df72:	d908      	bls.n	800df86 <_free_r+0x46>
 800df74:	6825      	ldr	r5, [r4, #0]
 800df76:	1961      	adds	r1, r4, r5
 800df78:	428b      	cmp	r3, r1
 800df7a:	bf01      	itttt	eq
 800df7c:	6819      	ldreq	r1, [r3, #0]
 800df7e:	685b      	ldreq	r3, [r3, #4]
 800df80:	1949      	addeq	r1, r1, r5
 800df82:	6021      	streq	r1, [r4, #0]
 800df84:	e7ed      	b.n	800df62 <_free_r+0x22>
 800df86:	461a      	mov	r2, r3
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	b10b      	cbz	r3, 800df90 <_free_r+0x50>
 800df8c:	42a3      	cmp	r3, r4
 800df8e:	d9fa      	bls.n	800df86 <_free_r+0x46>
 800df90:	6811      	ldr	r1, [r2, #0]
 800df92:	1855      	adds	r5, r2, r1
 800df94:	42a5      	cmp	r5, r4
 800df96:	d10b      	bne.n	800dfb0 <_free_r+0x70>
 800df98:	6824      	ldr	r4, [r4, #0]
 800df9a:	4421      	add	r1, r4
 800df9c:	1854      	adds	r4, r2, r1
 800df9e:	42a3      	cmp	r3, r4
 800dfa0:	6011      	str	r1, [r2, #0]
 800dfa2:	d1e0      	bne.n	800df66 <_free_r+0x26>
 800dfa4:	681c      	ldr	r4, [r3, #0]
 800dfa6:	685b      	ldr	r3, [r3, #4]
 800dfa8:	6053      	str	r3, [r2, #4]
 800dfaa:	4421      	add	r1, r4
 800dfac:	6011      	str	r1, [r2, #0]
 800dfae:	e7da      	b.n	800df66 <_free_r+0x26>
 800dfb0:	d902      	bls.n	800dfb8 <_free_r+0x78>
 800dfb2:	230c      	movs	r3, #12
 800dfb4:	6003      	str	r3, [r0, #0]
 800dfb6:	e7d6      	b.n	800df66 <_free_r+0x26>
 800dfb8:	6825      	ldr	r5, [r4, #0]
 800dfba:	1961      	adds	r1, r4, r5
 800dfbc:	428b      	cmp	r3, r1
 800dfbe:	bf04      	itt	eq
 800dfc0:	6819      	ldreq	r1, [r3, #0]
 800dfc2:	685b      	ldreq	r3, [r3, #4]
 800dfc4:	6063      	str	r3, [r4, #4]
 800dfc6:	bf04      	itt	eq
 800dfc8:	1949      	addeq	r1, r1, r5
 800dfca:	6021      	streq	r1, [r4, #0]
 800dfcc:	6054      	str	r4, [r2, #4]
 800dfce:	e7ca      	b.n	800df66 <_free_r+0x26>
 800dfd0:	b003      	add	sp, #12
 800dfd2:	bd30      	pop	{r4, r5, pc}
 800dfd4:	200007d8 	.word	0x200007d8

0800dfd8 <sbrk_aligned>:
 800dfd8:	b570      	push	{r4, r5, r6, lr}
 800dfda:	4e0e      	ldr	r6, [pc, #56]	; (800e014 <sbrk_aligned+0x3c>)
 800dfdc:	460c      	mov	r4, r1
 800dfde:	6831      	ldr	r1, [r6, #0]
 800dfe0:	4605      	mov	r5, r0
 800dfe2:	b911      	cbnz	r1, 800dfea <sbrk_aligned+0x12>
 800dfe4:	f000 f8bc 	bl	800e160 <_sbrk_r>
 800dfe8:	6030      	str	r0, [r6, #0]
 800dfea:	4621      	mov	r1, r4
 800dfec:	4628      	mov	r0, r5
 800dfee:	f000 f8b7 	bl	800e160 <_sbrk_r>
 800dff2:	1c43      	adds	r3, r0, #1
 800dff4:	d00a      	beq.n	800e00c <sbrk_aligned+0x34>
 800dff6:	1cc4      	adds	r4, r0, #3
 800dff8:	f024 0403 	bic.w	r4, r4, #3
 800dffc:	42a0      	cmp	r0, r4
 800dffe:	d007      	beq.n	800e010 <sbrk_aligned+0x38>
 800e000:	1a21      	subs	r1, r4, r0
 800e002:	4628      	mov	r0, r5
 800e004:	f000 f8ac 	bl	800e160 <_sbrk_r>
 800e008:	3001      	adds	r0, #1
 800e00a:	d101      	bne.n	800e010 <sbrk_aligned+0x38>
 800e00c:	f04f 34ff 	mov.w	r4, #4294967295
 800e010:	4620      	mov	r0, r4
 800e012:	bd70      	pop	{r4, r5, r6, pc}
 800e014:	200007dc 	.word	0x200007dc

0800e018 <_malloc_r>:
 800e018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e01c:	1ccd      	adds	r5, r1, #3
 800e01e:	f025 0503 	bic.w	r5, r5, #3
 800e022:	3508      	adds	r5, #8
 800e024:	2d0c      	cmp	r5, #12
 800e026:	bf38      	it	cc
 800e028:	250c      	movcc	r5, #12
 800e02a:	2d00      	cmp	r5, #0
 800e02c:	4607      	mov	r7, r0
 800e02e:	db01      	blt.n	800e034 <_malloc_r+0x1c>
 800e030:	42a9      	cmp	r1, r5
 800e032:	d905      	bls.n	800e040 <_malloc_r+0x28>
 800e034:	230c      	movs	r3, #12
 800e036:	603b      	str	r3, [r7, #0]
 800e038:	2600      	movs	r6, #0
 800e03a:	4630      	mov	r0, r6
 800e03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e040:	4e2e      	ldr	r6, [pc, #184]	; (800e0fc <_malloc_r+0xe4>)
 800e042:	f000 f89d 	bl	800e180 <__malloc_lock>
 800e046:	6833      	ldr	r3, [r6, #0]
 800e048:	461c      	mov	r4, r3
 800e04a:	bb34      	cbnz	r4, 800e09a <_malloc_r+0x82>
 800e04c:	4629      	mov	r1, r5
 800e04e:	4638      	mov	r0, r7
 800e050:	f7ff ffc2 	bl	800dfd8 <sbrk_aligned>
 800e054:	1c43      	adds	r3, r0, #1
 800e056:	4604      	mov	r4, r0
 800e058:	d14d      	bne.n	800e0f6 <_malloc_r+0xde>
 800e05a:	6834      	ldr	r4, [r6, #0]
 800e05c:	4626      	mov	r6, r4
 800e05e:	2e00      	cmp	r6, #0
 800e060:	d140      	bne.n	800e0e4 <_malloc_r+0xcc>
 800e062:	6823      	ldr	r3, [r4, #0]
 800e064:	4631      	mov	r1, r6
 800e066:	4638      	mov	r0, r7
 800e068:	eb04 0803 	add.w	r8, r4, r3
 800e06c:	f000 f878 	bl	800e160 <_sbrk_r>
 800e070:	4580      	cmp	r8, r0
 800e072:	d13a      	bne.n	800e0ea <_malloc_r+0xd2>
 800e074:	6821      	ldr	r1, [r4, #0]
 800e076:	3503      	adds	r5, #3
 800e078:	1a6d      	subs	r5, r5, r1
 800e07a:	f025 0503 	bic.w	r5, r5, #3
 800e07e:	3508      	adds	r5, #8
 800e080:	2d0c      	cmp	r5, #12
 800e082:	bf38      	it	cc
 800e084:	250c      	movcc	r5, #12
 800e086:	4629      	mov	r1, r5
 800e088:	4638      	mov	r0, r7
 800e08a:	f7ff ffa5 	bl	800dfd8 <sbrk_aligned>
 800e08e:	3001      	adds	r0, #1
 800e090:	d02b      	beq.n	800e0ea <_malloc_r+0xd2>
 800e092:	6823      	ldr	r3, [r4, #0]
 800e094:	442b      	add	r3, r5
 800e096:	6023      	str	r3, [r4, #0]
 800e098:	e00e      	b.n	800e0b8 <_malloc_r+0xa0>
 800e09a:	6822      	ldr	r2, [r4, #0]
 800e09c:	1b52      	subs	r2, r2, r5
 800e09e:	d41e      	bmi.n	800e0de <_malloc_r+0xc6>
 800e0a0:	2a0b      	cmp	r2, #11
 800e0a2:	d916      	bls.n	800e0d2 <_malloc_r+0xba>
 800e0a4:	1961      	adds	r1, r4, r5
 800e0a6:	42a3      	cmp	r3, r4
 800e0a8:	6025      	str	r5, [r4, #0]
 800e0aa:	bf18      	it	ne
 800e0ac:	6059      	strne	r1, [r3, #4]
 800e0ae:	6863      	ldr	r3, [r4, #4]
 800e0b0:	bf08      	it	eq
 800e0b2:	6031      	streq	r1, [r6, #0]
 800e0b4:	5162      	str	r2, [r4, r5]
 800e0b6:	604b      	str	r3, [r1, #4]
 800e0b8:	4638      	mov	r0, r7
 800e0ba:	f104 060b 	add.w	r6, r4, #11
 800e0be:	f000 f865 	bl	800e18c <__malloc_unlock>
 800e0c2:	f026 0607 	bic.w	r6, r6, #7
 800e0c6:	1d23      	adds	r3, r4, #4
 800e0c8:	1af2      	subs	r2, r6, r3
 800e0ca:	d0b6      	beq.n	800e03a <_malloc_r+0x22>
 800e0cc:	1b9b      	subs	r3, r3, r6
 800e0ce:	50a3      	str	r3, [r4, r2]
 800e0d0:	e7b3      	b.n	800e03a <_malloc_r+0x22>
 800e0d2:	6862      	ldr	r2, [r4, #4]
 800e0d4:	42a3      	cmp	r3, r4
 800e0d6:	bf0c      	ite	eq
 800e0d8:	6032      	streq	r2, [r6, #0]
 800e0da:	605a      	strne	r2, [r3, #4]
 800e0dc:	e7ec      	b.n	800e0b8 <_malloc_r+0xa0>
 800e0de:	4623      	mov	r3, r4
 800e0e0:	6864      	ldr	r4, [r4, #4]
 800e0e2:	e7b2      	b.n	800e04a <_malloc_r+0x32>
 800e0e4:	4634      	mov	r4, r6
 800e0e6:	6876      	ldr	r6, [r6, #4]
 800e0e8:	e7b9      	b.n	800e05e <_malloc_r+0x46>
 800e0ea:	230c      	movs	r3, #12
 800e0ec:	603b      	str	r3, [r7, #0]
 800e0ee:	4638      	mov	r0, r7
 800e0f0:	f000 f84c 	bl	800e18c <__malloc_unlock>
 800e0f4:	e7a1      	b.n	800e03a <_malloc_r+0x22>
 800e0f6:	6025      	str	r5, [r4, #0]
 800e0f8:	e7de      	b.n	800e0b8 <_malloc_r+0xa0>
 800e0fa:	bf00      	nop
 800e0fc:	200007d8 	.word	0x200007d8

0800e100 <_realloc_r>:
 800e100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e104:	4680      	mov	r8, r0
 800e106:	4614      	mov	r4, r2
 800e108:	460e      	mov	r6, r1
 800e10a:	b921      	cbnz	r1, 800e116 <_realloc_r+0x16>
 800e10c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e110:	4611      	mov	r1, r2
 800e112:	f7ff bf81 	b.w	800e018 <_malloc_r>
 800e116:	b92a      	cbnz	r2, 800e124 <_realloc_r+0x24>
 800e118:	f7ff ff12 	bl	800df40 <_free_r>
 800e11c:	4625      	mov	r5, r4
 800e11e:	4628      	mov	r0, r5
 800e120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e124:	f000 f838 	bl	800e198 <_malloc_usable_size_r>
 800e128:	4284      	cmp	r4, r0
 800e12a:	4607      	mov	r7, r0
 800e12c:	d802      	bhi.n	800e134 <_realloc_r+0x34>
 800e12e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e132:	d812      	bhi.n	800e15a <_realloc_r+0x5a>
 800e134:	4621      	mov	r1, r4
 800e136:	4640      	mov	r0, r8
 800e138:	f7ff ff6e 	bl	800e018 <_malloc_r>
 800e13c:	4605      	mov	r5, r0
 800e13e:	2800      	cmp	r0, #0
 800e140:	d0ed      	beq.n	800e11e <_realloc_r+0x1e>
 800e142:	42bc      	cmp	r4, r7
 800e144:	4622      	mov	r2, r4
 800e146:	4631      	mov	r1, r6
 800e148:	bf28      	it	cs
 800e14a:	463a      	movcs	r2, r7
 800e14c:	f7ff fed0 	bl	800def0 <memcpy>
 800e150:	4631      	mov	r1, r6
 800e152:	4640      	mov	r0, r8
 800e154:	f7ff fef4 	bl	800df40 <_free_r>
 800e158:	e7e1      	b.n	800e11e <_realloc_r+0x1e>
 800e15a:	4635      	mov	r5, r6
 800e15c:	e7df      	b.n	800e11e <_realloc_r+0x1e>
	...

0800e160 <_sbrk_r>:
 800e160:	b538      	push	{r3, r4, r5, lr}
 800e162:	4d06      	ldr	r5, [pc, #24]	; (800e17c <_sbrk_r+0x1c>)
 800e164:	2300      	movs	r3, #0
 800e166:	4604      	mov	r4, r0
 800e168:	4608      	mov	r0, r1
 800e16a:	602b      	str	r3, [r5, #0]
 800e16c:	f7f9 f852 	bl	8007214 <_sbrk>
 800e170:	1c43      	adds	r3, r0, #1
 800e172:	d102      	bne.n	800e17a <_sbrk_r+0x1a>
 800e174:	682b      	ldr	r3, [r5, #0]
 800e176:	b103      	cbz	r3, 800e17a <_sbrk_r+0x1a>
 800e178:	6023      	str	r3, [r4, #0]
 800e17a:	bd38      	pop	{r3, r4, r5, pc}
 800e17c:	200007e0 	.word	0x200007e0

0800e180 <__malloc_lock>:
 800e180:	4801      	ldr	r0, [pc, #4]	; (800e188 <__malloc_lock+0x8>)
 800e182:	f000 b811 	b.w	800e1a8 <__retarget_lock_acquire_recursive>
 800e186:	bf00      	nop
 800e188:	200007e4 	.word	0x200007e4

0800e18c <__malloc_unlock>:
 800e18c:	4801      	ldr	r0, [pc, #4]	; (800e194 <__malloc_unlock+0x8>)
 800e18e:	f000 b80c 	b.w	800e1aa <__retarget_lock_release_recursive>
 800e192:	bf00      	nop
 800e194:	200007e4 	.word	0x200007e4

0800e198 <_malloc_usable_size_r>:
 800e198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e19c:	1f18      	subs	r0, r3, #4
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	bfbc      	itt	lt
 800e1a2:	580b      	ldrlt	r3, [r1, r0]
 800e1a4:	18c0      	addlt	r0, r0, r3
 800e1a6:	4770      	bx	lr

0800e1a8 <__retarget_lock_acquire_recursive>:
 800e1a8:	4770      	bx	lr

0800e1aa <__retarget_lock_release_recursive>:
 800e1aa:	4770      	bx	lr

0800e1ac <_init>:
 800e1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ae:	bf00      	nop
 800e1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1b2:	bc08      	pop	{r3}
 800e1b4:	469e      	mov	lr, r3
 800e1b6:	4770      	bx	lr

0800e1b8 <_fini>:
 800e1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ba:	bf00      	nop
 800e1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1be:	bc08      	pop	{r3}
 800e1c0:	469e      	mov	lr, r3
 800e1c2:	4770      	bx	lr
